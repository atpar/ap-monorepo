{
  "address": "0xc6c4ca0F0607994027f3537098A0Ead7526E0860",
  "abi": [],
  "transactionHash": "0xe40b2a047dbd653755132d8b47ecd407c4164700893896c9483a94e8e586275a",
  "receipt": {
    "to": null,
    "from": "0x6C51ECF949882c2183357B860FD82Dd4bb631840",
    "contractAddress": "0xc6c4ca0F0607994027f3537098A0Ead7526E0860",
    "transactionIndex": 0,
    "gasUsed": "1569834",
    "logsBloom": "0x
    "blockHash": "0xf00db054a470972dc517854ea46b168cf72426d11a1de19e01baff450c8e6abc",
    "transactionHash": "0xe40b2a047dbd653755132d8b47ecd407c4164700893896c9483a94e8e586275a",
    "logs": [],
    "blockNumber": 65,
    "cumulativeGasUsed": "1569834",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3e43ceeb5da11f8668c639d97933f6e4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decodeAndGetSTKTerms(Asset storage)\":{\"details\":\"Decode and loads STKTerms\"},\"encodeAndSetSTKTerms(Asset storage,STKTerms)\":{\"details\":\"Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encodeAndSetSTKTerms(Asset storage,STKTerms)\":{\"notice\":\"All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/STK/STKEncoder.sol\":\"STKEncoder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\nenum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct State {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    PenaltyType penaltyType;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    int256 penaltyRate;\\n    int256 delinquencyRate;\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 delinquencyRate;\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionExercisePeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    PenaltyType penaltyType;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    int256 penaltyRate;\\n    int256 delinquencyRate;\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    // int256 priceAtTerminationDate; // not implemented\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\",\"keccak256\":\"0x58c525726b2ec1ce52cb6beeb7c2aa7b90d2df28cbfb31a198e3be979fbd9858\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistryStorage.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"./State/StateEncoder.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\nstruct Settlement {\\n    bool isSettled;\\n    int256 payoff;\\n}\\n\\nstruct Asset {\\n    // boolean indicating that asset exists / is registered\\n    bool isSet;\\n    // address of the ACTUS Engine used for computing the State and the Payoff of the asset\\n    address engine;\\n    // address of the Asset Actor which is allowed to update the State of the asset\\n    address actor;\\n    // schedule of the asset\\n    Schedule schedule;\\n    // ownership of the asset\\n    AssetOwnership ownership;\\n    // granular ownership of the event type specific cashflows\\n    // per default owners are beneficiaries defined in ownership object\\n    // cashflow id (:= (EventType index + 1) * direction) => owner\\n    mapping (int8 => address) cashflowBeneficiaries;\\n    // method level access control - stores which address can a specific method\\n    // method signature => address => has access\\n    mapping (bytes4 => mapping (address => bool)) access;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedTerms;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedState;\\n    // indicates whether a specific event was settled\\n    mapping (bytes32 => Settlement) settlement;\\n}\\n\\n/**\\n * @title BaseRegistryStorage\\n * @notice Describes the storage of the AssetRegistry\\n * Contains getter and setter methods for encoding, decoding data to optimize gas cost.\\n * Circumvents storing default values by relying on the characteristic of mappings returning zero for not set values.\\n */\\nabstract contract BaseRegistryStorage {\\n\\n    using StateEncoder for Asset;\\n    using ScheduleEncoder for Asset;\\n\\n    // AssetId => Asset\\n    mapping (bytes32 => Asset) internal assets;\\n}\\n\",\"keccak256\":\"0xea52d9bb20a7b52f75fd27419e08201539bb402a9ce8a6da1ba5a2a585eedb87\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary ScheduleEncoder {\\n\\n    function encodeAndSetSchedule(Asset storage asset, bytes32[] memory schedule) internal {\\n        for (uint256 i = 0; i < schedule.length; i++) {\\n            if (schedule[i] == bytes32(0)) break;\\n            asset.schedule.events[i] = schedule[i];\\n            asset.schedule.length = i + 1;\\n        }\\n    }\\n\\n    function decodeAndGetSchedule(Asset storage asset) internal view returns (bytes32[] memory) {\\n        bytes32[] memory schedule = new bytes32[](asset.schedule.length);\\n\\n        for (uint256 i = 0; i < asset.schedule.length; i++) {\\n            schedule[i] = asset.schedule.events[i];\\n        }\\n\\n        return schedule;\\n    }\\n}\\n\",\"keccak256\":\"0x420da04c67322d387c9b0fbeb00accc59a63fb9c10cb7b4c21f955792c4ad236\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/State/StateEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary StateEncoder {\\n\\n    function storeInPackedState(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedState[attributeKey] == value) return;\\n        asset.packedState[attributeKey] = value;\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store State\\n     */\\n    function encodeAndSetState(Asset storage asset, State memory state) internal {\\n        storeInPackedState(asset, \\\"contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n\\n        storeInPackedState(asset, \\\"notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n        storeInPackedState(asset, \\\"exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store finalized State\\n     */\\n    function encodeAndSetFinalizedState(Asset storage asset, State memory state) internal {\\n        storeInPackedState(asset, \\\"F_contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"F_statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"F_nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"F_maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"F_exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"F_terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"F_lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"F_lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n\\n        storeInPackedState(asset, \\\"F_notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"F_accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"F_feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"F_nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"F_interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n        storeInPackedState(asset, \\\"F_exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"F_quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"F_couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"F_marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"F_adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"F_dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"F_splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Decode and load the State of the asset\\n     */\\n    function decodeAndGetState(Asset storage asset) internal view returns (State memory) {\\n        return State(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"statusDate\\\"]),\\n            uint256(asset.packedState[\\\"nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"lastCouponFixingDate\\\"]),\\n            uint256(asset.packedState[\\\"lastDividendFixingDate\\\"]),\\n\\n            int256(asset.packedState[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"nextPrincipalRedemptionPayment\\\"]),\\n            int256(asset.packedState[\\\"exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"exerciseQuantity\\\"]),\\n\\n            int256(asset.packedState[\\\"quantity\\\"]),\\n            int256(asset.packedState[\\\"couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"marginFactor\\\"]),\\n            int256(asset.packedState[\\\"adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"splitRatio\\\"])\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and load the finalized State of the asset\\n     */\\n    function decodeAndGetFinalizedState(Asset storage asset) internal view returns (State memory) {\\n        return State(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"F_statusDate\\\"]),\\n            uint256(asset.packedState[\\\"F_nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"F_exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"F_terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastCouponFixingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastDividendFixingDate\\\"]),\\n\\n            int256(asset.packedState[\\\"F_notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"F_accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"F_feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"F_nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"F_interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_nextPrincipalRedemptionPayment\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseQuantity\\\"]),\\n\\n            int256(asset.packedState[\\\"F_quantity\\\"]),\\n            int256(asset.packedState[\\\"F_couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"F_marginFactor\\\"]),\\n            int256(asset.packedState[\\\"F_adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"F_dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"F_splitRatio\\\"])\\n        );\\n    }\\n\\n\\n    function decodeAndGetEnumValueForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"F_contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetUIntValueForForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedState[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedState[attributeKey]);\\n    }\\n}\\n\",\"keccak256\":\"0x8ea00bd6be196c2c740901169da39a8a9224d4b3c8655408d4beb9dc6d20dc6f\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"},\"contracts/Core/STK/STKEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary STKEncoder {\\n\\n    function storeInPackedTerms(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedTerms[attributeKey] == value) return;\\n        asset.packedTerms[attributeKey] = value;\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\\n     * @notice All non zero values of the overwrittenTerms object are stored.\\n     * It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\\n     */\\n    function encodeAndSetSTKTerms(Asset storage asset, STKTerms memory terms) external {\\n        storeInPackedTerms(\\n            asset,\\n            \\\"enums\\\",\\n            bytes32(uint256(uint8(terms.contractType))) << 248 |\\n            bytes32(uint256(uint8(terms.calendar))) << 240 |\\n            bytes32(uint256(uint8(terms.contractRole))) << 232 |\\n            bytes32(uint256(uint8(terms.dayCountConvention))) << 224 |\\n            bytes32(uint256(uint8(terms.businessDayConvention))) << 216 |\\n            bytes32(uint256(uint8(terms.endOfMonthConvention))) << 208 |\\n            bytes32(uint256(uint8(terms.redeemableByIssuer))) << 200\\n        );\\n\\n        storeInPackedTerms(asset, \\\"currency\\\", bytes32(uint256(terms.currency) << 96));\\n        storeInPackedTerms(asset, \\\"settlementCurrency\\\", bytes32(uint256(terms.settlementCurrency) << 96));\\n\\n        storeInPackedTerms(asset, \\\"contractDealDate\\\", bytes32(terms.contractDealDate));\\n        storeInPackedTerms(asset, \\\"statusDate\\\", bytes32(terms.statusDate));\\n        storeInPackedTerms(asset, \\\"issueDate\\\", bytes32(terms.issueDate));\\n        storeInPackedTerms(asset, \\\"purchaseDate\\\", bytes32(terms.purchaseDate));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfDividend\\\", bytes32(terms.cycleAnchorDateOfDividend));\\n\\n        storeInPackedTerms(asset, \\\"nominalPrice\\\", bytes32(terms.nominalPrice));\\n        storeInPackedTerms(asset, \\\"notionalPrincipal\\\", bytes32(terms.notionalPrincipal));\\n        storeInPackedTerms(asset, \\\"issuePrice\\\", bytes32(terms.issuePrice));\\n        storeInPackedTerms(asset, \\\"quantity\\\", bytes32(terms.quantity));\\n        storeInPackedTerms(asset, \\\"priceAtPurchaseDate\\\", bytes32(terms.priceAtPurchaseDate));\\n        storeInPackedTerms(asset, \\\"redemptionPrice\\\", bytes32(terms.redemptionPrice));\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"dividendRecordPeriod\\\",\\n            bytes32(uint256(terms.dividendRecordPeriod.i)) << 24 |\\n            bytes32(uint256(terms.dividendRecordPeriod.p)) << 16 |\\n            bytes32(uint256((terms.dividendRecordPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"dividendPaymentPeriod\\\",\\n            bytes32(uint256(terms.dividendPaymentPeriod.i)) << 24 |\\n            bytes32(uint256(terms.dividendPaymentPeriod.p)) << 16 |\\n            bytes32(uint256((terms.dividendPaymentPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"splitSettlementPeriod\\\",\\n            bytes32(uint256(terms.splitSettlementPeriod.i)) << 24 |\\n            bytes32(uint256(terms.splitSettlementPeriod.p)) << 16 |\\n            bytes32(uint256((terms.splitSettlementPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"redemptionRecordPeriod\\\",\\n            bytes32(uint256(terms.redemptionRecordPeriod.i)) << 24 |\\n            bytes32(uint256(terms.redemptionRecordPeriod.p)) << 16 |\\n            bytes32(uint256((terms.redemptionRecordPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"redemptionPaymentPeriod\\\",\\n            bytes32(uint256(terms.redemptionPaymentPeriod.i)) << 24 |\\n            bytes32(uint256(terms.redemptionPaymentPeriod.p)) << 16 |\\n            bytes32(uint256((terms.redemptionPaymentPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfDividend\\\",\\n            bytes32(uint256(terms.cycleOfDividend.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfDividend.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfDividend.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfDividend.isSet) ? 1 : 0))\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and loads STKTerms\\n     */\\n    function decodeAndGetSTKTerms(Asset storage asset) external view returns (STKTerms memory) {\\n        return STKTerms(\\n            ContractType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248))),\\n            Calendar(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240))),\\n            ContractRole(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232))),\\n            DayCountConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224))),\\n            BusinessDayConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216))),\\n            EndOfMonthConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208))),\\n            RedeemableByIssuer(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200))),\\n\\n            address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96)),\\n            address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96)),\\n\\n            uint256(asset.packedTerms[\\\"contractDealDate\\\"]),\\n            uint256(asset.packedTerms[\\\"statusDate\\\"]),\\n            uint256(asset.packedTerms[\\\"issueDate\\\"]),\\n            uint256(asset.packedTerms[\\\"purchaseDate\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfDividend\\\"]),\\n\\n            int256(asset.packedTerms[\\\"nominalPrice\\\"]),\\n            int256(asset.packedTerms[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedTerms[\\\"issuePrice\\\"]),\\n            int256(asset.packedTerms[\\\"quantity\\\"]),\\n            int256(asset.packedTerms[\\\"priceAtPurchaseDate\\\"]),\\n            int256(asset.packedTerms[\\\"redemptionPrice\\\"]),\\n\\n            IP(\\n                uint256(asset.packedTerms[\\\"dividendRecordPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"dividendRecordPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"dividendRecordPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"dividendPaymentPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"dividendPaymentPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"dividendPaymentPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"splitSettlementPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"splitSettlementPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"splitSettlementPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"redemptionRecordPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"redemptionRecordPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"redemptionRecordPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"redemptionPaymentPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"redemptionPaymentPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"redemptionPaymentPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfDividend\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfDividend\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfDividend\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfDividend\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            )\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractType\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"calendar\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240));\\n        } else if (attributeKey == bytes32(\\\"contractRole\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232));\\n        } else if (attributeKey == bytes32(\\\"dayCountConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224));\\n        } else if (attributeKey == bytes32(\\\"businessDayConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216));\\n        } else if (attributeKey == bytes32(\\\"endOfMonthConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208));\\n        } else if (attributeKey == bytes32(\\\"redeemableByIssuer\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetAddressValueForForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (attributeKey == bytes32(\\\"currency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96));\\n        } else if (attributeKey == bytes32(\\\"settlementCurrency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96));\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function decodeAndGetBytes32ValueForForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return asset.packedTerms[attributeKey];\\n    }\\n\\n    function decodeAndGetUIntValueForForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetPeriodValueForForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IP memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"dividendRecordPeriod\\\")\\n            || attributeKey == bytes32(\\\"dividendPaymentPeriod\\\")\\n            || attributeKey == bytes32(\\\"splitSettlementPeriod\\\")\\n            || attributeKey == bytes32(\\\"redemptionRecordPeriod\\\")\\n            || attributeKey == bytes32(\\\"redemptionPaymentPeriod\\\")\\n        ) {\\n            return IP(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                (asset.packedTerms[attributeKey] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IP(0, P(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetCycleValueForForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IPS memory)\\n    {\\n        if ( attributeKey == bytes32(\\\"cycleOfDividend\\\") ) {\\n            return IPS(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[attributeKey] >> 8))),\\n                (asset.packedTerms[attributeKey] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IPS(0, P(0), S(0), false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xda5726174d7981ae50c82b0ea5315db21e5428d9af7f12eaf2bdeef8e74a37cb\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x611b70610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c80636eff8f1f116100705780636eff8f1f1461010b578063839ebf601461012b578063aadcc0d7146100eb578063c77996771461014b578063ce3f6e301461016d5761009d565b80631ef758d1146100a25780634dbb8477146100cb5780635fe316eb146100eb5780636aa96857146100eb575b600080fd5b6100b56100b036600461165b565b61018d565b6040516100c29190611910565b60405180910390f35b6100de6100d9366004611643565b61029c565b6040516100c2919061192c565b6100fe6100f936600461165b565b610aaf565b6040516100c29190611907565b61011e61011936600461165b565b610ac5565b6040516100c2919061191e565b61013e61013936600461165b565b610c08565b6040516100c29190611ad7565b81801561015757600080fd5b5061016b61016636600461167c565b610dc1565b005b61018061017b36600461165b565b611305565b6040516100c291906118f3565b6101956113c3565b6e18de58db1953d9911a5d9a59195b99608a1b82141561026c57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff1660058111156101ee57fe5b60058111156101f957fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561022957fe5b600181111561023457fe5b81526000848152600e8601602090815260409091205491019060019081161461025e576000610261565b60015b151590529050610296565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290505b92915050565b6102a46113ed565b604080516103408101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c60128111156102d957fe5b60128111156102e457fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561031c57fe5b600181111561032757fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c81111561035f57fe5b600c81111561036a57fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660058111156103a257fe5b60058111156103ad57fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660088111156103e557fe5b60088111156103f057fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561042857fe5b600181111561043357fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561046b57fe5b600181111561047657fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c828701526f636f6e74726163744465616c4461746560801b85528383528185205481870152697374617475734461746560b01b85528383528185205460808701526869737375654461746560b81b85528383528185205460a08701526b70757263686173654461746560a01b85528383528185205460c08701527818de58db19505b98da1bdc91185d1953d9911a5d9a59195b99603a1b85528383528185205460e08701526b6e6f6d696e616c507269636560a01b855283835281852054610100870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b855283835281852054610120870152696973737565507269636560b01b855283835281852054610140870152677175616e7469747960c01b855283835281852054610160870152727072696365417450757263686173654461746560681b8552838352818520546101808701526e726564656d7074696f6e507269636560881b8552838352818520546101a08701528151908101825273191a5d9a59195b99149958dbdc9914195c9a5bd960621b80865284845291852054601881901c8252919094529181526101c09093019282019060101c60ff16600581111561067c57fe5b600581111561068757fe5b815273191a5d9a59195b99149958dbdc9914195c9a5bd960621b6000908152600e8701602090815260409091205491019060081c6001908116146106cc5760006106cf565b60015b1515905281526040805160608101825274191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561073157fe5b600581111561073c57fe5b815274191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b6000908152600e8701602090815260409091205491019060081c600190811614610782576000610785565b60015b15159052815260408051606081018252741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156107e757fe5b60058111156107f257fe5b8152741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b6000908152600e8701602090815260409091205491019060081c60019081161461083857600061083b565b60015b15159052815260408051606081018252751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561089e57fe5b60058111156108a957fe5b8152751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6000908152600e8701602090815260409091205491019060081c6001908116146108f05760006108f3565b60015b15159052815260408051606081018252761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561095757fe5b600581111561096257fe5b8152761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b6000908152600e8701602090815260409091205491019060081c6001908116146109aa5760006109ad565b60015b151590528152604080516080810182526e18de58db1953d9911a5d9a59195b99608a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610a0957fe5b6005811115610a1457fe5b8152602001600886600e0160006e18de58db1953d9911a5d9a59195b99608a1b815260200190815260200160002054901c60001c60ff166001811115610a5657fe5b6001811115610a6157fe5b81526e18de58db1953d9911a5d9a59195b99608a1b6000908152600e87016020908152604090912054910190600190811614610a9e576000610aa1565b60015b15159052905290505b919050565b6000908152600e91909101602052604090205490565b610acd6114e6565b73191a5d9a59195b99149958dbdc9914195c9a5bd960621b821480610b09575074191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b82145b80610b2b5750741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b82145b80610b4e5750751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b82145b80610b725750761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b82145b15610bee57604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff166005811115610bb657fe5b6005811115610bc157fe5b81526000848152600e8601602090815260409091205491019060081c60019081161461025e576000610261565b604080516060810190915260008082526020820190610289565b60006b636f6e74726163745479706560a01b821415610c44575064656e756d7360d81b6000908152600e8301602052604090205460f81c610296565b6731b0b632b73230b960c11b821415610c7a575064656e756d7360d81b6000908152600e8301602052604090205460f01c610296565b6b636f6e7472616374526f6c6560a01b821415610cb4575064656e756d7360d81b6000908152600e8301602052604090205460e81c610296565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b821415610cf4575064656e756d7360d81b6000908152600e8301602052604090205460e01c610296565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415610d37575064656e756d7360d81b6000908152600e8301602052604090205460d81c610296565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415610d79575064656e756d7360d81b6000908152600e8301602052604090205460d01c610296565b713932b232b2b6b0b13632a13ca4b9b9bab2b960711b821415610db9575064656e756d7360d81b6000908152600e8301602052604090205460c81c610296565b506000610296565b610e8c8264656e756d7360d81b60c88460c001516001811115610de057fe5b60ff1660001b901b60d08560a001516001811115610dfa57fe5b60ff1660001b901b60d886608001516008811115610e1457fe5b60ff1660001b901b60e087606001516005811115610e2e57fe5b60ff1660001b901b60e88860400151600c811115610e4857fe5b60ff1660001b901b60f089602001516001811115610e6257fe5b60ff1660001b901b60f88a600001516012811115610e7c57fe5b60ff16901b17171717171761138d565b610eb6826763757272656e637960c01b60608460e001516001600160a01b0316901b60001b61138d565b610eeb8271736574746c656d656e7443757272656e637960701b60608461010001516001600160a01b0316901b60001b61138d565b610f11826f636f6e74726163744465616c4461746560801b83610120015160001b61138d565b610f3182697374617475734461746560b01b83610140015160001b61138d565b610f50826869737375654461746560b81b83610160015160001b61138d565b610f72826b70757263686173654461746560a01b83610180015160001b61138d565b610fa1827818de58db19505b98da1bdc91185d1953d9911a5d9a59195b99603a1b836101a0015160001b61138d565b610fc3826b6e6f6d696e616c507269636560a01b836101c0015160001b61138d565b610fea82701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836101e0015160001b61138d565b61100a82696973737565507269636560b01b83610200015160001b61138d565b61102882677175616e7469747960c01b83610220015160001b61138d565b61105182727072696365417450757263686173654461746560681b83610240015160001b61138d565b611076826e726564656d7074696f6e507269636560881b83610260015160001b61138d565b6110de8273191a5d9a59195b99149958dbdc9914195c9a5bd960621b6008846102800151604001516110a95760006110ac565b60015b60ff1660001b901b60108561028001516020015160058111156110cb57fe5b6102808701515160181b911b171761138d565b6111478274191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b6008846102a0015160400151611112576000611115565b60015b60ff1660001b901b6010856102a0015160200151600581111561113457fe5b6102a08701515160181b911b171761138d565b6111b082741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b6008846102c001516040015161117b57600061117e565b60015b60ff1660001b901b6010856102c0015160200151600581111561119d57fe5b6102c08701515160181b911b171761138d565b61121a82751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6008846102e00151604001516111e55760006111e8565b60015b60ff1660001b901b6010856102e0015160200151600581111561120757fe5b6102e08701515160181b911b171761138d565b61128582761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b600884610300015160400151611250576000611253565b60015b60ff1660001b901b601085610300015160200151600581111561127257fe5b6103008701515160181b911b171761138d565b611301826e18de58db1953d9911a5d9a59195b99608a1b836103200151606001516112b15760006112b4565b60015b60ff1660001b60088561032001516040015160018111156112d157fe5b60001b901b60108661032001516020015160058111156112ed57fe5b6103208801515160181b911b17171761138d565b5050565b60006763757272656e637960c01b82141561134057506763757272656e637960c01b6000908152600e8301602052604090205460601c610296565b71736574746c656d656e7443757272656e637960701b821415610db9575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c610296565b6000828152600e840160205260409020548114156113aa576113be565b6000828152600e8401602052604090208190555b505050565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290565b604080516103408101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016114a06114e6565b81526020016114ad6114e6565b81526020016114ba6114e6565b81526020016114c76114e6565b81526020016114d46114e6565b81526020016114e16113c3565b905290565b6040805160608101909152600080825260208201906113e0565b80356001600160a01b0381168114610aaa57600080fd5b80358015158114610aaa57600080fd5b803560098110610aaa57600080fd5b8035610aaa81611b20565b8035600d8110610aaa57600080fd5b803560138110610aaa57600080fd5b8035610aaa81611b2d565b60006080828403121561157b578081fd5b6040516080810181811067ffffffffffffffff8211171561159857fe5b6040528235815290508060208301356115b081611b2d565b602082015260408301356115c381611b20565b60408201526115d460608401611517565b60608201525092915050565b6000606082840312156115f1578081fd5b6040516060810181811067ffffffffffffffff8211171561160e57fe5b60405282358152905080602083013561162681611b2d565b602082015261163760408401611517565b60408201525092915050565b600060208284031215611654578081fd5b5035919050565b6000806040838503121561166d578081fd5b50508035926020909101359150565b600080828403610500811215611690578283fd5b833592506104e0601f19820112156116a6578182fd5b506116b2610340611ae5565b6116be60208501611550565b81526116cc60408501611536565b60208201526116dd60608501611541565b60408201526116ee6080850161155f565b60608201526116ff60a08501611527565b608082015261171060c08501611536565b60a082015261172160e08501611536565b60c0820152610100611734818601611500565b60e0830152610120611747818701611500565b828401526101409150818601358184015250610160808601358284015261018091508186013581840152506101a080860135828401526101c091508186013581840152506101e08086013582840152610200915081860135818401525061022080860135828401526102409150818601358184015250610260808601358284015261028091508186013581840152506102a06117e5878288016115e0565b8284015261030091506117fa878388016115e0565b9083015261180c8661036087016115e0565b6102c0830152611820866103c087016115e0565b6102e08301526118348661042087016115e0565b9082015261184685610480860161156a565b610320820152809150509250929050565b6001600160a01b03169052565b6009811061186e57fe5b9052565b61186e81611b09565b600d811061186e57fe5b6013811061186e57fe5b61186e81611b16565b8051825260208101516118aa81611b16565b602083015260408101516118bd81611b09565b60408301526060908101511515910152565b8051825260208101516118e181611b16565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b608081016102968284611898565b6060810161029682846118cf565b60006104e082019050611940828451611885565b60208301516119526020840182611872565b506040830151611965604084018261187b565b506060830151611978606084018261188f565b50608083015161198b6080840182611864565b5060a083015161199e60a0840182611872565b5060c08301516119b160c0840182611872565b5060e08301516119c460e0840182611857565b50610100808401516119d882850182611857565b505061012083810151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151611a66828501826118cf565b50506102a08301516102e0611a7d818501836118cf565b6102c08501519150611a936103408501836118cf565b8401519050611aa66103a08401826118cf565b50610300830151611abb6104008401826118cf565b50610320830151611ad0610460840182611898565b5092915050565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715611b0157fe5b604052919050565b60028110611b1357fe5b50565b60068110611b1357fe5b60028110611b1357600080fd5b60068110611b1357600080fdfea26469706673582212209836478c3e0356b199f6dde62cea2d63332ce552df1798c790bfe7021fd4065c64736f6c63430007040033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061009d5760003560e01c80636eff8f1f116100705780636eff8f1f1461010b578063839ebf601461012b578063aadcc0d7146100eb578063c77996771461014b578063ce3f6e301461016d5761009d565b80631ef758d1146100a25780634dbb8477146100cb5780635fe316eb146100eb5780636aa96857146100eb575b600080fd5b6100b56100b036600461165b565b61018d565b6040516100c29190611910565b60405180910390f35b6100de6100d9366004611643565b61029c565b6040516100c2919061192c565b6100fe6100f936600461165b565b610aaf565b6040516100c29190611907565b61011e61011936600461165b565b610ac5565b6040516100c2919061191e565b61013e61013936600461165b565b610c08565b6040516100c29190611ad7565b81801561015757600080fd5b5061016b61016636600461167c565b610dc1565b005b61018061017b36600461165b565b611305565b6040516100c291906118f3565b6101956113c3565b6e18de58db1953d9911a5d9a59195b99608a1b82141561026c57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff1660058111156101ee57fe5b60058111156101f957fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561022957fe5b600181111561023457fe5b81526000848152600e8601602090815260409091205491019060019081161461025e576000610261565b60015b151590529050610296565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290505b92915050565b6102a46113ed565b604080516103408101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c60128111156102d957fe5b60128111156102e457fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561031c57fe5b600181111561032757fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c81111561035f57fe5b600c81111561036a57fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660058111156103a257fe5b60058111156103ad57fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660088111156103e557fe5b60088111156103f057fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561042857fe5b600181111561043357fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561046b57fe5b600181111561047657fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c828701526f636f6e74726163744465616c4461746560801b85528383528185205481870152697374617475734461746560b01b85528383528185205460808701526869737375654461746560b81b85528383528185205460a08701526b70757263686173654461746560a01b85528383528185205460c08701527818de58db19505b98da1bdc91185d1953d9911a5d9a59195b99603a1b85528383528185205460e08701526b6e6f6d696e616c507269636560a01b855283835281852054610100870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b855283835281852054610120870152696973737565507269636560b01b855283835281852054610140870152677175616e7469747960c01b855283835281852054610160870152727072696365417450757263686173654461746560681b8552838352818520546101808701526e726564656d7074696f6e507269636560881b8552838352818520546101a08701528151908101825273191a5d9a59195b99149958dbdc9914195c9a5bd960621b80865284845291852054601881901c8252919094529181526101c09093019282019060101c60ff16600581111561067c57fe5b600581111561068757fe5b815273191a5d9a59195b99149958dbdc9914195c9a5bd960621b6000908152600e8701602090815260409091205491019060081c6001908116146106cc5760006106cf565b60015b1515905281526040805160608101825274191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561073157fe5b600581111561073c57fe5b815274191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b6000908152600e8701602090815260409091205491019060081c600190811614610782576000610785565b60015b15159052815260408051606081018252741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156107e757fe5b60058111156107f257fe5b8152741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b6000908152600e8701602090815260409091205491019060081c60019081161461083857600061083b565b60015b15159052815260408051606081018252751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561089e57fe5b60058111156108a957fe5b8152751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6000908152600e8701602090815260409091205491019060081c6001908116146108f05760006108f3565b60015b15159052815260408051606081018252761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561095757fe5b600581111561096257fe5b8152761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b6000908152600e8701602090815260409091205491019060081c6001908116146109aa5760006109ad565b60015b151590528152604080516080810182526e18de58db1953d9911a5d9a59195b99608a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610a0957fe5b6005811115610a1457fe5b8152602001600886600e0160006e18de58db1953d9911a5d9a59195b99608a1b815260200190815260200160002054901c60001c60ff166001811115610a5657fe5b6001811115610a6157fe5b81526e18de58db1953d9911a5d9a59195b99608a1b6000908152600e87016020908152604090912054910190600190811614610a9e576000610aa1565b60015b15159052905290505b919050565b6000908152600e91909101602052604090205490565b610acd6114e6565b73191a5d9a59195b99149958dbdc9914195c9a5bd960621b821480610b09575074191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b82145b80610b2b5750741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b82145b80610b4e5750751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b82145b80610b725750761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b82145b15610bee57604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff166005811115610bb657fe5b6005811115610bc157fe5b81526000848152600e8601602090815260409091205491019060081c60019081161461025e576000610261565b604080516060810190915260008082526020820190610289565b60006b636f6e74726163745479706560a01b821415610c44575064656e756d7360d81b6000908152600e8301602052604090205460f81c610296565b6731b0b632b73230b960c11b821415610c7a575064656e756d7360d81b6000908152600e8301602052604090205460f01c610296565b6b636f6e7472616374526f6c6560a01b821415610cb4575064656e756d7360d81b6000908152600e8301602052604090205460e81c610296565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b821415610cf4575064656e756d7360d81b6000908152600e8301602052604090205460e01c610296565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415610d37575064656e756d7360d81b6000908152600e8301602052604090205460d81c610296565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415610d79575064656e756d7360d81b6000908152600e8301602052604090205460d01c610296565b713932b232b2b6b0b13632a13ca4b9b9bab2b960711b821415610db9575064656e756d7360d81b6000908152600e8301602052604090205460c81c610296565b506000610296565b610e8c8264656e756d7360d81b60c88460c001516001811115610de057fe5b60ff1660001b901b60d08560a001516001811115610dfa57fe5b60ff1660001b901b60d886608001516008811115610e1457fe5b60ff1660001b901b60e087606001516005811115610e2e57fe5b60ff1660001b901b60e88860400151600c811115610e4857fe5b60ff1660001b901b60f089602001516001811115610e6257fe5b60ff1660001b901b60f88a600001516012811115610e7c57fe5b60ff16901b17171717171761138d565b610eb6826763757272656e637960c01b60608460e001516001600160a01b0316901b60001b61138d565b610eeb8271736574746c656d656e7443757272656e637960701b60608461010001516001600160a01b0316901b60001b61138d565b610f11826f636f6e74726163744465616c4461746560801b83610120015160001b61138d565b610f3182697374617475734461746560b01b83610140015160001b61138d565b610f50826869737375654461746560b81b83610160015160001b61138d565b610f72826b70757263686173654461746560a01b83610180015160001b61138d565b610fa1827818de58db19505b98da1bdc91185d1953d9911a5d9a59195b99603a1b836101a0015160001b61138d565b610fc3826b6e6f6d696e616c507269636560a01b836101c0015160001b61138d565b610fea82701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836101e0015160001b61138d565b61100a82696973737565507269636560b01b83610200015160001b61138d565b61102882677175616e7469747960c01b83610220015160001b61138d565b61105182727072696365417450757263686173654461746560681b83610240015160001b61138d565b611076826e726564656d7074696f6e507269636560881b83610260015160001b61138d565b6110de8273191a5d9a59195b99149958dbdc9914195c9a5bd960621b6008846102800151604001516110a95760006110ac565b60015b60ff1660001b901b60108561028001516020015160058111156110cb57fe5b6102808701515160181b911b171761138d565b6111478274191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b6008846102a0015160400151611112576000611115565b60015b60ff1660001b901b6010856102a0015160200151600581111561113457fe5b6102a08701515160181b911b171761138d565b6111b082741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b6008846102c001516040015161117b57600061117e565b60015b60ff1660001b901b6010856102c0015160200151600581111561119d57fe5b6102c08701515160181b911b171761138d565b61121a82751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6008846102e00151604001516111e55760006111e8565b60015b60ff1660001b901b6010856102e0015160200151600581111561120757fe5b6102e08701515160181b911b171761138d565b61128582761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b600884610300015160400151611250576000611253565b60015b60ff1660001b901b601085610300015160200151600581111561127257fe5b6103008701515160181b911b171761138d565b611301826e18de58db1953d9911a5d9a59195b99608a1b836103200151606001516112b15760006112b4565b60015b60ff1660001b60088561032001516040015160018111156112d157fe5b60001b901b60108661032001516020015160058111156112ed57fe5b6103208801515160181b911b17171761138d565b5050565b60006763757272656e637960c01b82141561134057506763757272656e637960c01b6000908152600e8301602052604090205460601c610296565b71736574746c656d656e7443757272656e637960701b821415610db9575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c610296565b6000828152600e840160205260409020548114156113aa576113be565b6000828152600e8401602052604090208190555b505050565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290565b604080516103408101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016114a06114e6565b81526020016114ad6114e6565b81526020016114ba6114e6565b81526020016114c76114e6565b81526020016114d46114e6565b81526020016114e16113c3565b905290565b6040805160608101909152600080825260208201906113e0565b80356001600160a01b0381168114610aaa57600080fd5b80358015158114610aaa57600080fd5b803560098110610aaa57600080fd5b8035610aaa81611b20565b8035600d8110610aaa57600080fd5b803560138110610aaa57600080fd5b8035610aaa81611b2d565b60006080828403121561157b578081fd5b6040516080810181811067ffffffffffffffff8211171561159857fe5b6040528235815290508060208301356115b081611b2d565b602082015260408301356115c381611b20565b60408201526115d460608401611517565b60608201525092915050565b6000606082840312156115f1578081fd5b6040516060810181811067ffffffffffffffff8211171561160e57fe5b60405282358152905080602083013561162681611b2d565b602082015261163760408401611517565b60408201525092915050565b600060208284031215611654578081fd5b5035919050565b6000806040838503121561166d578081fd5b50508035926020909101359150565b600080828403610500811215611690578283fd5b833592506104e0601f19820112156116a6578182fd5b506116b2610340611ae5565b6116be60208501611550565b81526116cc60408501611536565b60208201526116dd60608501611541565b60408201526116ee6080850161155f565b60608201526116ff60a08501611527565b608082015261171060c08501611536565b60a082015261172160e08501611536565b60c0820152610100611734818601611500565b60e0830152610120611747818701611500565b828401526101409150818601358184015250610160808601358284015261018091508186013581840152506101a080860135828401526101c091508186013581840152506101e08086013582840152610200915081860135818401525061022080860135828401526102409150818601358184015250610260808601358284015261028091508186013581840152506102a06117e5878288016115e0565b8284015261030091506117fa878388016115e0565b9083015261180c8661036087016115e0565b6102c0830152611820866103c087016115e0565b6102e08301526118348661042087016115e0565b9082015261184685610480860161156a565b610320820152809150509250929050565b6001600160a01b03169052565b6009811061186e57fe5b9052565b61186e81611b09565b600d811061186e57fe5b6013811061186e57fe5b61186e81611b16565b8051825260208101516118aa81611b16565b602083015260408101516118bd81611b09565b60408301526060908101511515910152565b8051825260208101516118e181611b16565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b608081016102968284611898565b6060810161029682846118cf565b60006104e082019050611940828451611885565b60208301516119526020840182611872565b506040830151611965604084018261187b565b506060830151611978606084018261188f565b50608083015161198b6080840182611864565b5060a083015161199e60a0840182611872565b5060c08301516119b160c0840182611872565b5060e08301516119c460e0840182611857565b50610100808401516119d882850182611857565b505061012083810151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151611a66828501826118cf565b50506102a08301516102e0611a7d818501836118cf565b6102c08501519150611a936103408501836118cf565b8401519050611aa66103a08401826118cf565b50610300830151611abb6104008401826118cf565b50610320830151611ad0610460840182611898565b5092915050565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715611b0157fe5b604052919050565b60028110611b1357fe5b50565b60068110611b1357fe5b60028110611b1357600080fd5b60068110611b1357600080fdfea26469706673582212209836478c3e0356b199f6dde62cea2d63332ce552df1798c790bfe7021fd4065c64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decodeAndGetSTKTerms(Asset storage)": {
        "details": "Decode and loads STKTerms"
      },
      "encodeAndSetSTKTerms(Asset storage,STKTerms)": {
        "details": "Tightly pack and store only non-zero overwritten terms (LifecycleTerms)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "encodeAndSetSTKTerms(Asset storage,STKTerms)": {
        "notice": "All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}