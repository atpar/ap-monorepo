{
  "address": "0xddD85573708fc2Df377e1c89EaDad95D1d4F8504",
  "abi": [],
  "transactionHash": "0xfb91039d400cf7a6969041be841a3e6c00aa14132f45f47408c17f58eb2e8078",
  "receipt": {
    "to": null,
    "from": "0x6C51ECF949882c2183357B860FD82Dd4bb631840",
    "contractAddress": "0xddD85573708fc2Df377e1c89EaDad95D1d4F8504",
    "transactionIndex": 0,
    "gasUsed": "2111273",
    "logsBloom": "0x
    "blockHash": "0x0b8cae3083df7638134e5be2be39f607444d206d06252314d0306245d59276ed",
    "transactionHash": "0xfb91039d400cf7a6969041be841a3e6c00aa14132f45f47408c17f58eb2e8078",
    "logs": [],
    "blockNumber": 64,
    "cumulativeGasUsed": "2111273",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3e43ceeb5da11f8668c639d97933f6e4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decodeAndGetPAMTerms(Asset storage)\":{\"details\":\"Decode and loads PAMTerms\"},\"encodeAndSetPAMTerms(Asset storage,PAMTerms)\":{\"details\":\"Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encodeAndSetPAMTerms(Asset storage,PAMTerms)\":{\"notice\":\"All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/PAM/PAMEncoder.sol\":\"PAMEncoder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\nenum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct State {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    PenaltyType penaltyType;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    int256 penaltyRate;\\n    int256 delinquencyRate;\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 delinquencyRate;\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionExercisePeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    PenaltyType penaltyType;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    int256 penaltyRate;\\n    int256 delinquencyRate;\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    // int256 priceAtTerminationDate; // not implemented\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\",\"keccak256\":\"0x58c525726b2ec1ce52cb6beeb7c2aa7b90d2df28cbfb31a198e3be979fbd9858\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistryStorage.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"./State/StateEncoder.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\nstruct Settlement {\\n    bool isSettled;\\n    int256 payoff;\\n}\\n\\nstruct Asset {\\n    // boolean indicating that asset exists / is registered\\n    bool isSet;\\n    // address of the ACTUS Engine used for computing the State and the Payoff of the asset\\n    address engine;\\n    // address of the Asset Actor which is allowed to update the State of the asset\\n    address actor;\\n    // schedule of the asset\\n    Schedule schedule;\\n    // ownership of the asset\\n    AssetOwnership ownership;\\n    // granular ownership of the event type specific cashflows\\n    // per default owners are beneficiaries defined in ownership object\\n    // cashflow id (:= (EventType index + 1) * direction) => owner\\n    mapping (int8 => address) cashflowBeneficiaries;\\n    // method level access control - stores which address can a specific method\\n    // method signature => address => has access\\n    mapping (bytes4 => mapping (address => bool)) access;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedTerms;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedState;\\n    // indicates whether a specific event was settled\\n    mapping (bytes32 => Settlement) settlement;\\n}\\n\\n/**\\n * @title BaseRegistryStorage\\n * @notice Describes the storage of the AssetRegistry\\n * Contains getter and setter methods for encoding, decoding data to optimize gas cost.\\n * Circumvents storing default values by relying on the characteristic of mappings returning zero for not set values.\\n */\\nabstract contract BaseRegistryStorage {\\n\\n    using StateEncoder for Asset;\\n    using ScheduleEncoder for Asset;\\n\\n    // AssetId => Asset\\n    mapping (bytes32 => Asset) internal assets;\\n}\\n\",\"keccak256\":\"0xea52d9bb20a7b52f75fd27419e08201539bb402a9ce8a6da1ba5a2a585eedb87\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary ScheduleEncoder {\\n\\n    function encodeAndSetSchedule(Asset storage asset, bytes32[] memory schedule) internal {\\n        for (uint256 i = 0; i < schedule.length; i++) {\\n            if (schedule[i] == bytes32(0)) break;\\n            asset.schedule.events[i] = schedule[i];\\n            asset.schedule.length = i + 1;\\n        }\\n    }\\n\\n    function decodeAndGetSchedule(Asset storage asset) internal view returns (bytes32[] memory) {\\n        bytes32[] memory schedule = new bytes32[](asset.schedule.length);\\n\\n        for (uint256 i = 0; i < asset.schedule.length; i++) {\\n            schedule[i] = asset.schedule.events[i];\\n        }\\n\\n        return schedule;\\n    }\\n}\\n\",\"keccak256\":\"0x420da04c67322d387c9b0fbeb00accc59a63fb9c10cb7b4c21f955792c4ad236\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/State/StateEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary StateEncoder {\\n\\n    function storeInPackedState(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedState[attributeKey] == value) return;\\n        asset.packedState[attributeKey] = value;\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store State\\n     */\\n    function encodeAndSetState(Asset storage asset, State memory state) internal {\\n        storeInPackedState(asset, \\\"contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n\\n        storeInPackedState(asset, \\\"notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n        storeInPackedState(asset, \\\"exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store finalized State\\n     */\\n    function encodeAndSetFinalizedState(Asset storage asset, State memory state) internal {\\n        storeInPackedState(asset, \\\"F_contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"F_statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"F_nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"F_maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"F_exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"F_terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"F_lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"F_lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n\\n        storeInPackedState(asset, \\\"F_notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"F_accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"F_feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"F_nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"F_interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n        storeInPackedState(asset, \\\"F_exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"F_quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"F_couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"F_marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"F_adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"F_dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"F_splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Decode and load the State of the asset\\n     */\\n    function decodeAndGetState(Asset storage asset) internal view returns (State memory) {\\n        return State(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"statusDate\\\"]),\\n            uint256(asset.packedState[\\\"nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"lastCouponFixingDate\\\"]),\\n            uint256(asset.packedState[\\\"lastDividendFixingDate\\\"]),\\n\\n            int256(asset.packedState[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"nextPrincipalRedemptionPayment\\\"]),\\n            int256(asset.packedState[\\\"exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"exerciseQuantity\\\"]),\\n\\n            int256(asset.packedState[\\\"quantity\\\"]),\\n            int256(asset.packedState[\\\"couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"marginFactor\\\"]),\\n            int256(asset.packedState[\\\"adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"splitRatio\\\"])\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and load the finalized State of the asset\\n     */\\n    function decodeAndGetFinalizedState(Asset storage asset) internal view returns (State memory) {\\n        return State(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"F_statusDate\\\"]),\\n            uint256(asset.packedState[\\\"F_nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"F_exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"F_terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastCouponFixingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastDividendFixingDate\\\"]),\\n\\n            int256(asset.packedState[\\\"F_notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"F_accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"F_feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"F_nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"F_interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_nextPrincipalRedemptionPayment\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseQuantity\\\"]),\\n\\n            int256(asset.packedState[\\\"F_quantity\\\"]),\\n            int256(asset.packedState[\\\"F_couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"F_marginFactor\\\"]),\\n            int256(asset.packedState[\\\"F_adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"F_dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"F_splitRatio\\\"])\\n        );\\n    }\\n\\n\\n    function decodeAndGetEnumValueForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"F_contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetUIntValueForForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedState[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedState[attributeKey]);\\n    }\\n}\\n\",\"keccak256\":\"0x8ea00bd6be196c2c740901169da39a8a9224d4b3c8655408d4beb9dc6d20dc6f\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"},\"contracts/Core/PAM/PAMEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary PAMEncoder {\\n\\n    function storeInPackedTerms(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedTerms[attributeKey] == value) return;\\n        asset.packedTerms[attributeKey] = value;\\n    }\\n    \\n    /**\\n     * @dev Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\\n     * @notice All non zero values of the overwrittenTerms object are stored.\\n     * It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\\n     */\\n    function encodeAndSetPAMTerms(Asset storage asset, PAMTerms memory terms) external {\\n        storeInPackedTerms(\\n            asset,\\n            \\\"enums\\\",\\n            bytes32(uint256(uint8(terms.contractType))) << 248 |\\n            bytes32(uint256(uint8(terms.calendar))) << 240 |\\n            bytes32(uint256(uint8(terms.contractRole))) << 232 |\\n            bytes32(uint256(uint8(terms.dayCountConvention))) << 224 |\\n            bytes32(uint256(uint8(terms.businessDayConvention))) << 216 |\\n            bytes32(uint256(uint8(terms.endOfMonthConvention))) << 208 |\\n            bytes32(uint256(uint8(terms.scalingEffect))) << 200 |\\n            bytes32(uint256(uint8(terms.penaltyType))) << 192 |\\n            bytes32(uint256(uint8(terms.feeBasis))) << 184\\n        );\\n\\n        storeInPackedTerms(asset, \\\"currency\\\", bytes32(uint256(terms.currency) << 96));\\n        storeInPackedTerms(asset, \\\"settlementCurrency\\\", bytes32(uint256(terms.settlementCurrency) << 96));\\n\\n        storeInPackedTerms(asset, \\\"marketObjectCodeRateReset\\\", bytes32(terms.marketObjectCodeRateReset));\\n\\n        storeInPackedTerms(asset, \\\"contractDealDate\\\", bytes32(terms.contractDealDate));\\n        storeInPackedTerms(asset, \\\"statusDate\\\", bytes32(terms.statusDate));\\n        storeInPackedTerms(asset, \\\"initialExchangeDate\\\", bytes32(terms.initialExchangeDate));\\n        storeInPackedTerms(asset, \\\"maturityDate\\\", bytes32(terms.maturityDate));\\n        storeInPackedTerms(asset, \\\"purchaseDate\\\", bytes32(terms.purchaseDate));\\n        storeInPackedTerms(asset, \\\"capitalizationEndDate\\\", bytes32(terms.capitalizationEndDate));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfInterestPayment\\\", bytes32(terms.cycleAnchorDateOfInterestPayment));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfRateReset\\\", bytes32(terms.cycleAnchorDateOfRateReset));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfScalingIndex\\\", bytes32(terms.cycleAnchorDateOfScalingIndex));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfFee\\\", bytes32(terms.cycleAnchorDateOfFee));\\n\\n        storeInPackedTerms(asset, \\\"notionalPrincipal\\\", bytes32(terms.notionalPrincipal));\\n        storeInPackedTerms(asset, \\\"nominalInterestRate\\\", bytes32(terms.nominalInterestRate));\\n        storeInPackedTerms(asset, \\\"accruedInterest\\\", bytes32(terms.accruedInterest));\\n        storeInPackedTerms(asset, \\\"rateMultiplier\\\", bytes32(terms.rateMultiplier));\\n        storeInPackedTerms(asset, \\\"rateSpread\\\", bytes32(terms.rateSpread));\\n        storeInPackedTerms(asset, \\\"nextResetRate\\\", bytes32(terms.nextResetRate));\\n        storeInPackedTerms(asset, \\\"feeRate\\\", bytes32(terms.feeRate));\\n        storeInPackedTerms(asset, \\\"feeAccrued\\\", bytes32(terms.feeAccrued));\\n        storeInPackedTerms(asset, \\\"penaltyRate\\\", bytes32(terms.penaltyRate));\\n        storeInPackedTerms(asset, \\\"delinquencyRate\\\", bytes32(terms.delinquencyRate));\\n        storeInPackedTerms(asset, \\\"premiumDiscountAtIED\\\", bytes32(terms.premiumDiscountAtIED));\\n        storeInPackedTerms(asset, \\\"priceAtPurchaseDate\\\", bytes32(terms.priceAtPurchaseDate));\\n        storeInPackedTerms(asset, \\\"lifeCap\\\", bytes32(terms.lifeCap));\\n        storeInPackedTerms(asset, \\\"lifeFloor\\\", bytes32(terms.lifeFloor));\\n        storeInPackedTerms(asset, \\\"periodCap\\\", bytes32(terms.periodCap));\\n        storeInPackedTerms(asset, \\\"periodFloor\\\", bytes32(terms.periodFloor));\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"gracePeriod\\\",\\n            bytes32(uint256(terms.gracePeriod.i)) << 24 |\\n            bytes32(uint256(terms.gracePeriod.p)) << 16 |\\n            bytes32(uint256((terms.gracePeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"delinquencyPeriod\\\",\\n            bytes32(uint256(terms.delinquencyPeriod.i)) << 24 |\\n            bytes32(uint256(terms.delinquencyPeriod.p)) << 16 |\\n            bytes32(uint256((terms.delinquencyPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfInterestPayment\\\",\\n            bytes32(uint256(terms.cycleOfInterestPayment.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfInterestPayment.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfInterestPayment.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfInterestPayment.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfRateReset\\\",\\n            bytes32(uint256(terms.cycleOfRateReset.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfRateReset.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfRateReset.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfRateReset.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfScalingIndex\\\",\\n            bytes32(uint256(terms.cycleOfScalingIndex.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfScalingIndex.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfScalingIndex.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfScalingIndex.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfFee\\\",\\n            bytes32(uint256(terms.cycleOfFee.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfFee.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfFee.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfFee.isSet) ? 1 : 0))\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and loads PAMTerms\\n     */\\n    function decodeAndGetPAMTerms(Asset storage asset) external view returns (PAMTerms memory) {\\n        return PAMTerms(\\n            ContractType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248))),\\n            Calendar(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240))),\\n            ContractRole(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232))),\\n            DayCountConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224))),\\n            BusinessDayConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216))),\\n            EndOfMonthConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208))),\\n            ScalingEffect(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200))),\\n            PenaltyType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 192))),\\n            FeeBasis(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 184))),\\n\\n            address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96)),\\n            address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96)),\\n\\n            asset.packedTerms[\\\"marketObjectCodeRateReset\\\"],\\n\\n            uint256(asset.packedTerms[\\\"contractDealDate\\\"]),\\n            uint256(asset.packedTerms[\\\"statusDate\\\"]),\\n            uint256(asset.packedTerms[\\\"initialExchangeDate\\\"]),\\n            uint256(asset.packedTerms[\\\"maturityDate\\\"]),\\n            uint256(asset.packedTerms[\\\"purchaseDate\\\"]),\\n            uint256(asset.packedTerms[\\\"capitalizationEndDate\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfInterestPayment\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfRateReset\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfScalingIndex\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfFee\\\"]),\\n\\n            int256(asset.packedTerms[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedTerms[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedTerms[\\\"accruedInterest\\\"]),\\n            int256(asset.packedTerms[\\\"rateMultiplier\\\"]),\\n            int256(asset.packedTerms[\\\"rateSpread\\\"]),\\n            int256(asset.packedTerms[\\\"nextResetRate\\\"]),\\n            int256(asset.packedTerms[\\\"feeRate\\\"]),\\n            int256(asset.packedTerms[\\\"feeAccrued\\\"]),\\n            int256(asset.packedTerms[\\\"penaltyRate\\\"]),\\n            int256(asset.packedTerms[\\\"delinquencyRate\\\"]),\\n            int256(asset.packedTerms[\\\"premiumDiscountAtIED\\\"]),\\n            int256(asset.packedTerms[\\\"priceAtPurchaseDate\\\"]),\\n            int256(asset.packedTerms[\\\"lifeCap\\\"]),\\n            int256(asset.packedTerms[\\\"lifeFloor\\\"]),\\n            int256(asset.packedTerms[\\\"periodCap\\\"]),\\n            int256(asset.packedTerms[\\\"periodFloor\\\"]),\\n            \\n            IP(\\n                uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"gracePeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfInterestPayment\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfRateReset\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfRateReset\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfRateReset\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfRateReset\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfScalingIndex\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfScalingIndex\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfScalingIndex\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfScalingIndex\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfFee\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfFee\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfFee\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfFee\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            )\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForPAMAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractType\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"calendar\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240));\\n        } else if (attributeKey == bytes32(\\\"contractRole\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232));\\n        } else if (attributeKey == bytes32(\\\"dayCountConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224));\\n        } else if (attributeKey == bytes32(\\\"businessDayConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216));\\n        } else if (attributeKey == bytes32(\\\"endOfMonthConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208));\\n        } else if (attributeKey == bytes32(\\\"scalingEffect\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200));\\n        } else if (attributeKey == bytes32(\\\"penaltyType\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 192));\\n        } else if (attributeKey == bytes32(\\\"feeBasis\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 184));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetAddressValueForForPAMAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (attributeKey == bytes32(\\\"currency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96));\\n        } else if (attributeKey == bytes32(\\\"settlementCurrency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96));\\n        } else {\\n            return address(0);\\n        }   \\n    }\\n\\n    function decodeAndGetBytes32ValueForForPAMAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return asset.packedTerms[attributeKey];\\n    }\\n\\n    function decodeAndGetUIntValueForForPAMAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForPAMAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetPeriodValueForForPAMAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IP memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"gracePeriod\\\")\\n            || attributeKey == bytes32(\\\"delinquencyPeriod\\\")\\n        ) {\\n            return IP(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                (asset.packedTerms[attributeKey] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IP(0, P(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetCycleValueForForPAMAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IPS memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"cycleOfInterestPayment\\\")\\n            || attributeKey == bytes32(\\\"cycleOfRateReset\\\")\\n            || attributeKey == bytes32(\\\"cycleOfScalingIndex\\\")\\n            || attributeKey == bytes32(\\\"cycleOfFee\\\")\\n        ) {\\n            return IPS(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[attributeKey] >> 8))),\\n                (asset.packedTerms[attributeKey] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IPS(0, P(0), S(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetContractReferenceValueForPAMAttribute(Asset storage /* asset */, bytes32 /* attributeKey */)\\n        external\\n        pure\\n        returns (ContractReference memory)\\n    {\\n        return ContractReference(\\n            bytes32(0),\\n            bytes32(0),\\n            ContractReferenceType(0),\\n            ContractReferenceRole(0)\\n        );\\n    }\\n}\",\"keccak256\":\"0x069deea1e2678915296a4ae10ff1b49a3b827c3e228f6e907295ef769f631902\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x61253d610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c8063a73bb52211610070578063a73bb52214610138578063e810f93314610158578063ed7210f3146100ad578063f21917af14610178578063f3c7c6f614610198576100a8565b8063168bf139146100ad5780631de725f2146100d65780635276dec1146100f65780635406cce4146101185780637aa91976146100ad575b600080fd5b6100c06100bb366004611e0b565b6101b8565b6040516100cd91906121af565b60405180910390f35b6100e96100e4366004611e0b565b6101d0565b6040516100cd91906121f9565b81801561010257600080fd5b50610116610111366004611e2c565b610338565b005b61012b610126366004611e0b565b610b54565b6040516100cd919061219b565b61014b610146366004611e0b565b610be4565b6040516100cd919061249a565b61016b610166366004611e0b565b610dff565b6040516100cd91906121b8565b61018b610186366004611df3565b610e32565b6040516100cd9190612215565b6101ab6101a6366004611e0b565b6119bd565b6040516100cd9190612207565b6000818152600e830160205260409020545b92915050565b6101d8611ac0565b7518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b82148061021157506f18de58db1953d994985d1954995cd95d60821b82145b806102315750720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b82145b806102485750696379636c654f6646656560b01b82145b1561030a57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561028c57fe5b600581111561029757fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff1660018111156102c757fe5b60018111156102d257fe5b81526000848152600e860160209081526040909120549101906001908116146102fc5760006102ff565b60015b1515905290506101ca565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290506101ca565b61043a8264656e756d7360d81b60b8846101000151600181111561035857fe5b60ff1660001b901b60c08560e00151600381111561037257fe5b60ff1660001b901b60c88660c00151600381111561038c57fe5b60ff1660001b901b60d08760a0015160018111156103a657fe5b60ff1660001b901b60d8886080015160088111156103c057fe5b60ff1660001b901b60e0896060015160058111156103da57fe5b60ff1660001b901b60e88a60400151600c8111156103f457fe5b60ff1660001b901b60f08b60200151600181111561040e57fe5b60ff1660001b901b60f88c60000151601281111561042857fe5b60ff16901b1717171717171717611a8a565b610465826763757272656e637960c01b60608461012001516001600160a01b0316901b60001b611a8a565b61049a8271736574746c656d656e7443757272656e637960701b60608461014001516001600160a01b0316901b60001b611a8a565b6104c682781b585c9ad95d13d89a9958dd10dbd91954985d1954995cd95d603a1b836101600151611a8a565b6104ec826f636f6e74726163744465616c4461746560801b83610180015160001b611a8a565b61050c82697374617475734461746560b01b836101a0015160001b611a8a565b6105358272696e697469616c45786368616e67654461746560681b836101c0015160001b611a8a565b610557826b6d617475726974794461746560a01b836101e0015160001b611a8a565b610579826b70757263686173654461746560a01b83610200015160001b611a8a565b6105a482746361706974616c697a6174696f6e456e644461746560581b83610220015160001b611a8a565b6105d7827f6379636c65416e63686f72446174654f66496e7465726573745061796d656e7483610240015160001b611a8a565b61060a827f6379636c65416e63686f72446174654f6652617465526573657400000000000083610260015160001b611a8a565b61063d827f6379636c65416e63686f72446174654f665363616c696e67496e64657800000083610280015160001b611a8a565b61066782736379636c65416e63686f72446174654f6646656560601b836102a0015160001b611a8a565b61068e82701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836102c0015160001b611a8a565b6106b782726e6f6d696e616c496e7465726573745261746560681b836102e0015160001b611a8a565b6106dc826e1858d8dc9d5959125b9d195c995cdd608a1b83610300015160001b611a8a565b610700826d3930ba32a6bab63a34b83634b2b960911b83610320015160001b611a8a565b61072082691c985d1954dc1c99585960b21b83610340015160001b611a8a565b610743826c6e65787452657365745261746560981b83610360015160001b611a8a565b61076082666665655261746560c81b83610380015160001b611a8a565b61078082691999595058d8dc9d595960b21b836103a0015160001b611a8a565b6107a1826a70656e616c74795261746560a81b836103c0015160001b611a8a565b6107c6826e64656c696e7175656e63795261746560881b836103e0015160001b611a8a565b6107f082731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b83610400015160001b611a8a565b61081982727072696365417450757263686173654461746560681b83610420015160001b611a8a565b610836826606c6966654361760cc1b83610440015160001b611a8a565b61085582683634b332a33637b7b960b91b83610460015160001b611a8a565b61087482680706572696f644361760bc1b83610480015160001b611a8a565b610895826a3832b934b7b2233637b7b960a91b836104a0015160001b611a8a565b6108f4826a19dc9858d954195c9a5bd960aa1b6008846104c00151604001516108bf5760006108c2565b60015b60ff1660001b901b6010856104c001516020015160058111156108e157fe5b6104c08701515160181b911b1717611a8a565b610959827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846104e0015160400151610924576000610927565b60015b60ff1660001b901b6010856104e0015160200151600581111561094657fe5b6104e08701515160181b911b1717611a8a565b6109dc827518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b8361050001516060015161098c57600061098f565b60015b60ff1660001b60088561050001516040015160018111156109ac57fe5b60001b901b60108661050001516020015160058111156109c857fe5b6105008801515160181b911b171717611a8a565b610a59826f18de58db1953d994985d1954995cd95d60821b83610520015160600151610a09576000610a0c565b60015b60ff1660001b6008856105200151604001516001811115610a2957fe5b60001b901b6010866105200151602001516005811115610a4557fe5b6105208801515160181b911b171717611a8a565b610ad982720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b83610540015160600151610a89576000610a8c565b60015b60ff1660001b6008856105400151604001516001811115610aa957fe5b60001b901b6010866105400151602001516005811115610ac557fe5b6105408801515160181b911b171717611a8a565b610b5082696379636c654f6646656560b01b83610560015160600151610b00576000610b03565b60015b60ff1660001b6008856105600151604001516001811115610b2057fe5b60001b901b6010866105600151602001516005811115610b3c57fe5b6105608801515160181b911b171717611a8a565b5050565b60006763757272656e637960c01b821415610b8f57506763757272656e637960c01b6000908152600e8301602052604090205460601c6101ca565b71736574746c656d656e7443757272656e637960701b821415610bdc575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6101ca565b5060006101ca565b60006b636f6e74726163745479706560a01b821415610c20575064656e756d7360d81b6000908152600e8301602052604090205460f81c6101ca565b6731b0b632b73230b960c11b821415610c56575064656e756d7360d81b6000908152600e8301602052604090205460f01c6101ca565b6b636f6e7472616374526f6c6560a01b821415610c90575064656e756d7360d81b6000908152600e8301602052604090205460e81c6101ca565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b821415610cd0575064656e756d7360d81b6000908152600e8301602052604090205460e01c6101ca565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415610d13575064656e756d7360d81b6000908152600e8301602052604090205460d81c6101ca565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415610d55575064656e756d7360d81b6000908152600e8301602052604090205460d01c6101ca565b6c1cd8d85b1a5b99d159999958dd609a1b821415610d90575064656e756d7360d81b6000908152600e8301602052604090205460c81c6101ca565b6a70656e616c74795479706560a81b821415610dc9575064656e756d7360d81b6000908152600e8301602052604090205460c01c6101ca565b67666565426173697360c01b821415610bdc575064656e756d7360d81b6000908152600e8301602052604090205460b81c6101ca565b610e07611aea565b6040805160808101825260008082526020820181905290918201908152602001600090529392505050565b610e3a611b12565b604080516105808101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c6012811115610e6f57fe5b6012811115610e7a57fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610eb257fe5b6001811115610ebd57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c811115610ef557fe5b600c811115610f0057fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166005811115610f3857fe5b6005811115610f4357fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166008811115610f7b57fe5b6008811115610f8657fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610fbe57fe5b6001811115610fc957fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600381111561100157fe5b600381111561100c57fe5b815260200160c084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600381111561104457fe5b600381111561104f57fe5b815260200160b884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561108757fe5b600181111561109257fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c82870152781b585c9ad95d13d89a9958dd10dbd91954985d1954995cd95d603a1b855283835281852054818701526f636f6e74726163744465616c4461746560801b8552838352818520546080870152697374617475734461746560b01b85528383528185205460a087015272696e697469616c45786368616e67654461746560681b85528383528185205460c08701526b6d617475726974794461746560a01b85528383528185205460e08701526b70757263686173654461746560a01b855283835281852054610100870152746361706974616c697a6174696f6e456e644461746560581b8552838352818520546101208701527f6379636c65416e63686f72446174654f66496e7465726573745061796d656e748552838352818520546101408701527f6379636c65416e63686f72446174654f665261746552657365740000000000008552838352818520546101608701527f6379636c65416e63686f72446174654f665363616c696e67496e646578000000855283835281852054610180870152736379636c65416e63686f72446174654f6646656560601b8552838352818520546101a0870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8552838352818520546101c0870152726e6f6d696e616c496e7465726573745261746560681b8552838352818520546101e08701526e1858d8dc9d5959125b9d195c995cdd608a1b8552838352818520546102008701526d3930ba32a6bab63a34b83634b2b960911b855283835281852054610220870152691c985d1954dc1c99585960b21b8552838352818520546102408701526c6e65787452657365745261746560981b855283835281852054610260870152666665655261746560c81b855283835281852054610280870152691999595058d8dc9d595960b21b8552838352818520546102a08701526a70656e616c74795261746560a81b8552838352818520546102c08701526e64656c696e7175656e63795261746560881b8552838352818520546102e0870152731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b855283835281852054610300870152727072696365417450757263686173654461746560681b8552838352818520546103208701526606c6966654361760cc1b855283835281852054610340870152683634b332a33637b7b960b91b855283835281852054610360870152680706572696f644361760bc1b8552838352818520546103808701526a3832b934b7b2233637b7b960a91b8552838352818520546103a0870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526103c09093019282019060101c60ff1660058111156114d257fe5b60058111156114dd57fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c60019081161461151957600061151c565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561157a57fe5b600581111561158557fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c6001908116146115c75760006115ca565b60015b151590528152604080516080810182527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561162d57fe5b600581111561163857fe5b8152602001600886600e0160007518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b815260200190815260200160002054901c60001c60ff16600181111561168157fe5b600181111561168c57fe5b81527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000908152600e870160209081526040909120549101906001908116146116d05760006116d3565b60015b151590528152604080516080810182526f18de58db1953d994985d1954995cd95d60821b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561173057fe5b600581111561173b57fe5b8152602001600886600e0160006f18de58db1953d994985d1954995cd95d60821b815260200190815260200160002054901c60001c60ff16600181111561177e57fe5b600181111561178957fe5b81526f18de58db1953d994985d1954995cd95d60821b6000908152600e870160209081526040909120549101906001908116146117c75760006117ca565b60015b15159052815260408051608081018252720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561182a57fe5b600581111561183557fe5b8152602001600886600e016000720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b815260200190815260200160002054901c60001c60ff16600181111561187b57fe5b600181111561188657fe5b8152720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b6000908152600e870160209081526040909120549101906001908116146118c75760006118ca565b60015b15159052815260408051608081018252696379636c654f6646656560b01b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561192157fe5b600581111561192c57fe5b8152602001600886600e016000696379636c654f6646656560b01b815260200190815260200160002054901c60001c60ff16600181111561196957fe5b600181111561197457fe5b8152696379636c654f6646656560b01b6000908152600e870160209081526040909120549101906001908116146119ac5760006119af565b60015b15159052905290505b919050565b6119c5611c87565b6a19dc9858d954195c9a5bd960aa1b8214806119f457507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b15611a7057604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff166005811115611a3857fe5b6005811115611a4357fe5b81526000848152600e8601602090815260409091205491019060081c6001908116146102fc5760006102ff565b604080516060810190915260008082526020820190610327565b6000828152600e84016020526040902054811415611aa757611abb565b6000828152600e8401602052604090208190555b505050565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290565b604080516080810182526000808252602082018190529091820190815260200160005b905290565b6040805161058081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611c46611c87565b8152602001611c53611c87565b8152602001611c60611ac0565b8152602001611c6d611ac0565b8152602001611c7a611ac0565b8152602001611b0d611ac0565b604080516060810190915260008082526020820190611add565b80356001600160a01b03811681146119b857600080fd5b803580151581146119b857600080fd5b8035600981106119b857600080fd5b80356119b8816124ed565b8035600d81106119b857600080fd5b8035601381106119b857600080fd5b80356119b8816124fa565b8035600481106119b857600080fd5b600060808284031215611d2b578081fd5b6040516080810181811067ffffffffffffffff82111715611d4857fe5b604052823581529050806020830135611d60816124fa565b60208201526040830135611d73816124ed565b6040820152611d8460608401611cb8565b60608201525092915050565b600060608284031215611da1578081fd5b6040516060810181811067ffffffffffffffff82111715611dbe57fe5b604052823581529050806020830135611dd6816124fa565b6020820152611de760408401611cb8565b60408201525092915050565b600060208284031215611e04578081fd5b5035919050565b60008060408385031215611e1d578081fd5b50508035926020909101359150565b6000808284036107a0811215611e40578283fd5b83359250610780601f1982011215611e56578182fd5b50611e626105806124a8565b611e6e60208501611cf1565b8152611e7c60408501611cd7565b6020820152611e8d60608501611ce2565b6040820152611e9e60808501611d00565b6060820152611eaf60a08501611cc8565b6080820152611ec060c08501611cd7565b60a0820152611ed160e08501611d0b565b60c0820152610100611ee4818601611d0b565b60e0830152610120611ef7818701611cd7565b828401526101409150611f0b828701611ca1565b90830152610160611f1d868201611ca1565b8284015261018091508186013581840152506101a080860135828401526101c091508186013581840152506101e08086013582840152610200915081860135818401525061022080860135828401526102409150818601358184015250610260808601358284015261028091508186013581840152506102a080860135828401526102c091508186013581840152506102e08086013582840152610300915081860135818401525061032080860135828401526103409150818601358184015250610360808601358284015261038091508186013581840152506103a080860135828401526103c091508186013581840152506103e08086013582840152610400915081860135818401525061042080860135828401526104409150818601358184015250610460808601358284015261048091508186013581840152506104a080860135828401526104c091508186013581840152506104e061208387828801611d90565b82840152610540915061209887838801611d90565b908301526120aa866105a08701611d1a565b6105008301526120be866106208701611d1a565b6105208301526120d2866106a08701611d1a565b908201526120e4856107208601611d1a565b610560820152809150509250929050565b6001600160a01b03169052565b6009811061210c57fe5b9052565b61210c816124cc565b600d811061210c57fe5b6013811061210c57fe5b61210c816124e3565b6004811061210c57fe5b805182526020810151612152816124e3565b60208301526040810151612165816124cc565b60408301526060908101511515910152565b805182526020810151612189816124e3565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b8151815260208083015190820152604082015160808201906121d9816124d9565b604083015260608301516121ec816124d9565b8060608401525092915050565b608081016101ca8284612140565b606081016101ca8284612177565b600061078082019050612229828451612123565b602083015161223b6020840182612110565b50604083015161224e6040840182612119565b506060830151612261606084018261212d565b5060808301516122746080840182612102565b5060a083015161228760a0840182612110565b5060c083015161229a60c0840182612136565b5060e08301516122ad60e0840182612136565b50610100808401516122c182850182612110565b5050610120808401516122d6828501826120f5565b5050610140808401516122eb828501826120f5565b5050610160838101519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151908301526102c080840151908301526102e08084015190830152610300808401519083015261032080840151908301526103408084015190830152610360808401519083015261038080840151908301526103a080840151908301526103c080840151908301526103e08084015190830152610400808401519083015261042080840151908301526104408084015190830152610460808401519083015261048080840151908301526104a080840151908301526104c08084015161242982850182612177565b50506104e083015161052061244081850183612177565b6105008501519150612456610580850183612140565b8401519050612469610600840182612140565b5061054083015161247e610680840182612140565b50610560830151612493610700840182612140565b5092915050565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156124c457fe5b604052919050565b600281106124d657fe5b50565b600581106124d657fe5b600681106124d657fe5b600281106124d657600080fd5b600681106124d657600080fdfea26469706673582212205222175e2dbe243d12a2f7fb9d351d7062446c0b0ed64a0860f8a6ee56a749a964736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c8063a73bb52211610070578063a73bb52214610138578063e810f93314610158578063ed7210f3146100ad578063f21917af14610178578063f3c7c6f614610198576100a8565b8063168bf139146100ad5780631de725f2146100d65780635276dec1146100f65780635406cce4146101185780637aa91976146100ad575b600080fd5b6100c06100bb366004611e0b565b6101b8565b6040516100cd91906121af565b60405180910390f35b6100e96100e4366004611e0b565b6101d0565b6040516100cd91906121f9565b81801561010257600080fd5b50610116610111366004611e2c565b610338565b005b61012b610126366004611e0b565b610b54565b6040516100cd919061219b565b61014b610146366004611e0b565b610be4565b6040516100cd919061249a565b61016b610166366004611e0b565b610dff565b6040516100cd91906121b8565b61018b610186366004611df3565b610e32565b6040516100cd9190612215565b6101ab6101a6366004611e0b565b6119bd565b6040516100cd9190612207565b6000818152600e830160205260409020545b92915050565b6101d8611ac0565b7518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b82148061021157506f18de58db1953d994985d1954995cd95d60821b82145b806102315750720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b82145b806102485750696379636c654f6646656560b01b82145b1561030a57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561028c57fe5b600581111561029757fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff1660018111156102c757fe5b60018111156102d257fe5b81526000848152600e860160209081526040909120549101906001908116146102fc5760006102ff565b60015b1515905290506101ca565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290506101ca565b61043a8264656e756d7360d81b60b8846101000151600181111561035857fe5b60ff1660001b901b60c08560e00151600381111561037257fe5b60ff1660001b901b60c88660c00151600381111561038c57fe5b60ff1660001b901b60d08760a0015160018111156103a657fe5b60ff1660001b901b60d8886080015160088111156103c057fe5b60ff1660001b901b60e0896060015160058111156103da57fe5b60ff1660001b901b60e88a60400151600c8111156103f457fe5b60ff1660001b901b60f08b60200151600181111561040e57fe5b60ff1660001b901b60f88c60000151601281111561042857fe5b60ff16901b1717171717171717611a8a565b610465826763757272656e637960c01b60608461012001516001600160a01b0316901b60001b611a8a565b61049a8271736574746c656d656e7443757272656e637960701b60608461014001516001600160a01b0316901b60001b611a8a565b6104c682781b585c9ad95d13d89a9958dd10dbd91954985d1954995cd95d603a1b836101600151611a8a565b6104ec826f636f6e74726163744465616c4461746560801b83610180015160001b611a8a565b61050c82697374617475734461746560b01b836101a0015160001b611a8a565b6105358272696e697469616c45786368616e67654461746560681b836101c0015160001b611a8a565b610557826b6d617475726974794461746560a01b836101e0015160001b611a8a565b610579826b70757263686173654461746560a01b83610200015160001b611a8a565b6105a482746361706974616c697a6174696f6e456e644461746560581b83610220015160001b611a8a565b6105d7827f6379636c65416e63686f72446174654f66496e7465726573745061796d656e7483610240015160001b611a8a565b61060a827f6379636c65416e63686f72446174654f6652617465526573657400000000000083610260015160001b611a8a565b61063d827f6379636c65416e63686f72446174654f665363616c696e67496e64657800000083610280015160001b611a8a565b61066782736379636c65416e63686f72446174654f6646656560601b836102a0015160001b611a8a565b61068e82701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836102c0015160001b611a8a565b6106b782726e6f6d696e616c496e7465726573745261746560681b836102e0015160001b611a8a565b6106dc826e1858d8dc9d5959125b9d195c995cdd608a1b83610300015160001b611a8a565b610700826d3930ba32a6bab63a34b83634b2b960911b83610320015160001b611a8a565b61072082691c985d1954dc1c99585960b21b83610340015160001b611a8a565b610743826c6e65787452657365745261746560981b83610360015160001b611a8a565b61076082666665655261746560c81b83610380015160001b611a8a565b61078082691999595058d8dc9d595960b21b836103a0015160001b611a8a565b6107a1826a70656e616c74795261746560a81b836103c0015160001b611a8a565b6107c6826e64656c696e7175656e63795261746560881b836103e0015160001b611a8a565b6107f082731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b83610400015160001b611a8a565b61081982727072696365417450757263686173654461746560681b83610420015160001b611a8a565b610836826606c6966654361760cc1b83610440015160001b611a8a565b61085582683634b332a33637b7b960b91b83610460015160001b611a8a565b61087482680706572696f644361760bc1b83610480015160001b611a8a565b610895826a3832b934b7b2233637b7b960a91b836104a0015160001b611a8a565b6108f4826a19dc9858d954195c9a5bd960aa1b6008846104c00151604001516108bf5760006108c2565b60015b60ff1660001b901b6010856104c001516020015160058111156108e157fe5b6104c08701515160181b911b1717611a8a565b610959827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846104e0015160400151610924576000610927565b60015b60ff1660001b901b6010856104e0015160200151600581111561094657fe5b6104e08701515160181b911b1717611a8a565b6109dc827518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b8361050001516060015161098c57600061098f565b60015b60ff1660001b60088561050001516040015160018111156109ac57fe5b60001b901b60108661050001516020015160058111156109c857fe5b6105008801515160181b911b171717611a8a565b610a59826f18de58db1953d994985d1954995cd95d60821b83610520015160600151610a09576000610a0c565b60015b60ff1660001b6008856105200151604001516001811115610a2957fe5b60001b901b6010866105200151602001516005811115610a4557fe5b6105208801515160181b911b171717611a8a565b610ad982720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b83610540015160600151610a89576000610a8c565b60015b60ff1660001b6008856105400151604001516001811115610aa957fe5b60001b901b6010866105400151602001516005811115610ac557fe5b6105408801515160181b911b171717611a8a565b610b5082696379636c654f6646656560b01b83610560015160600151610b00576000610b03565b60015b60ff1660001b6008856105600151604001516001811115610b2057fe5b60001b901b6010866105600151602001516005811115610b3c57fe5b6105608801515160181b911b171717611a8a565b5050565b60006763757272656e637960c01b821415610b8f57506763757272656e637960c01b6000908152600e8301602052604090205460601c6101ca565b71736574746c656d656e7443757272656e637960701b821415610bdc575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6101ca565b5060006101ca565b60006b636f6e74726163745479706560a01b821415610c20575064656e756d7360d81b6000908152600e8301602052604090205460f81c6101ca565b6731b0b632b73230b960c11b821415610c56575064656e756d7360d81b6000908152600e8301602052604090205460f01c6101ca565b6b636f6e7472616374526f6c6560a01b821415610c90575064656e756d7360d81b6000908152600e8301602052604090205460e81c6101ca565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b821415610cd0575064656e756d7360d81b6000908152600e8301602052604090205460e01c6101ca565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415610d13575064656e756d7360d81b6000908152600e8301602052604090205460d81c6101ca565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415610d55575064656e756d7360d81b6000908152600e8301602052604090205460d01c6101ca565b6c1cd8d85b1a5b99d159999958dd609a1b821415610d90575064656e756d7360d81b6000908152600e8301602052604090205460c81c6101ca565b6a70656e616c74795479706560a81b821415610dc9575064656e756d7360d81b6000908152600e8301602052604090205460c01c6101ca565b67666565426173697360c01b821415610bdc575064656e756d7360d81b6000908152600e8301602052604090205460b81c6101ca565b610e07611aea565b6040805160808101825260008082526020820181905290918201908152602001600090529392505050565b610e3a611b12565b604080516105808101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c6012811115610e6f57fe5b6012811115610e7a57fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610eb257fe5b6001811115610ebd57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c811115610ef557fe5b600c811115610f0057fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166005811115610f3857fe5b6005811115610f4357fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166008811115610f7b57fe5b6008811115610f8657fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610fbe57fe5b6001811115610fc957fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600381111561100157fe5b600381111561100c57fe5b815260200160c084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600381111561104457fe5b600381111561104f57fe5b815260200160b884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561108757fe5b600181111561109257fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c82870152781b585c9ad95d13d89a9958dd10dbd91954985d1954995cd95d603a1b855283835281852054818701526f636f6e74726163744465616c4461746560801b8552838352818520546080870152697374617475734461746560b01b85528383528185205460a087015272696e697469616c45786368616e67654461746560681b85528383528185205460c08701526b6d617475726974794461746560a01b85528383528185205460e08701526b70757263686173654461746560a01b855283835281852054610100870152746361706974616c697a6174696f6e456e644461746560581b8552838352818520546101208701527f6379636c65416e63686f72446174654f66496e7465726573745061796d656e748552838352818520546101408701527f6379636c65416e63686f72446174654f665261746552657365740000000000008552838352818520546101608701527f6379636c65416e63686f72446174654f665363616c696e67496e646578000000855283835281852054610180870152736379636c65416e63686f72446174654f6646656560601b8552838352818520546101a0870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8552838352818520546101c0870152726e6f6d696e616c496e7465726573745261746560681b8552838352818520546101e08701526e1858d8dc9d5959125b9d195c995cdd608a1b8552838352818520546102008701526d3930ba32a6bab63a34b83634b2b960911b855283835281852054610220870152691c985d1954dc1c99585960b21b8552838352818520546102408701526c6e65787452657365745261746560981b855283835281852054610260870152666665655261746560c81b855283835281852054610280870152691999595058d8dc9d595960b21b8552838352818520546102a08701526a70656e616c74795261746560a81b8552838352818520546102c08701526e64656c696e7175656e63795261746560881b8552838352818520546102e0870152731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b855283835281852054610300870152727072696365417450757263686173654461746560681b8552838352818520546103208701526606c6966654361760cc1b855283835281852054610340870152683634b332a33637b7b960b91b855283835281852054610360870152680706572696f644361760bc1b8552838352818520546103808701526a3832b934b7b2233637b7b960a91b8552838352818520546103a0870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526103c09093019282019060101c60ff1660058111156114d257fe5b60058111156114dd57fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c60019081161461151957600061151c565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561157a57fe5b600581111561158557fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c6001908116146115c75760006115ca565b60015b151590528152604080516080810182527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561162d57fe5b600581111561163857fe5b8152602001600886600e0160007518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b815260200190815260200160002054901c60001c60ff16600181111561168157fe5b600181111561168c57fe5b81527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000908152600e870160209081526040909120549101906001908116146116d05760006116d3565b60015b151590528152604080516080810182526f18de58db1953d994985d1954995cd95d60821b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561173057fe5b600581111561173b57fe5b8152602001600886600e0160006f18de58db1953d994985d1954995cd95d60821b815260200190815260200160002054901c60001c60ff16600181111561177e57fe5b600181111561178957fe5b81526f18de58db1953d994985d1954995cd95d60821b6000908152600e870160209081526040909120549101906001908116146117c75760006117ca565b60015b15159052815260408051608081018252720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561182a57fe5b600581111561183557fe5b8152602001600886600e016000720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b815260200190815260200160002054901c60001c60ff16600181111561187b57fe5b600181111561188657fe5b8152720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b6000908152600e870160209081526040909120549101906001908116146118c75760006118ca565b60015b15159052815260408051608081018252696379636c654f6646656560b01b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561192157fe5b600581111561192c57fe5b8152602001600886600e016000696379636c654f6646656560b01b815260200190815260200160002054901c60001c60ff16600181111561196957fe5b600181111561197457fe5b8152696379636c654f6646656560b01b6000908152600e870160209081526040909120549101906001908116146119ac5760006119af565b60015b15159052905290505b919050565b6119c5611c87565b6a19dc9858d954195c9a5bd960aa1b8214806119f457507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b15611a7057604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff166005811115611a3857fe5b6005811115611a4357fe5b81526000848152600e8601602090815260409091205491019060081c6001908116146102fc5760006102ff565b604080516060810190915260008082526020820190610327565b6000828152600e84016020526040902054811415611aa757611abb565b6000828152600e8401602052604090208190555b505050565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290565b604080516080810182526000808252602082018190529091820190815260200160005b905290565b6040805161058081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611c46611c87565b8152602001611c53611c87565b8152602001611c60611ac0565b8152602001611c6d611ac0565b8152602001611c7a611ac0565b8152602001611b0d611ac0565b604080516060810190915260008082526020820190611add565b80356001600160a01b03811681146119b857600080fd5b803580151581146119b857600080fd5b8035600981106119b857600080fd5b80356119b8816124ed565b8035600d81106119b857600080fd5b8035601381106119b857600080fd5b80356119b8816124fa565b8035600481106119b857600080fd5b600060808284031215611d2b578081fd5b6040516080810181811067ffffffffffffffff82111715611d4857fe5b604052823581529050806020830135611d60816124fa565b60208201526040830135611d73816124ed565b6040820152611d8460608401611cb8565b60608201525092915050565b600060608284031215611da1578081fd5b6040516060810181811067ffffffffffffffff82111715611dbe57fe5b604052823581529050806020830135611dd6816124fa565b6020820152611de760408401611cb8565b60408201525092915050565b600060208284031215611e04578081fd5b5035919050565b60008060408385031215611e1d578081fd5b50508035926020909101359150565b6000808284036107a0811215611e40578283fd5b83359250610780601f1982011215611e56578182fd5b50611e626105806124a8565b611e6e60208501611cf1565b8152611e7c60408501611cd7565b6020820152611e8d60608501611ce2565b6040820152611e9e60808501611d00565b6060820152611eaf60a08501611cc8565b6080820152611ec060c08501611cd7565b60a0820152611ed160e08501611d0b565b60c0820152610100611ee4818601611d0b565b60e0830152610120611ef7818701611cd7565b828401526101409150611f0b828701611ca1565b90830152610160611f1d868201611ca1565b8284015261018091508186013581840152506101a080860135828401526101c091508186013581840152506101e08086013582840152610200915081860135818401525061022080860135828401526102409150818601358184015250610260808601358284015261028091508186013581840152506102a080860135828401526102c091508186013581840152506102e08086013582840152610300915081860135818401525061032080860135828401526103409150818601358184015250610360808601358284015261038091508186013581840152506103a080860135828401526103c091508186013581840152506103e08086013582840152610400915081860135818401525061042080860135828401526104409150818601358184015250610460808601358284015261048091508186013581840152506104a080860135828401526104c091508186013581840152506104e061208387828801611d90565b82840152610540915061209887838801611d90565b908301526120aa866105a08701611d1a565b6105008301526120be866106208701611d1a565b6105208301526120d2866106a08701611d1a565b908201526120e4856107208601611d1a565b610560820152809150509250929050565b6001600160a01b03169052565b6009811061210c57fe5b9052565b61210c816124cc565b600d811061210c57fe5b6013811061210c57fe5b61210c816124e3565b6004811061210c57fe5b805182526020810151612152816124e3565b60208301526040810151612165816124cc565b60408301526060908101511515910152565b805182526020810151612189816124e3565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b8151815260208083015190820152604082015160808201906121d9816124d9565b604083015260608301516121ec816124d9565b8060608401525092915050565b608081016101ca8284612140565b606081016101ca8284612177565b600061078082019050612229828451612123565b602083015161223b6020840182612110565b50604083015161224e6040840182612119565b506060830151612261606084018261212d565b5060808301516122746080840182612102565b5060a083015161228760a0840182612110565b5060c083015161229a60c0840182612136565b5060e08301516122ad60e0840182612136565b50610100808401516122c182850182612110565b5050610120808401516122d6828501826120f5565b5050610140808401516122eb828501826120f5565b5050610160838101519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151908301526102c080840151908301526102e08084015190830152610300808401519083015261032080840151908301526103408084015190830152610360808401519083015261038080840151908301526103a080840151908301526103c080840151908301526103e08084015190830152610400808401519083015261042080840151908301526104408084015190830152610460808401519083015261048080840151908301526104a080840151908301526104c08084015161242982850182612177565b50506104e083015161052061244081850183612177565b6105008501519150612456610580850183612140565b8401519050612469610600840182612140565b5061054083015161247e610680840182612140565b50610560830151612493610700840182612140565b5092915050565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156124c457fe5b604052919050565b600281106124d657fe5b50565b600581106124d657fe5b600681106124d657fe5b600281106124d657600080fd5b600681106124d657600080fdfea26469706673582212205222175e2dbe243d12a2f7fb9d351d7062446c0b0ed64a0860f8a6ee56a749a964736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decodeAndGetPAMTerms(Asset storage)": {
        "details": "Decode and loads PAMTerms"
      },
      "encodeAndSetPAMTerms(Asset storage,PAMTerms)": {
        "details": "Tightly pack and store only non-zero overwritten terms (LifecycleTerms)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "encodeAndSetPAMTerms(Asset storage,PAMTerms)": {
        "notice": "All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}