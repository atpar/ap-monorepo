{
  "address": "0x1143B624D3b3ba59330490bC3e77685A5cf3A597",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "methodSignature",
          "type": "bytes4"
        }
      ],
      "name": "GrantedAccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "RegisteredAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "methodSignature",
          "type": "bytes4"
        }
      ],
      "name": "RevokedAccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevActor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newActor",
          "type": "address"
        }
      ],
      "name": "UpdatedActor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevBeneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBeneficiary",
          "type": "address"
        }
      ],
      "name": "UpdatedBeneficiary",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevEngine",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newEngine",
          "type": "address"
        }
      ],
      "name": "UpdatedEngine",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "statusDate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedFinalizedState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevObligor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newObligor",
          "type": "address"
        }
      ],
      "name": "UpdatedObligor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "statusDate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "UpdatedTerms",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "approveActor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedActors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        }
      ],
      "name": "decodeEvent",
      "outputs": [
        {
          "internalType": "enum EventType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "scheduleTime",
          "type": "uint256"
        }
      ],
      "name": "encodeEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getActor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getAddressValueForTermsAttribute",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getBytes32ValueForTermsAttribute",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getContractReferenceValueForTermsAttribute",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "object",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "object2",
              "type": "bytes32"
            },
            {
              "internalType": "enum ContractReferenceType",
              "name": "_type",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractReferenceRole",
              "name": "role",
              "type": "uint8"
            }
          ],
          "internalType": "struct ContractReference",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getCycleValueForTermsAttribute",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "enum P",
              "name": "p",
              "type": "uint8"
            },
            {
              "internalType": "enum S",
              "name": "s",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isSet",
              "type": "bool"
            }
          ],
          "internalType": "struct IPS",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getEngine",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getEnumValueForStateAttribute",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getEnumValueForTermsAttribute",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "getEpochOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getEventAtIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getFinalizedState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getIntValueForStateAttribute",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getIntValueForTermsAttribute",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getNextScheduleIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getNextScheduledEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getNextUnderlyingEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getOwnership",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creatorObligor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creatorBeneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterpartyObligor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterpartyBeneficiary",
              "type": "address"
            }
          ],
          "internalType": "struct AssetOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getPendingEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getPeriodValueForTermsAttribute",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "enum P",
              "name": "p",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isSet",
              "type": "bool"
            }
          ],
          "internalType": "struct IP",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getSchedule",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getScheduleLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getTerms",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum CouponType",
              "name": "couponType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfRedemption",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfTermination",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfCoupon",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "nominalPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "issuePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "denominationRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponRate",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "settlementPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "fixingPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionExercisePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfRedemption",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfTermination",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfCoupon",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "object",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "object2",
                  "type": "bytes32"
                },
                {
                  "internalType": "enum ContractReferenceType",
                  "name": "_type",
                  "type": "uint8"
                },
                {
                  "internalType": "enum ContractReferenceRole",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ContractReference",
              "name": "contractReference_1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "object",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "object2",
                  "type": "bytes32"
                },
                {
                  "internalType": "enum ContractReferenceType",
                  "name": "_type",
                  "type": "uint8"
                },
                {
                  "internalType": "enum ContractReferenceRole",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ContractReference",
              "name": "contractReference_2",
              "type": "tuple"
            }
          ],
          "internalType": "struct CERTFTerms",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getUIntValueForTermsAttribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getUintValueForStateAttribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "methodSignature",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "methodSignature",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRootAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        }
      ],
      "name": "isEventSettled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        },
        {
          "internalType": "int256",
          "name": "_payoff",
          "type": "int256"
        }
      ],
      "name": "markEventAsSettled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "popNextScheduledEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "popPendingEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "pendingEvent",
          "type": "bytes32"
        }
      ],
      "name": "pushPendingEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum CouponType",
              "name": "couponType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfRedemption",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfTermination",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfCoupon",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "nominalPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "issuePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "denominationRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponRate",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "settlementPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "fixingPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionExercisePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfRedemption",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfTermination",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfCoupon",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "object",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "object2",
                  "type": "bytes32"
                },
                {
                  "internalType": "enum ContractReferenceType",
                  "name": "_type",
                  "type": "uint8"
                },
                {
                  "internalType": "enum ContractReferenceRole",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ContractReference",
              "name": "contractReference_1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "object",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "object2",
                  "type": "bytes32"
                },
                {
                  "internalType": "enum ContractReferenceType",
                  "name": "_type",
                  "type": "uint8"
                },
                {
                  "internalType": "enum ContractReferenceRole",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ContractReference",
              "name": "contractReference_2",
              "type": "tuple"
            }
          ],
          "internalType": "struct CERTFTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "schedule",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "creatorObligor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creatorBeneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterpartyObligor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterpartyBeneficiary",
              "type": "address"
            }
          ],
          "internalType": "struct AssetOwnership",
          "name": "ownership",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "engine",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "registerAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "methodSignature",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "setActor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newCounterpartyBeneficiary",
          "type": "address"
        }
      ],
      "name": "setCounterpartyBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newCounterpartyObligor",
          "type": "address"
        }
      ],
      "name": "setCounterpartyObligor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newCreatorBeneficiary",
          "type": "address"
        }
      ],
      "name": "setCreatorBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newCreatorObligor",
          "type": "address"
        }
      ],
      "name": "setCreatorObligor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "engine",
          "type": "address"
        }
      ],
      "name": "setEngine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "state",
          "type": "tuple"
        }
      ],
      "name": "setFinalizedState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "state",
          "type": "tuple"
        }
      ],
      "name": "setState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum CouponType",
              "name": "couponType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfRedemption",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfTermination",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfCoupon",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "nominalPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "issuePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "denominationRatio",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponRate",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "settlementPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "fixingPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionExercisePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfRedemption",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfTermination",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfCoupon",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "object",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "object2",
                  "type": "bytes32"
                },
                {
                  "internalType": "enum ContractReferenceType",
                  "name": "_type",
                  "type": "uint8"
                },
                {
                  "internalType": "enum ContractReferenceRole",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ContractReference",
              "name": "contractReference_1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "object",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "object2",
                  "type": "bytes32"
                },
                {
                  "internalType": "enum ContractReferenceType",
                  "name": "_type",
                  "type": "uint8"
                },
                {
                  "internalType": "enum ContractReferenceRole",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ContractReference",
              "name": "contractReference_2",
              "type": "tuple"
            }
          ],
          "internalType": "struct CERTFTerms",
          "name": "terms",
          "type": "tuple"
        }
      ],
      "name": "setTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xae79c19439cd57eefe76a02545e02f72fa45ab62719dfd2fd348242505f04a23",
  "receipt": {
    "to": null,
    "from": "0x6C51ECF949882c2183357B860FD82Dd4bb631840",
    "contractAddress": "0x1143B624D3b3ba59330490bC3e77685A5cf3A597",
    "transactionIndex": 0,
    "gasUsed": "4925184",
    "logsBloom": "0x
    "blockHash": "0x14f72ca097803f59795d98ca62b4ec746f4d48d10755eddab81676375828b82a",
    "transactionHash": "0xae79c19439cd57eefe76a02545e02f72fa45ab62719dfd2fd348242505f04a23",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 69,
        "transactionHash": "0xae79c19439cd57eefe76a02545e02f72fa45ab62719dfd2fd348242505f04a23",
        "address": "0x1143B624D3b3ba59330490bC3e77685A5cf3A597",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c51ecf949882c2183357b860fd82dd4bb631840"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x14f72ca097803f59795d98ca62b4ec746f4d48d10755eddab81676375828b82a"
      }
    ],
    "blockNumber": 69,
    "cumulativeGasUsed": "4925184",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3e43ceeb5da11f8668c639d97933f6e4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"}],\"name\":\"GrantedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"RegisteredAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"}],\"name\":\"RevokedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevActor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newActor\",\"type\":\"address\"}],\"name\":\"UpdatedActor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"UpdatedBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevEngine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEngine\",\"type\":\"address\"}],\"name\":\"UpdatedEngine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"}],\"name\":\"UpdatedFinalizedState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevObligor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newObligor\",\"type\":\"address\"}],\"name\":\"UpdatedObligor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"}],\"name\":\"UpdatedState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"UpdatedTerms\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"approveActor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedActors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"}],\"name\":\"decodeEvent\",\"outputs\":[{\"internalType\":\"enum EventType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"scheduleTime\",\"type\":\"uint256\"}],\"name\":\"encodeEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getActor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getAddressValueForTermsAttribute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getBytes32ValueForTermsAttribute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getContractReferenceValueForTermsAttribute\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"object\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"object2\",\"type\":\"bytes32\"},{\"internalType\":\"enum ContractReferenceType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractReferenceRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"internalType\":\"struct ContractReference\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getCycleValueForTermsAttribute\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getEngine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getEnumValueForStateAttribute\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getEnumValueForTermsAttribute\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"getEpochOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getEventAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getFinalizedState\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getIntValueForStateAttribute\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getIntValueForTermsAttribute\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getNextScheduleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getNextScheduledEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getNextUnderlyingEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getOwnership\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creatorObligor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyObligor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyBeneficiary\",\"type\":\"address\"}],\"internalType\":\"struct AssetOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getPendingEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getPeriodValueForTermsAttribute\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getSchedule\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getScheduleLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getState\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getTerms\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum CouponType\",\"name\":\"couponType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfRedemption\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfTermination\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfCoupon\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nominalPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"issuePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"denominationRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponRate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"settlementPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"fixingPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionExercisePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfRedemption\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfTermination\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfCoupon\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"object\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"object2\",\"type\":\"bytes32\"},{\"internalType\":\"enum ContractReferenceType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractReferenceRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"internalType\":\"struct ContractReference\",\"name\":\"contractReference_1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"object\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"object2\",\"type\":\"bytes32\"},{\"internalType\":\"enum ContractReferenceType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractReferenceRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"internalType\":\"struct ContractReference\",\"name\":\"contractReference_2\",\"type\":\"tuple\"}],\"internalType\":\"struct CERTFTerms\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getUIntValueForTermsAttribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getUintValueForStateAttribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRootAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"}],\"name\":\"isEventSettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_payoff\",\"type\":\"int256\"}],\"name\":\"markEventAsSettled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"popNextScheduledEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"popPendingEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pendingEvent\",\"type\":\"bytes32\"}],\"name\":\"pushPendingEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum CouponType\",\"name\":\"couponType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfRedemption\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfTermination\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfCoupon\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nominalPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"issuePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"denominationRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponRate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"settlementPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"fixingPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionExercisePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfRedemption\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfTermination\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfCoupon\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"object\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"object2\",\"type\":\"bytes32\"},{\"internalType\":\"enum ContractReferenceType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractReferenceRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"internalType\":\"struct ContractReference\",\"name\":\"contractReference_1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"object\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"object2\",\"type\":\"bytes32\"},{\"internalType\":\"enum ContractReferenceType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractReferenceRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"internalType\":\"struct ContractReference\",\"name\":\"contractReference_2\",\"type\":\"tuple\"}],\"internalType\":\"struct CERTFTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"schedule\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"creatorObligor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyObligor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyBeneficiary\",\"type\":\"address\"}],\"internalType\":\"struct AssetOwnership\",\"name\":\"ownership\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"engine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"setActor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newCounterpartyBeneficiary\",\"type\":\"address\"}],\"name\":\"setCounterpartyBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newCounterpartyObligor\",\"type\":\"address\"}],\"name\":\"setCounterpartyObligor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newCreatorBeneficiary\",\"type\":\"address\"}],\"name\":\"setCreatorBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newCreatorObligor\",\"type\":\"address\"}],\"name\":\"setCreatorObligor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"engine\",\"type\":\"address\"}],\"name\":\"setEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"state\",\"type\":\"tuple\"}],\"name\":\"setFinalizedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"state\",\"type\":\"tuple\"}],\"name\":\"setState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum CouponType\",\"name\":\"couponType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfRedemption\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfTermination\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfCoupon\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nominalPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"issuePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"denominationRatio\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponRate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"settlementPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"fixingPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionExercisePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfRedemption\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfTermination\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfCoupon\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"object\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"object2\",\"type\":\"bytes32\"},{\"internalType\":\"enum ContractReferenceType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractReferenceRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"internalType\":\"struct ContractReference\",\"name\":\"contractReference_1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"object\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"object2\",\"type\":\"bytes32\"},{\"internalType\":\"enum ContractReferenceType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractReferenceRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"internalType\":\"struct ContractReference\",\"name\":\"contractReference_2\",\"type\":\"tuple\"}],\"internalType\":\"struct CERTFTerms\",\"name\":\"terms\",\"type\":\"tuple\"}],\"name\":\"setTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveActor(address)\":{\"details\":\"Can only be called by the owner of the contract.\",\"params\":{\"actor\":\"address of the actor\"}},\"getActor(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"address of the asset actor\"}},\"getEngine(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"address of the engine of the asset\"}},\"getEventAtIndex(bytes32,uint256)\":{\"params\":{\"assetId\":\"id of the asset\",\"index\":\"index of the event to return\"},\"returns\":{\"_0\":\"Event\"}},\"getFinalizedState(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"state of the asset\"}},\"getNextScheduleIndex(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"Index\"}},\"getNextScheduledEvent(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"event\"}},\"getOwnership(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"addresses of all owners of the asset\"}},\"getSchedule(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"the schedule\"}},\"getScheduleLength(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"Length of the schedule\"}},\"getState(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"state of the asset\"}},\"getTerms(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"terms of the asset\"}},\"grantAccess(bytes32,bytes4,address)\":{\"details\":\"Can only be called by an authorized account.\",\"params\":{\"account\":\"address of the account to grant access to\",\"assetId\":\"id of the asset\",\"methodSignature\":\"function / method signature (4 byte keccak256 hash of the method selector)\"}},\"hasAccess(bytes32,bytes4,address)\":{\"params\":{\"account\":\"address of the account for which to check access\",\"assetId\":\"id of the asset\",\"methodSignature\":\"function / method signature (4 byte keccak256 hash of the method selector)\"},\"returns\":{\"_0\":\"true if allowed access\"}},\"hasRootAccess(bytes32,address)\":{\"params\":{\"account\":\"address of the account for which to check root acccess\",\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"true if has root access\"}},\"isEventSettled(bytes32,bytes32)\":{\"params\":{\"_event\":\"event (encoded)\",\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"true if event was settled\"}},\"isRegistered(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"true if asset exist\"}},\"markEventAsSettled(bytes32,bytes32,int256)\":{\"details\":\"Can only be set by authorized account.\",\"params\":{\"_event\":\"event (encoded) to be marked as settled\",\"assetId\":\"id of the asset\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"popNextScheduledEvent(bytes32)\":{\"details\":\"Can only be updated by the assets actor or by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\"}},\"registerAsset(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(bytes32,bytes32,uint8,uint8),(bytes32,bytes32,uint8,uint8)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32[],(address,address,address,address),address,address,address)\":{\"params\":{\"actor\":\"account which is allowed to update the asset state\",\"admin\":\"account which as admin rights (optional)\",\"engine\":\"ACTUS Engine of the asset\",\"ownership\":\"ownership of the asset\",\"schedule\":\"schedule of the asset\",\"state\":\"initial state of the asset\",\"terms\":\"asset specific terms (CERTFTerms)\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAccess(bytes32,bytes4,address)\":{\"details\":\"Can only be called by an authorized account.\",\"params\":{\"account\":\"address of the account to revoke access for\",\"assetId\":\"id of the asset\",\"methodSignature\":\"function / method signature (4 byte keccak256 hash of the method selector)\"}},\"setActor(bytes32,address)\":{\"params\":{\"actor\":\"address of the Actor contract\",\"assetId\":\"id of the asset\"}},\"setCounterpartyBeneficiary(bytes32,address)\":{\"details\":\"Can only be updated by the current counterparty beneficiary or by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"newCounterpartyBeneficiary\":\"address of the new beneficiary\"}},\"setCounterpartyObligor(bytes32,address)\":{\"details\":\"Can only be updated by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"newCounterpartyObligor\":\"address of the new counterparty obligor\"}},\"setCreatorBeneficiary(bytes32,address)\":{\"details\":\"Can only be updated by the current creator beneficiary or by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"newCreatorBeneficiary\":\"address of the new beneficiary\"}},\"setCreatorObligor(bytes32,address)\":{\"details\":\"Can only be updated by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"newCreatorObligor\":\"address of the new creator obligor\"}},\"setEngine(bytes32,address)\":{\"details\":\"Can only be set by authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"engine\":\"new engine address\"}},\"setFinalizedState(bytes32,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))\":{\"details\":\"Can only be updated by the assets actor or by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"state\":\"next state of the asset\"}},\"setState(bytes32,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))\":{\"details\":\"Can only be updated by the assets actor or by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"state\":\"next state of the asset\"}},\"setTerms(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(bytes32,bytes32,uint8,uint8),(bytes32,bytes32,uint8,uint8)))\":{\"details\":\"Can only be set by authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"terms\":\"new terms\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"CERTFRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveActor(address)\":{\"notice\":\"Approves the address of an actor contract e.g. for registering assets.\"},\"getActor(bytes32)\":{\"notice\":\"Returns the address of the actor which is allowed to update the state of the asset.\"},\"getEngine(bytes32)\":{\"notice\":\"Returns the address of a the ACTUS engine corresponding to the ContractType of an asset.\"},\"getEpochOffset(uint8)\":{\"notice\":\"Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp\"},\"getEventAtIndex(bytes32,uint256)\":{\"notice\":\"Returns an event for a given position (index) in a schedule of a given asset.\"},\"getFinalizedState(bytes32)\":{\"notice\":\"Returns the state of an asset.\"},\"getNextScheduleIndex(bytes32)\":{\"notice\":\"Returns the index of the next event to be processed for a schedule of an asset.\"},\"getNextScheduledEvent(bytes32)\":{\"notice\":\"Returns the next event to process.\"},\"getNextUnderlyingEvent(bytes32)\":{\"notice\":\"If the underlying of the asset changes in performance to a covered performance, it returns the exerciseDate event.\"},\"getOwnership(bytes32)\":{\"notice\":\"Retrieves the registered addresses of owners (creator, counterparty) of an asset.\"},\"getSchedule(bytes32)\":{\"notice\":\"Convenience method for retrieving the entire schedule Not recommended to execute method on-chain (if schedule is too long the tx may run out of gas)\"},\"getScheduleLength(bytes32)\":{\"notice\":\"Returns the length of a schedule of a given asset.\"},\"getState(bytes32)\":{\"notice\":\"Returns the state of an asset.\"},\"getTerms(bytes32)\":{\"notice\":\"Returns the terms of an asset.\"},\"grantAccess(bytes32,bytes4,address)\":{\"notice\":\"Grant access to an account to call a specific method on a specific asset.\"},\"hasAccess(bytes32,bytes4,address)\":{\"notice\":\"Check whether an account is allowed to call a specific method on a specific asset.\"},\"hasRootAccess(bytes32,address)\":{\"notice\":\"Check whether an account has root access for a specific asset.\"},\"isEventSettled(bytes32,bytes32)\":{\"notice\":\"Returns true if an event of an assets schedule was settled\"},\"isRegistered(bytes32)\":{\"notice\":\"Returns if there is an asset registerd for a given assetId\"},\"markEventAsSettled(bytes32,bytes32,int256)\":{\"notice\":\"Mark an event as settled\"},\"popNextScheduledEvent(bytes32)\":{\"notice\":\"Increments the index of a schedule of an asset. (if max index is reached the index will be left unchanged)\"},\"registerAsset(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(bytes32,bytes32,uint8,uint8),(bytes32,bytes32,uint8,uint8)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32[],(address,address,address,address),address,address,address)\":{\"notice\":\"@param assetId id of the asset\"},\"revokeAccess(bytes32,bytes4,address)\":{\"notice\":\"Revoke access for an account to call a specific method on a specific asset.\"},\"setActor(bytes32,address)\":{\"notice\":\"Set the address of the Actor contract which should be going forward.\"},\"setCounterpartyBeneficiary(bytes32,address)\":{\"notice\":\"Updates the address of the default beneficiary of cashflows going to the counterparty.\"},\"setCounterpartyObligor(bytes32,address)\":{\"notice\":\"Update the address of the counterparty which has to fulfill obligations for the counterparty of the asset.\"},\"setCreatorBeneficiary(bytes32,address)\":{\"notice\":\"Update the address of the default beneficiary of cashflows going to the creator.\"},\"setCreatorObligor(bytes32,address)\":{\"notice\":\"Update the address of the obligor which has to fulfill obligations for the creator of the asset.\"},\"setEngine(bytes32,address)\":{\"notice\":\"Set the engine address which should be used for the asset going forward.\"},\"setFinalizedState(bytes32,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))\":{\"notice\":\"Sets next finalized state of an asset.\"},\"setState(bytes32,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))\":{\"notice\":\"Sets next state of an asset.\"},\"setTerms(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(bytes32,bytes32,uint8,uint8),(bytes32,bytes32,uint8,uint8)))\":{\"notice\":\"Set the terms of the asset\"}},\"notice\":\"Registry for ACTUS Protocol assets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/CERTF/CERTFRegistry.sol\":\"CERTFRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x46d2453e9db55eae25c9abdae2c42229086c54f1a6a247e8ce32658bb785f6ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\nenum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct State {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    PenaltyType penaltyType;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    int256 penaltyRate;\\n    int256 delinquencyRate;\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 delinquencyRate;\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionExercisePeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    PenaltyType penaltyType;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    int256 penaltyRate;\\n    int256 delinquencyRate;\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    // int256 priceAtTerminationDate; // not implemented\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\",\"keccak256\":\"0x58c525726b2ec1ce52cb6beeb7c2aa7b90d2df28cbfb31a198e3be979fbd9858\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/EventUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n/**\\n * @title EventUtils\\n * @notice Methods for encoding decoding events\\n */\\ncontract EventUtils {\\n\\n    function encodeEvent(EventType eventType, uint256 scheduleTime)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return (\\n            bytes32(uint256(uint8(eventType))) << 248 |\\n            bytes32(scheduleTime)\\n        );\\n    }\\n\\n    function decodeEvent(bytes32 _event)\\n        public\\n        pure\\n        returns (EventType, uint256)\\n    {\\n        EventType eventType = EventType(uint8(uint256(_event >> 248)));\\n        uint256 scheduleTime = uint256(uint64(uint256(_event)));\\n\\n        return (eventType, scheduleTime);\\n    }\\n\\n    /**\\n     * @notice Returns the epoch offset for a given event type to determine the\\n     * correct order of events if multiple events have the same timestamp\\n     */\\n    function getEpochOffset(EventType eventType)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(eventType);\\n    }\\n}\\n\",\"keccak256\":\"0x0b57772142cc74943c55eea2bd2c8d2fd035bead19592b75cd4f7ad3159f96ee\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/PeriodUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath as SafeMul} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n/**\\n * @title PeriodUtils\\n * @notice Utility methods for dealing with Periods\\n */\\ncontract PeriodUtils {\\n\\n    using BokkyPooBahsDateTimeLibrary for uint;\\n    using SafeMul for uint;\\n\\n    /**\\n     * @notice Applies a period in IP notation to a given timestamp\\n     */\\n    function getTimestampPlusPeriod(IP memory period, uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 newTimestamp;\\n\\n        if (period.p == P.D) {\\n            newTimestamp = timestamp.addDays(period.i);\\n        } else if (period.p == P.W) {\\n            newTimestamp = timestamp.addDays(period.i.mul(7));\\n        } else if (period.p == P.M) {\\n            newTimestamp = timestamp.addMonths(period.i);\\n        } else if (period.p == P.Q) {\\n            newTimestamp = timestamp.addMonths(period.i.mul(3));\\n        } else if (period.p == P.H) {\\n            newTimestamp = timestamp.addMonths(period.i.mul(6));\\n        } else if (period.p == P.Y) {\\n            newTimestamp = timestamp.addYears(period.i);\\n        } else {\\n            revert(\\\"PeriodUtils.getTimestampPlusPeriod: ATTRIBUTE_NOT_FOUND\\\");\\n        }\\n\\n        return newTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x7ba86e98c89c11d4b16bb7cf81339679e01c7a73d099a980e71335bb890e82d9\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/CERTF/ICERTFEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../Core/ACTUSTypes.sol\\\";\\nimport \\\"../IEngine.sol\\\";\\n\\n\\n/**\\n * @title IEngine\\n * @notice Interface which all Engines have to implement\\n */\\ninterface ICERTFEngine is IEngine {\\n\\n    /**\\n     * @notice Initialize contract state space based on the contract terms.\\n     * @param terms terms of the contract\\n     * @return initial state of the contract\\n     */\\n    function computeInitialState(CERTFTerms calldata terms)\\n        external\\n        pure\\n        returns (State memory);\\n\\n    /**\\n     * Applys an event to the current state of a contract and returns the resulting contract state.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event to be applied to the contract state\\n     * @param externalData external data needed for STF evaluation (e.g. rate for RR events)\\n     * @return the resulting contract state\\n     */\\n    function computeStateForEvent(\\n        CERTFTerms calldata terms,\\n        State calldata state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        external\\n        pure\\n        returns (State memory);\\n\\n    /**\\n     * Evaluates the payoff for an event under the current state of the contract.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which the payoff should be evaluated\\n     * @param externalData external data needed for POF evaluation (e.g. fxRate)\\n     * @return the payoff of the event\\n     */\\n    function computePayoffForEvent(\\n        CERTFTerms calldata terms,\\n        State calldata state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        external\\n        pure\\n        returns (int256);\\n\\n    /**\\n     * @notice Computes a schedule segment of non-cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @return segment of the non-cyclic schedule\\n     */\\n    function computeNonCyclicScheduleSegment(\\n        CERTFTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeCyclicScheduleSegment(\\n        CERTFTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Computes the next non-cyclic contract events based on the contract terms\\n     * and the timestamp on which the prev. event occured.\\n     * @dev Assumes that non-cyclic events of the same event type have a unique schedule time\\n     * @param terms terms of the contract\\n     * @param lastNonCyclicEvent last non-cyclic event\\n     * @return next non-cyclic event\\n     */\\n    function computeNextNonCyclicEvent(\\n        CERTFTerms calldata terms,\\n        bytes32 lastNonCyclicEvent\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param lastScheduleTime last occurrence of cyclic event\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeNextCyclicEvent(\\n        CERTFTerms calldata terms,\\n        uint256 lastScheduleTime,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns(bytes32);\\n\\n    /**\\n     * @notice Verifies that the provided event is still scheduled under the terms, the current state of the\\n     * contract and the current state of the underlying.\\n     * @param _event event for which to check if its still scheduled\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param hasUnderlying boolean indicating whether the contract has an underlying contract\\n     * @param underlyingState state of the underlying (empty state object if non-existing)\\n     * @return boolean indicating whether event is still scheduled\\n     */\\n    function isEventScheduled(\\n        bytes32 _event,\\n        CERTFTerms calldata terms,\\n        State calldata state,\\n        bool hasUnderlying,\\n        State calldata underlyingState\\n    )\\n        external\\n        pure\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x9c1294f00637096e7f59bd5bde4c331e544afe32e2b2dd92680aa6fb4e8ac04f\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/IEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../Core/ACTUSTypes.sol\\\";\\n\\n\\ninterface IEngine {\\n    function contractType() external pure returns (ContractType);\\n}\",\"keccak256\":\"0xe2ecdc18616473e64d932c47ccf8408e5a35c100fa24e3157ad9f530556135bb\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/AccessControl/AccessControl.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\nimport \\\"./IAccessControl.sol\\\";\\n\\n\\ncontract AccessControl is BaseRegistryStorage, IAccessControl {\\n\\n    event GrantedAccess(bytes32 indexed assetId, address indexed account, bytes4 methodSignature);\\n    event RevokedAccess(bytes32 indexed assetId, address indexed account, bytes4 methodSignature);\\n\\n\\n    // Method signature == bytes4(0) := Access to all methods defined in the Asset Registry contract\\n    bytes4 constant ROOT_ACCESS = 0;\\n\\n\\n    modifier isAuthorized(bytes32 assetId) {\\n        require(\\n            msg.sender == assets[assetId].actor || hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AccessControl.isAuthorized: UNAUTHORIZED_SENDER\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Grant access to an account to call a specific method on a specific asset.\\n     * @dev Can only be called by an authorized account.\\n     * @param assetId id of the asset\\n     * @param methodSignature function / method signature (4 byte keccak256 hash of the method selector)\\n     * @param account address of the account to grant access to\\n     */\\n    function grantAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external\\n        override\\n    {\\n        require(\\n            hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AccessControl.revokeAccess: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        assets[assetId].access[methodSignature][account] = true;\\n\\n        emit GrantedAccess(assetId, account, methodSignature);\\n    }\\n\\n    /**\\n     * @notice Revoke access for an account to call a specific method on a specific asset.\\n     * @dev Can only be called by an authorized account.\\n     * @param assetId id of the asset\\n     * @param methodSignature function / method signature (4 byte keccak256 hash of the method selector)\\n     * @param account address of the account to revoke access for\\n     */\\n    function revokeAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external\\n        override\\n    {\\n        require(\\n            hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AccessControl.revokeAccess: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        assets[assetId].access[methodSignature][account] = false;\\n\\n        emit RevokedAccess(assetId, account, methodSignature);\\n    }\\n\\n    /**\\n     * @notice Check whether an account is allowed to call a specific method on a specific asset.\\n     * @param assetId id of the asset\\n     * @param methodSignature function / method signature (4 byte keccak256 hash of the method selector)\\n     * @param account address of the account for which to check access\\n     * @return true if allowed access\\n     */\\n    function hasAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return (\\n            assets[assetId].access[methodSignature][account] || assets[assetId].access[ROOT_ACCESS][account]\\n        );\\n    }\\n\\n    /**\\n     * @notice Check whether an account has root access for a specific asset.\\n     * @param assetId id of the asset\\n     * @param account address of the account for which to check root acccess\\n     * @return  true if has root access\\n     */\\n    function hasRootAccess(bytes32 assetId, address account)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return (assets[assetId].access[ROOT_ACCESS][account]);\\n    }\\n\\n    /**\\n     * @notice Grant access to an account to call all methods on a specific asset\\n     * (giving the account root access to an asset).\\n     * @param assetId id of the asset\\n     * @param account address of the account to set as the root\\n     */\\n    function setDefaultRoot(bytes32 assetId, address account) internal {\\n        assets[assetId].access[ROOT_ACCESS][account] = true;\\n        emit GrantedAccess(assetId, account, ROOT_ACCESS);\\n    }\\n}\\n\",\"keccak256\":\"0xc341374240e788188722dea783a0d7197f431c4c8ed766a417077f8a7a6c2d46\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/AccessControl/IAccessControl.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IAccessControl {\\n\\n    function grantAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external;\\n\\n    function revokeAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external;\\n\\n    function hasAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external\\n        returns (bool);\\n\\n    function hasRootAccess(bytes32 assetId, address account)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x69235896cd0d8b8d460acad192d238bfac387212c2d4b50d495146de90ef9abf\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../SharedTypes.sol\\\";\\n\\nimport \\\"./BaseRegistryStorage.sol\\\";\\nimport \\\"./IBaseRegistry.sol\\\";\\nimport \\\"./Ownership/OwnershipRegistry.sol\\\";\\nimport \\\"./Terms/TermsRegistry.sol\\\";\\nimport \\\"./State/StateRegistry.sol\\\";\\nimport \\\"./State/StateEncoder.sol\\\";\\nimport \\\"./Schedule/ScheduleRegistry.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\n/**\\n * @title BaseRegistry\\n * @notice Registry for ACTUS Protocol assets\\n */\\nabstract contract BaseRegistry is\\n    Ownable,\\n    BaseRegistryStorage,\\n    TermsRegistry,\\n    StateRegistry,\\n    ScheduleRegistry,\\n    OwnershipRegistry,\\n    IBaseRegistry\\n{\\n    using StateEncoder for Asset;\\n    using ScheduleEncoder for Asset;\\n\\n    event RegisteredAsset(bytes32 assetId);\\n    event UpdatedEngine(bytes32 indexed assetId, address prevEngine, address newEngine);\\n    event UpdatedActor(bytes32 indexed assetId, address prevActor, address newActor);\\n\\n    mapping(address => bool) public approvedActors;\\n\\n\\n    modifier onlyApprovedActors {\\n        require(\\n            approvedActors[msg.sender],\\n            \\\"BaseRegistry.onlyApprovedActors: UNAUTHORIZED_SENDER\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() BaseRegistryStorage() {}\\n\\n    /**\\n     * @notice Approves the address of an actor contract e.g. for registering assets.\\n     * @dev Can only be called by the owner of the contract.\\n     * @param actor address of the actor\\n     */\\n    function approveActor(address actor) external onlyOwner {\\n        approvedActors[actor] = true;\\n    }\\n\\n    /**\\n     * @notice Returns if there is an asset registerd for a given assetId\\n     * @param assetId id of the asset\\n     * @return true if asset exist\\n     */\\n    function isRegistered(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return assets[assetId].isSet;\\n    }\\n\\n    /**\\n     * @notice Stores the addresses of the owners (owner of creator-side payment obligations,\\n     * owner of creator-side payment claims), the initial state of an asset, the schedule of the asset\\n     * and sets the address of the actor (address of account which is allowed to update the state).\\n     * @dev The state of the asset can only be updates by a whitelisted actor.\\n     * @param assetId id of the asset\\n     * @param state initial state of the asset\\n     * @param schedule schedule of the asset\\n     * @param ownership ownership of the asset\\n     * @param engine ACTUS Engine of the asset\\n     * @param actor account which is allowed to update the asset state\\n     * @param admin account which as admin rights (optional)\\n     */\\n    function setAsset(\\n        bytes32 assetId,\\n        State memory state,\\n        bytes32[] memory schedule,\\n        AssetOwnership memory ownership,\\n        address engine,\\n        address actor,\\n        address admin\\n    )\\n        internal\\n    {\\n        Asset storage asset = assets[assetId];\\n\\n        // revert if an asset with the specified assetId already exists\\n        require(\\n            asset.isSet == false,\\n            \\\"BaseRegistry.setAsset: ASSET_ALREADY_EXISTS\\\"\\n        );\\n        // revert if specified address of the actor is not approved\\n        require(\\n            approvedActors[actor] == true,\\n            \\\"BaseRegistry.setAsset: ACTOR_NOT_APPROVED\\\"\\n        );\\n\\n        asset.isSet = true;\\n        asset.ownership = ownership;\\n        asset.engine = engine;\\n        asset.actor = actor;\\n\\n        asset.encodeAndSetState(state);\\n        asset.encodeAndSetFinalizedState(state);\\n        asset.encodeAndSetSchedule(schedule);\\n\\n        // set external admin if specified\\n        if (admin != address(0)) setDefaultRoot(assetId, admin);\\n\\n        emit RegisteredAsset(assetId);\\n    }\\n\\n    /**\\n     * @notice Returns the address of a the ACTUS engine corresponding to the ContractType of an asset.\\n     * @param assetId id of the asset\\n     * @return address of the engine of the asset\\n     */\\n    function getEngine(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return assets[assetId].engine;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the actor which is allowed to update the state of the asset.\\n     * @param assetId id of the asset\\n     * @return address of the asset actor\\n     */\\n    function getActor(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return assets[assetId].actor;\\n    }\\n\\n    /**\\n     * @notice Set the engine address which should be used for the asset going forward.\\n     * @dev Can only be set by authorized account.\\n     * @param assetId id of the asset\\n     * @param engine new engine address\\n     */\\n    function setEngine(bytes32 assetId, address engine)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        address prevEngine = assets[assetId].engine;\\n        assets[assetId].engine = engine;\\n\\n        emit UpdatedEngine(assetId, prevEngine, engine);\\n    }\\n\\n    /**\\n     * @notice Set the address of the Actor contract which should be going forward.\\n     * @param assetId id of the asset\\n     * @param actor address of the Actor contract\\n     */\\n    function setActor(bytes32 assetId, address actor)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        address prevActor = assets[assetId].actor;\\n        assets[assetId].actor = actor;\\n\\n        emit UpdatedActor(assetId, prevActor, actor);\\n    }\\n}\\n\",\"keccak256\":\"0xedd4c7cefcf487f83ccf18057506672813a8727504af066e67ba6eb9b51cb54a\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistryStorage.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"./State/StateEncoder.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\nstruct Settlement {\\n    bool isSettled;\\n    int256 payoff;\\n}\\n\\nstruct Asset {\\n    // boolean indicating that asset exists / is registered\\n    bool isSet;\\n    // address of the ACTUS Engine used for computing the State and the Payoff of the asset\\n    address engine;\\n    // address of the Asset Actor which is allowed to update the State of the asset\\n    address actor;\\n    // schedule of the asset\\n    Schedule schedule;\\n    // ownership of the asset\\n    AssetOwnership ownership;\\n    // granular ownership of the event type specific cashflows\\n    // per default owners are beneficiaries defined in ownership object\\n    // cashflow id (:= (EventType index + 1) * direction) => owner\\n    mapping (int8 => address) cashflowBeneficiaries;\\n    // method level access control - stores which address can a specific method\\n    // method signature => address => has access\\n    mapping (bytes4 => mapping (address => bool)) access;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedTerms;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedState;\\n    // indicates whether a specific event was settled\\n    mapping (bytes32 => Settlement) settlement;\\n}\\n\\n/**\\n * @title BaseRegistryStorage\\n * @notice Describes the storage of the AssetRegistry\\n * Contains getter and setter methods for encoding, decoding data to optimize gas cost.\\n * Circumvents storing default values by relying on the characteristic of mappings returning zero for not set values.\\n */\\nabstract contract BaseRegistryStorage {\\n\\n    using StateEncoder for Asset;\\n    using ScheduleEncoder for Asset;\\n\\n    // AssetId => Asset\\n    mapping (bytes32 => Asset) internal assets;\\n}\\n\",\"keccak256\":\"0xea52d9bb20a7b52f75fd27419e08201539bb402a9ce8a6da1ba5a2a585eedb87\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/IAssetRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./AccessControl/IAccessControl.sol\\\";\\nimport \\\"./Terms/ITermsRegistry.sol\\\";\\nimport \\\"./State/IStateRegistry.sol\\\";\\nimport \\\"./Schedule/IScheduleRegistry.sol\\\";\\nimport \\\"./Ownership/IOwnershipRegistry.sol\\\";\\nimport \\\"./IBaseRegistry.sol\\\";\\n\\n\\ninterface IAssetRegistry is\\n    IAccessControl,\\n    ITermsRegistry,\\n    IStateRegistry,\\n    IScheduleRegistry,\\n    IOwnershipRegistry,\\n    IBaseRegistry\\n{}\\n\",\"keccak256\":\"0xe7b720c06a1f2656d16d743cd6fed5787c9b802b70917abf17656dd2d1c735e7\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/IBaseRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IBaseRegistry {\\n\\n    function isRegistered(bytes32 assetId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getEngine(bytes32 assetId)\\n        external\\n        view\\n        returns (address);\\n\\n    function getActor(bytes32 assetId)\\n        external\\n        view\\n        returns (address);\\n\\n    function setEngine(bytes32 assetId, address engine)\\n        external;\\n\\n    function setActor(bytes32 assetId, address actor)\\n        external;\\n}\\n\",\"keccak256\":\"0xbf57f7affe11d5757bf393019d72c29c6db27678dfa306dc0672feb37e176878\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Ownership/IOwnershipRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface IOwnershipRegistry {\\n\\n    function setCreatorObligor (bytes32 assetId, address newCreatorObligor)\\n        external;\\n\\n    function setCounterpartyObligor (bytes32 assetId, address newCounterpartyObligor)\\n        external;\\n\\n    function setCreatorBeneficiary(bytes32 assetId, address newCreatorBeneficiary)\\n        external;\\n\\n    function setCounterpartyBeneficiary(bytes32 assetId, address newCounterpartyBeneficiary)\\n        external;\\n\\n    function getOwnership(bytes32 assetId)\\n        external\\n        view\\n        returns (AssetOwnership memory);\\n}\\n\",\"keccak256\":\"0x7ad4e4883948d40754366c61279e7e1eb8e3c2eb42766c18ad3e07d5f74a7290\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Ownership/OwnershipRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\nimport \\\"../AccessControl/AccessControl.sol\\\";\\nimport \\\"./IOwnershipRegistry.sol\\\";\\n\\n\\n/**\\n * @title OwnershipRegistry\\n */\\ncontract OwnershipRegistry is BaseRegistryStorage, AccessControl, IOwnershipRegistry {\\n\\n    event UpdatedObligor (bytes32 assetId, address prevObligor, address newObligor);\\n    event UpdatedBeneficiary(bytes32 assetId, address prevBeneficiary, address newBeneficiary);\\n\\n\\n    /**\\n     * @notice Update the address of the default beneficiary of cashflows going to the creator.\\n     * @dev Can only be updated by the current creator beneficiary or by an authorized account.\\n     * @param assetId id of the asset\\n     * @param newCreatorBeneficiary address of the new beneficiary\\n     */\\n    function setCreatorBeneficiary(\\n        bytes32 assetId,\\n        address newCreatorBeneficiary\\n    )\\n        external\\n        override\\n    {\\n        address prevCreatorBeneficiary = assets[assetId].ownership.creatorBeneficiary;\\n\\n        require(\\n            prevCreatorBeneficiary != address(0),\\n            \\\"AssetRegistry.setCreatorBeneficiary: ENTRY_DOES_NOT_EXIST\\\"\\n        );\\n        require(\\n            msg.sender == prevCreatorBeneficiary || hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AssetRegistry.setCreatorBeneficiary: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        assets[assetId].ownership.creatorBeneficiary = newCreatorBeneficiary;\\n\\n        emit UpdatedBeneficiary(assetId, prevCreatorBeneficiary, newCreatorBeneficiary);\\n    }\\n\\n    /**\\n     * @notice Updates the address of the default beneficiary of cashflows going to the counterparty.\\n     * @dev Can only be updated by the current counterparty beneficiary or by an authorized account.\\n     * @param assetId id of the asset\\n     * @param newCounterpartyBeneficiary address of the new beneficiary\\n     */\\n    function setCounterpartyBeneficiary(\\n        bytes32 assetId,\\n        address newCounterpartyBeneficiary\\n    )\\n        external\\n        override\\n    {\\n        address prevCounterpartyBeneficiary = assets[assetId].ownership.counterpartyBeneficiary;\\n\\n        require(\\n            prevCounterpartyBeneficiary != address(0),\\n            \\\"AssetRegistry.setCounterpartyBeneficiary: ENTRY_DOES_NOT_EXIST\\\"\\n        );\\n        require(\\n            msg.sender == prevCounterpartyBeneficiary || hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AssetRegistry.setCounterpartyBeneficiary: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        assets[assetId].ownership.counterpartyBeneficiary = newCounterpartyBeneficiary;\\n\\n        emit UpdatedBeneficiary(assetId, prevCounterpartyBeneficiary, newCounterpartyBeneficiary);\\n    }\\n\\n    /**\\n     * @notice Update the address of the obligor which has to fulfill obligations\\n     * for the creator of the asset.\\n     * @dev Can only be updated by an authorized account.\\n     * @param assetId id of the asset\\n     * @param newCreatorObligor address of the new creator obligor\\n     */\\n    function setCreatorObligor (bytes32 assetId, address newCreatorObligor)\\n        external\\n        override\\n    {\\n        require(\\n            hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AssetRegistry.setCreatorObligor: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        address prevCreatorObligor = assets[assetId].ownership.creatorObligor;\\n\\n        assets[assetId].ownership.creatorObligor = newCreatorObligor;\\n\\n        emit UpdatedObligor(assetId, prevCreatorObligor, newCreatorObligor);\\n    }\\n\\n    /**\\n     * @notice Update the address of the counterparty which has to fulfill obligations\\n     * for the counterparty of the asset.\\n     * @dev Can only be updated by an authorized account.\\n     * @param assetId id of the asset\\n     * @param newCounterpartyObligor address of the new counterparty obligor\\n     */\\n    function setCounterpartyObligor (bytes32 assetId, address newCounterpartyObligor)\\n        external\\n        override\\n    {\\n        require(\\n            hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AssetRegistry.setCounterpartyObligor: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        address prevCounterpartyObligor = assets[assetId].ownership.counterpartyObligor;\\n\\n        assets[assetId].ownership.counterpartyObligor = newCounterpartyObligor;\\n\\n        emit UpdatedObligor(assetId, prevCounterpartyObligor, newCounterpartyObligor);\\n    }\\n\\n    /**\\n     * @notice Retrieves the registered addresses of owners (creator, counterparty) of an asset.\\n     * @param assetId id of the asset\\n     * @return addresses of all owners of the asset\\n     */\\n    function getOwnership(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (AssetOwnership memory)\\n    {\\n        return assets[assetId].ownership;\\n    }\\n}\\n\",\"keccak256\":\"0x2376a3cbc9c5195e4cc0b4fb46a672785e1cb051147676dc93bbbdaee8593392\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/IScheduleRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface IScheduleRegistry {\\n\\n    function getPendingEvent (bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function pushPendingEvent (bytes32 assetId, bytes32 pendingEvent)\\n        external;\\n\\n    function popPendingEvent (bytes32 assetId)\\n        external\\n        returns (bytes32);\\n\\n    function getNextUnderlyingEvent (bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function getEventAtIndex(bytes32 assetId, uint256 index)\\n        external\\n        view\\n        returns (bytes32);\\n    \\n    function getScheduleLength(bytes32 assetId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSchedule(bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getNextScheduleIndex(bytes32 assetId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNextScheduledEvent (bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function popNextScheduledEvent(bytes32 assetId)\\n        external\\n        returns (bytes32);\\n\\n    function isEventSettled(bytes32 assetId, bytes32 _event)\\n        external\\n        view\\n        returns (bool, int256);\\n\\n    function markEventAsSettled(bytes32 assetId, bytes32 _event, int256 _payoff)\\n        external;\\n}\\n\",\"keccak256\":\"0x4c9d29c2a2dfb2ad5279c0ab200497803ea89f4e67495955a1ace5b936babd78\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary ScheduleEncoder {\\n\\n    function encodeAndSetSchedule(Asset storage asset, bytes32[] memory schedule) internal {\\n        for (uint256 i = 0; i < schedule.length; i++) {\\n            if (schedule[i] == bytes32(0)) break;\\n            asset.schedule.events[i] = schedule[i];\\n            asset.schedule.length = i + 1;\\n        }\\n    }\\n\\n    function decodeAndGetSchedule(Asset storage asset) internal view returns (bytes32[] memory) {\\n        bytes32[] memory schedule = new bytes32[](asset.schedule.length);\\n\\n        for (uint256 i = 0; i < asset.schedule.length; i++) {\\n            schedule[i] = asset.schedule.events[i];\\n        }\\n\\n        return schedule;\\n    }\\n}\\n\",\"keccak256\":\"0x420da04c67322d387c9b0fbeb00accc59a63fb9c10cb7b4c21f955792c4ad236\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../ACTUS/Core/Utils/EventUtils.sol\\\";\\nimport \\\"../../../../ACTUS/Core/Utils/PeriodUtils.sol\\\";\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\nimport \\\"../IBaseRegistry.sol\\\";\\nimport \\\"../AccessControl/AccessControl.sol\\\";\\nimport \\\"../Terms/TermsRegistry.sol\\\";\\nimport \\\"../Terms/ITermsRegistry.sol\\\";\\nimport \\\"../State/StateRegistry.sol\\\";\\nimport \\\"../State/IStateRegistry.sol\\\";\\nimport \\\"./IScheduleRegistry.sol\\\";\\nimport \\\"./ScheduleEncoder.sol\\\";\\n\\n\\n/**\\n * @title ScheduleRegistry\\n */\\nabstract contract ScheduleRegistry is\\n    BaseRegistryStorage,\\n    AccessControl,\\n    TermsRegistry,\\n    StateRegistry,\\n    IScheduleRegistry,\\n    EventUtils,\\n    PeriodUtils\\n{\\n    using ScheduleEncoder for Asset;\\n\\n\\n    /**\\n     * @notice Returns an event for a given position (index) in a schedule of a given asset.\\n     * @param assetId id of the asset\\n     * @param index index of the event to return\\n     * @return Event\\n     */\\n    function getEventAtIndex(bytes32 assetId, uint256 index)\\n        external\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        return assets[assetId].schedule.events[index];\\n    }\\n\\n\\n    /**\\n     * @notice Returns the length of a schedule of a given asset.\\n     * @param assetId id of the asset\\n     * @return Length of the schedule\\n     */\\n    function getScheduleLength(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return assets[assetId].schedule.length;\\n    }\\n\\n    /**\\n     * @notice Convenience method for retrieving the entire schedule\\n     * Not recommended to execute method on-chain (if schedule is too long the tx may run out of gas)\\n     * @param assetId id of the asset\\n     * @return the schedule\\n     */\\n    function getSchedule(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (bytes32[] memory)\\n    {\\n        return assets[assetId].decodeAndGetSchedule();\\n    }\\n\\n    function getPendingEvent(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        return assets[assetId].schedule.pendingEvent;\\n    }\\n\\n    function pushPendingEvent(bytes32 assetId, bytes32 pendingEvent)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        assets[assetId].schedule.pendingEvent = pendingEvent;\\n    }\\n\\n    function popPendingEvent(bytes32 assetId)\\n        external\\n        override\\n        isAuthorized (assetId)\\n        returns (bytes32)\\n    {\\n        bytes32 pendingEvent = assets[assetId].schedule.pendingEvent;\\n        assets[assetId].schedule.pendingEvent = bytes32(0);\\n\\n        return pendingEvent;\\n    }\\n\\n    /**\\n     * @notice Returns the index of the next event to be processed for a schedule of an asset.\\n     * @param assetId id of the asset\\n     * @return Index\\n     */\\n    function getNextScheduleIndex(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return assets[assetId].schedule.nextScheduleIndex;\\n    }\\n\\n    /**\\n     * @notice If the underlying of the asset changes in performance to a covered performance,\\n     * it returns the exerciseDate event.\\n     */\\n    function getNextUnderlyingEvent(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        ContractReference memory contractReference_1 = getContractReferenceValueForTermsAttribute(assetId, \\\"contractReference_1\\\");\\n\\n        // check for COVE\\n        if (contractReference_1.object != bytes32(0) && contractReference_1.role == ContractReferenceRole.COVE) {\\n            bytes32 underlyingAssetId = contractReference_1.object;\\n            address underlyingRegistry = address(uint160(uint256(contractReference_1.object2))); // workaround for solc bug (replace with bytes)\\n\\n            require(\\n                IBaseRegistry(underlyingRegistry).isRegistered(underlyingAssetId),\\n                \\\"AssetActor.getNextUnderlyingEvent: UNDERLYING_ASSET_DOES_NOT_EXIST\\\"\\n            );\\n\\n            uint256 exerciseDate = getUintValueForStateAttribute(assetId, \\\"exerciseDate\\\");\\n            ContractPerformance creditEventTypeCovered = ContractPerformance(getEnumValueForTermsAttribute(assetId, \\\"creditEventTypeCovered\\\"));\\n            ContractPerformance underlyingContractPerformance = ContractPerformance(IStateRegistry(underlyingRegistry).getEnumValueForStateAttribute(underlyingAssetId, \\\"contractPerformance\\\"));\\n            uint256 underlyingNonPerformingDate = IStateRegistry(underlyingRegistry).getUintValueForStateAttribute(underlyingAssetId, \\\"nonPerformingDate\\\");\\n\\n            // check if exerciseDate has been triggered\\n            if (exerciseDate > 0) {\\n                // insert SettlementDate event\\n                return encodeEvent(\\n                    EventType.ST,\\n                    // solium-disable-next-line\\n                    block.timestamp\\n                );\\n            }\\n            // if not check if performance of underlying asset is covered by this asset (PF excluded)\\n            if (\\n                creditEventTypeCovered != ContractPerformance.PF\\n                && underlyingContractPerformance == creditEventTypeCovered\\n            ) {\\n                // insert exerciseDate event\\n                // derive scheduleTimeOffset from performance\\n                if (underlyingContractPerformance == ContractPerformance.DL) {\\n                    return encodeEvent(\\n                        EventType.EXE,\\n                        underlyingNonPerformingDate\\n                    );\\n                } else if (underlyingContractPerformance == ContractPerformance.DQ) {\\n                    IP memory underlyingGracePeriod = ITermsRegistry(underlyingRegistry).getPeriodValueForTermsAttribute(underlyingAssetId, \\\"gracePeriod\\\");\\n                    return encodeEvent(\\n                        EventType.EXE,\\n                        getTimestampPlusPeriod(underlyingGracePeriod, underlyingNonPerformingDate)\\n                    );\\n                } else if (underlyingContractPerformance == ContractPerformance.DF) {\\n                    IP memory underlyingDelinquencyPeriod = ITermsRegistry(underlyingRegistry).getPeriodValueForTermsAttribute(underlyingAssetId, \\\"delinquencyPeriod\\\");\\n                    return encodeEvent(\\n                        EventType.EXE,\\n                        getTimestampPlusPeriod(underlyingDelinquencyPeriod, underlyingNonPerformingDate)\\n                    );\\n                }\\n            }\\n        }\\n\\n        return bytes32(0);\\n    }\\n\\n    /**\\n     * @notice Returns the next event to process.\\n     * @param assetId id of the asset\\n     * @return event\\n     */\\n    function getNextScheduledEvent(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        Asset storage asset = assets[assetId];\\n\\n        if (asset.schedule.length != 0) {\\n            if (asset.schedule.nextScheduleIndex == asset.schedule.length) return bytes32(0);\\n            return asset.schedule.events[asset.schedule.nextScheduleIndex];\\n        }\\n\\n        // if no schedule is set, return next computed event\\n        (bytes32 nextComputedEvent, ) = getNextComputedEvent(assetId);\\n        return nextComputedEvent;\\n    }\\n\\n    /**\\n     * @notice Increments the index of a schedule of an asset.\\n     * (if max index is reached the index will be left unchanged)\\n     * @dev Can only be updated by the assets actor or by an authorized account.\\n     * @param assetId id of the asset\\n     */\\n    function popNextScheduledEvent(bytes32 assetId)\\n        external\\n        override\\n        isAuthorized (assetId)\\n        returns (bytes32)\\n    {\\n        Asset storage asset = assets[assetId];\\n\\n        if (asset.schedule.length != 0) {\\n            bytes32 nextScheduledEvent = asset.schedule.events[asset.schedule.nextScheduleIndex];\\n            if (asset.schedule.nextScheduleIndex == asset.schedule.length) return bytes32(0);\\n            asset.schedule.nextScheduleIndex += 1;\\n            return nextScheduledEvent;\\n        }\\n\\n        // if no schedule is set, pop next computed event\\n        (bytes32 nextComputedEvent, bool isCyclicEvent) = getNextComputedEvent(assetId);\\n        if (nextComputedEvent == bytes32(0)) return bytes32(0);\\n        \\n        (EventType eventType, uint256 scheduleTime) = decodeEvent(nextComputedEvent);\\n\\n        // if next computed event is a cyclic event\\n        if (isCyclicEvent == true) {\\n            asset.schedule.lastScheduleTimeOfCyclicEvent[eventType] = scheduleTime;\\n        } else {\\n            asset.schedule.lastNonCyclicEvent = nextComputedEvent;\\n        }\\n\\n        return nextComputedEvent;\\n    }\\n\\n    /**\\n     * @notice Returns true if an event of an assets schedule was settled\\n     * @param assetId id of the asset\\n     * @param _event event (encoded)\\n     * @return true if event was settled\\n     */\\n    function isEventSettled(bytes32 assetId, bytes32 _event)\\n        external\\n        view\\n        override\\n        returns (bool, int256)\\n    {\\n        return (\\n            assets[assetId].settlement[_event].isSettled,\\n            assets[assetId].settlement[_event].payoff\\n        );\\n    }\\n\\n    /**\\n     * @notice Mark an event as settled\\n     * @dev Can only be set by authorized account.\\n     * @param assetId id of the asset\\n     * @param _event event (encoded) to be marked as settled\\n     */\\n    function markEventAsSettled(bytes32 assetId, bytes32 _event, int256 _payoff)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        assets[assetId].settlement[_event] = Settlement({ isSettled: true, payoff: _payoff });\\n    }\\n\\n    // function decodeEvent(bytes32 _event)\\n    //     internal\\n    //     pure\\n    //     returns (EventType, uint256)\\n    // {\\n    //     EventType eventType = EventType(uint8(uint256(_event >> 248)));\\n    //     uint256 scheduleTime = uint256(uint64(uint256(_event)));\\n\\n    //     return (eventType, scheduleTime);\\n    // }\\n}\\n\",\"keccak256\":\"0x459aaa4523e944db0c0adfa2359e849caa17709cc8c3070afc1b6afe48ba47aa\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/State/IStateRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface IStateRegistry {\\n\\n    function getState(bytes32 assetId)\\n        external\\n        view\\n        returns (State memory);\\n\\n    function getFinalizedState(bytes32 assetId)\\n        external\\n        view\\n        returns (State memory);\\n\\n    function getEnumValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint8);\\n\\n    function getIntValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getUintValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setState(bytes32 assetId, State calldata state)\\n        external;\\n\\n    function setFinalizedState(bytes32 assetId, State calldata state)\\n        external;\\n}\\n\",\"keccak256\":\"0xca89d9a456981ce687d3ad07aafd347d161ee396f70af9283242481a8f42365a\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/State/StateEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary StateEncoder {\\n\\n    function storeInPackedState(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedState[attributeKey] == value) return;\\n        asset.packedState[attributeKey] = value;\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store State\\n     */\\n    function encodeAndSetState(Asset storage asset, State memory state) internal {\\n        storeInPackedState(asset, \\\"contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n\\n        storeInPackedState(asset, \\\"notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n        storeInPackedState(asset, \\\"exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store finalized State\\n     */\\n    function encodeAndSetFinalizedState(Asset storage asset, State memory state) internal {\\n        storeInPackedState(asset, \\\"F_contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"F_statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"F_nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"F_maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"F_exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"F_terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"F_lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"F_lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n\\n        storeInPackedState(asset, \\\"F_notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"F_accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"F_feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"F_nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"F_interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n        storeInPackedState(asset, \\\"F_exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"F_quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"F_couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"F_marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"F_adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"F_dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"F_splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Decode and load the State of the asset\\n     */\\n    function decodeAndGetState(Asset storage asset) internal view returns (State memory) {\\n        return State(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"statusDate\\\"]),\\n            uint256(asset.packedState[\\\"nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"lastCouponFixingDate\\\"]),\\n            uint256(asset.packedState[\\\"lastDividendFixingDate\\\"]),\\n\\n            int256(asset.packedState[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"nextPrincipalRedemptionPayment\\\"]),\\n            int256(asset.packedState[\\\"exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"exerciseQuantity\\\"]),\\n\\n            int256(asset.packedState[\\\"quantity\\\"]),\\n            int256(asset.packedState[\\\"couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"marginFactor\\\"]),\\n            int256(asset.packedState[\\\"adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"splitRatio\\\"])\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and load the finalized State of the asset\\n     */\\n    function decodeAndGetFinalizedState(Asset storage asset) internal view returns (State memory) {\\n        return State(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"F_statusDate\\\"]),\\n            uint256(asset.packedState[\\\"F_nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"F_exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"F_terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastCouponFixingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastDividendFixingDate\\\"]),\\n\\n            int256(asset.packedState[\\\"F_notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"F_accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"F_feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"F_nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"F_interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_nextPrincipalRedemptionPayment\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseQuantity\\\"]),\\n\\n            int256(asset.packedState[\\\"F_quantity\\\"]),\\n            int256(asset.packedState[\\\"F_couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"F_marginFactor\\\"]),\\n            int256(asset.packedState[\\\"F_adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"F_dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"F_splitRatio\\\"])\\n        );\\n    }\\n\\n\\n    function decodeAndGetEnumValueForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"F_contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetUIntValueForForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedState[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedState[attributeKey]);\\n    }\\n}\\n\",\"keccak256\":\"0x8ea00bd6be196c2c740901169da39a8a9224d4b3c8655408d4beb9dc6d20dc6f\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/State/StateRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\nimport \\\"../AccessControl/AccessControl.sol\\\";\\nimport \\\"./IStateRegistry.sol\\\";\\nimport \\\"./StateEncoder.sol\\\";\\n\\n\\n/**\\n * @title StateRegistry\\n */\\ncontract StateRegistry is BaseRegistryStorage, AccessControl, IStateRegistry {\\n\\n    using StateEncoder for Asset;\\n\\n    event UpdatedState(bytes32 indexed assetId, uint256 statusDate);\\n    event UpdatedFinalizedState(bytes32 indexed assetId, uint256 statusDate);\\n\\n\\n    /**\\n     * @notice Returns the state of an asset.\\n     * @param assetId id of the asset\\n     * @return state of the asset\\n     */\\n    function getState(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (State memory)\\n    {\\n        return assets[assetId].decodeAndGetState();\\n    }\\n\\n    /**\\n     * @notice Returns the state of an asset.\\n     * @param assetId id of the asset\\n     * @return state of the asset\\n     */\\n    function getFinalizedState(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (State memory)\\n    {\\n        return assets[assetId].decodeAndGetFinalizedState();\\n    }\\n\\n    function getEnumValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override\\n        returns (uint8)\\n    {\\n        return assets[assetId].decodeAndGetEnumValueForStateAttribute(attribute);\\n    }\\n\\n    function getIntValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override\\n        returns (int256)\\n    {\\n        return assets[assetId].decodeAndGetIntValueForForStateAttribute(attribute);\\n    }\\n\\n    function getUintValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return assets[assetId].decodeAndGetUIntValueForForStateAttribute(attribute);\\n    }\\n\\n    /**\\n     * @notice Sets next state of an asset.\\n     * @dev Can only be updated by the assets actor or by an authorized account.\\n     * @param assetId id of the asset\\n     * @param state next state of the asset\\n     */\\n    function setState(bytes32 assetId, State calldata state)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        assets[assetId].encodeAndSetState(state);\\n        emit UpdatedState(assetId, state.statusDate);\\n    }\\n\\n    /**\\n     * @notice Sets next finalized state of an asset.\\n     * @dev Can only be updated by the assets actor or by an authorized account.\\n     * @param assetId id of the asset\\n     * @param state next state of the asset\\n     */\\n    function setFinalizedState(bytes32 assetId, State calldata state)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        assets[assetId].encodeAndSetFinalizedState(state);\\n        emit UpdatedFinalizedState(assetId, state.statusDate);\\n    }\\n}\\n\",\"keccak256\":\"0xfb9403df3faf856aa24d93085ae1725dc07e06ca42afba0eda011776122ca47e\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Terms/ITermsRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface ITermsRegistry {\\n\\n    function getEnumValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint8);\\n\\n    function getAddressValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (address);\\n\\n    function getBytes32ValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function getUIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getPeriodValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (IP memory);\\n\\n    function getCycleValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (IPS memory);\\n\\n    function getContractReferenceValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (ContractReference memory);\\n}\\n\",\"keccak256\":\"0xb6c776fdb37fbfb7768c84aaea8304ef30e6406ffd843c8476d986ce3b5417b6\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Terms/TermsRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\nabstract contract TermsRegistry {\\n\\n    event UpdatedTerms(bytes32 indexed assetId);\\n\\n\\n    function getEnumValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (uint8);\\n\\n    function getAddressValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (address);\\n\\n    function getBytes32ValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (bytes32);\\n\\n    function getUIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (int256);\\n\\n    function getPeriodValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (IP memory);\\n\\n    function getCycleValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (IPS memory);\\n\\n    function getContractReferenceValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (ContractReference memory);\\n\\n    function getNextComputedEvent(bytes32 assetId)\\n        internal\\n        view\\n        virtual\\n        returns (bytes32, bool);\\n}\\n\",\"keccak256\":\"0x286b897b3527094d4a96ff1928449c80e842470f295f9f82dfbbd2a76a5d3b15\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"},\"contracts/Core/CERTF/CERTFEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary CERTFEncoder {\\n\\n    function storeInPackedTerms(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedTerms[attributeKey] == value) return;\\n        asset.packedTerms[attributeKey] = value;\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\\n     * @notice All non zero values of the overwrittenTerms object are stored.\\n     * It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\\n     */\\n    function encodeAndSetCERTFTerms(Asset storage asset, CERTFTerms memory terms) external {\\n        storeInPackedTerms(\\n            asset,\\n            \\\"enums\\\",\\n            bytes32(uint256(uint8(terms.contractType))) << 248 |\\n            bytes32(uint256(uint8(terms.calendar))) << 240 |\\n            bytes32(uint256(uint8(terms.contractRole))) << 232 |\\n            bytes32(uint256(uint8(terms.dayCountConvention))) << 224 |\\n            bytes32(uint256(uint8(terms.businessDayConvention))) << 216 |\\n            bytes32(uint256(uint8(terms.endOfMonthConvention))) << 208 |\\n            bytes32(uint256(uint8(terms.couponType))) << 200\\n        );\\n\\n        storeInPackedTerms(asset, \\\"currency\\\", bytes32(uint256(terms.currency) << 96));\\n        storeInPackedTerms(asset, \\\"settlementCurrency\\\", bytes32(uint256(terms.settlementCurrency) << 96));\\n\\n        storeInPackedTerms(asset, \\\"contractDealDate\\\", bytes32(terms.contractDealDate));\\n        storeInPackedTerms(asset, \\\"statusDate\\\", bytes32(terms.statusDate));\\n        storeInPackedTerms(asset, \\\"initialExchangeDate\\\", bytes32(terms.initialExchangeDate));\\n        storeInPackedTerms(asset, \\\"maturityDate\\\", bytes32(terms.maturityDate));\\n        storeInPackedTerms(asset, \\\"issueDate\\\", bytes32(terms.issueDate));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfRedemption\\\", bytes32(terms.cycleAnchorDateOfRedemption));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfTermination\\\", bytes32(terms.cycleAnchorDateOfTermination));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfCoupon\\\", bytes32(terms.cycleAnchorDateOfCoupon));\\n\\n        storeInPackedTerms(asset, \\\"nominalPrice\\\", bytes32(terms.nominalPrice));\\n        storeInPackedTerms(asset, \\\"issuePrice\\\", bytes32(terms.issuePrice));\\n        storeInPackedTerms(asset, \\\"quantity\\\", bytes32(terms.quantity));\\n        storeInPackedTerms(asset, \\\"denominationRatio\\\", bytes32(terms.denominationRatio));\\n        storeInPackedTerms(asset, \\\"couponRate\\\", bytes32(terms.couponRate));\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"gracePeriod\\\",\\n            bytes32(uint256(terms.gracePeriod.i)) << 24 |\\n            bytes32(uint256(terms.gracePeriod.p)) << 16 |\\n            bytes32(uint256((terms.gracePeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"delinquencyPeriod\\\",\\n            bytes32(uint256(terms.delinquencyPeriod.i)) << 24 |\\n            bytes32(uint256(terms.delinquencyPeriod.p)) << 16 |\\n            bytes32(uint256((terms.delinquencyPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"settlementPeriod\\\",\\n            bytes32(uint256(terms.settlementPeriod.i)) << 24 |\\n            bytes32(uint256(terms.settlementPeriod.p)) << 16 |\\n            bytes32(uint256((terms.settlementPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"fixingPeriod\\\",\\n            bytes32(uint256(terms.fixingPeriod.i)) << 24 |\\n            bytes32(uint256(terms.fixingPeriod.p)) << 16 |\\n            bytes32(uint256((terms.fixingPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"redemptionExercisePeriod\\\",\\n            bytes32(uint256(terms.redemptionExercisePeriod.i)) << 24 |\\n            bytes32(uint256(terms.redemptionExercisePeriod.p)) << 16 |\\n            bytes32(uint256((terms.redemptionExercisePeriod.isSet) ? 1 : 0)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfRedemption\\\",\\n            bytes32(uint256(terms.cycleOfRedemption.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfRedemption.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfRedemption.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfRedemption.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfTermination\\\",\\n            bytes32(uint256(terms.cycleOfTermination.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfTermination.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfTermination.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfTermination.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfCoupon\\\",\\n            bytes32(uint256(terms.cycleOfCoupon.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfCoupon.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfCoupon.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfCoupon.isSet) ? 1 : 0))\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_object\\\",\\n            terms.contractReference_1.object\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_object2\\\",\\n            terms.contractReference_1.object2\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_type_role\\\",\\n            bytes32(uint256(terms.contractReference_1._type)) << 16 |\\n            bytes32(uint256(terms.contractReference_1.role)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_object\\\",\\n            terms.contractReference_2.object\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_object2\\\",\\n            terms.contractReference_2.object2\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_type_role\\\",\\n            bytes32(uint256(terms.contractReference_2._type)) << 16 |\\n            bytes32(uint256(terms.contractReference_2.role)) << 8\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and loads CERTFTerms\\n     */\\n    function decodeAndGetCERTFTerms(Asset storage asset) external view returns (CERTFTerms memory) {\\n        return CERTFTerms(\\n            ContractType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248))),\\n            Calendar(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240))),\\n            ContractRole(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232))),\\n            DayCountConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224))),\\n            BusinessDayConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216))),\\n            EndOfMonthConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208))),\\n            CouponType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200))),\\n\\n            address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96)),\\n            address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96)),\\n\\n            uint256(asset.packedTerms[\\\"contractDealDate\\\"]),\\n            uint256(asset.packedTerms[\\\"statusDate\\\"]),\\n            uint256(asset.packedTerms[\\\"initialExchangeDate\\\"]),\\n            uint256(asset.packedTerms[\\\"maturityDate\\\"]),\\n            uint256(asset.packedTerms[\\\"issueDate\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfRedemption\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfTermination\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfCoupon\\\"]),\\n\\n            int256(asset.packedTerms[\\\"nominalPrice\\\"]),\\n            int256(asset.packedTerms[\\\"issuePrice\\\"]),\\n            int256(asset.packedTerms[\\\"quantity\\\"]),\\n            int256(asset.packedTerms[\\\"denominationRatio\\\"]),\\n            int256(asset.packedTerms[\\\"couponRate\\\"]),\\n\\n            IP(\\n                uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"gracePeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"settlementPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"settlementPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"settlementPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"fixingPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"fixingPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"fixingPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"redemptionExercisePeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"redemptionExercisePeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"redemptionExercisePeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfRedemption\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfRedemption\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfRedemption\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfRedemption\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfTermination\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfTermination\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfTermination\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfTermination\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfCoupon\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfCoupon\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfCoupon\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfCoupon\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            ContractReference(\\n                asset.packedTerms[\\\"contractReference_1_object\\\"],\\n                asset.packedTerms[\\\"contractReference_1_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 8)))\\n            ),\\n            ContractReference(\\n                asset.packedTerms[\\\"contractReference_2_object\\\"],\\n                asset.packedTerms[\\\"contractReference_2_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 8)))\\n            )\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractType\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"calendar\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240));\\n        } else if (attributeKey == bytes32(\\\"contractRole\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232));\\n        } else if (attributeKey == bytes32(\\\"dayCountConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224));\\n        } else if (attributeKey == bytes32(\\\"businessDayConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216));\\n        } else if (attributeKey == bytes32(\\\"endOfMonthConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208));\\n        } else if (attributeKey == bytes32(\\\"couponType\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetAddressValueForForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (attributeKey == bytes32(\\\"currency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96));\\n        } else if (attributeKey == bytes32(\\\"settlementCurrency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96));\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function decodeAndGetBytes32ValueForForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return asset.packedTerms[attributeKey];\\n    }\\n\\n    function decodeAndGetUIntValueForForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetPeriodValueForForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IP memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"gracePeriod\\\")\\n            || attributeKey == bytes32(\\\"delinquencyPeriod\\\")\\n            || attributeKey == bytes32(\\\"settlementPeriod\\\")\\n            || attributeKey == bytes32(\\\"fixingPeriod\\\")\\n            || attributeKey == bytes32(\\\"redemptionExercisePeriod\\\")\\n        ) {\\n            return IP(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                (asset.packedTerms[attributeKey] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IP(0, P(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetCycleValueForForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IPS memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"cycleOfRedemption\\\")\\n            || attributeKey == bytes32(\\\"cycleOfTermination\\\")\\n            || attributeKey == bytes32(\\\"cycleOfCoupon\\\")\\n        ) {\\n            return IPS(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[attributeKey] >> 8))),\\n                (asset.packedTerms[attributeKey] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IPS(0, P(0), S(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetContractReferenceValueForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (ContractReference memory)\\n    {\\n        if (attributeKey == bytes32(\\\"contractReference_1\\\")) {\\n            return ContractReference(\\n                asset.packedTerms[\\\"contractReference_1_object\\\"],\\n                asset.packedTerms[\\\"contractReference_1_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 8)))\\n            );\\n        } else if (attributeKey == bytes32(\\\"contractReference_2\\\")) {\\n            return ContractReference(\\n                asset.packedTerms[\\\"contractReference_2_object\\\"],\\n                asset.packedTerms[\\\"contractReference_2_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 8)))\\n            );\\n        } else {\\n            return ContractReference(\\n                bytes32(0),\\n                bytes32(0),\\n                ContractReferenceType(0),\\n                ContractReferenceRole(0)\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdac797a9e896dd4993d2f5f8d99cd1e6890813547bc4d1cdd4af6c3b1427911b\",\"license\":\"Apache-2.0\"},\"contracts/Core/CERTF/CERTFRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../ACTUS/Engines/CERTF/ICERTFEngine.sol\\\";\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistry.sol\\\";\\nimport \\\"./CERTFEncoder.sol\\\";\\nimport \\\"./ICERTFRegistry.sol\\\";\\n\\n\\n/**\\n * @title CERTFRegistry\\n * @notice Registry for ACTUS Protocol assets\\n */\\ncontract CERTFRegistry is BaseRegistry, ICERTFRegistry {\\n\\n    using CERTFEncoder for Asset;\\n\\n\\n    constructor() BaseRegistry() {}\\n\\n    /**\\n     * @notice\\n     * @param assetId id of the asset\\n     * @param terms asset specific terms (CERTFTerms)\\n     * @param state initial state of the asset\\n     * @param schedule schedule of the asset\\n     * @param ownership ownership of the asset\\n     * @param engine ACTUS Engine of the asset\\n     * @param actor account which is allowed to update the asset state\\n     * @param admin account which as admin rights (optional)\\n     */\\n    function registerAsset(\\n        bytes32 assetId,\\n        CERTFTerms calldata terms,\\n        State calldata state,\\n        bytes32[] calldata schedule,\\n        AssetOwnership calldata ownership,\\n        address engine,\\n        address actor,\\n        address admin\\n    )\\n        external\\n        override\\n        onlyApprovedActors\\n    {\\n        setAsset(assetId, state, schedule, ownership, engine, actor, admin);\\n        assets[assetId].encodeAndSetCERTFTerms(terms);\\n    }\\n\\n    /**\\n     * @notice Returns the terms of an asset.\\n     * @param assetId id of the asset\\n     * @return terms of the asset\\n     */\\n    function getTerms(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (CERTFTerms memory)\\n    {\\n        return assets[assetId].decodeAndGetCERTFTerms();\\n    }\\n\\n    /**\\n     * @notice Set the terms of the asset\\n     * @dev Can only be set by authorized account.\\n     * @param assetId id of the asset\\n     * @param terms new terms\\n     */\\n    function setTerms(bytes32 assetId, CERTFTerms calldata terms)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        assets[assetId].encodeAndSetCERTFTerms(terms);\\n        emit UpdatedTerms(assetId);\\n    }\\n\\n    function getEnumValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (uint8)\\n    {\\n        return assets[assetId].decodeAndGetEnumValueForCERTFAttribute(attribute);\\n    }\\n\\n    function getAddressValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (address)\\n    {\\n        return assets[assetId].decodeAndGetAddressValueForForCERTFAttribute(attribute);\\n    }\\n\\n    function getBytes32ValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (bytes32)\\n    {\\n        return assets[assetId].decodeAndGetBytes32ValueForForCERTFAttribute(attribute);\\n    }\\n\\n    function getUIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (uint256)\\n    {\\n        return assets[assetId].decodeAndGetUIntValueForForCERTFAttribute(attribute);\\n    }\\n\\n    function getIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (int256)\\n    {\\n        return assets[assetId].decodeAndGetIntValueForForCERTFAttribute(attribute);\\n    }\\n\\n    function getPeriodValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (IP memory)\\n    {\\n        return assets[assetId].decodeAndGetPeriodValueForForCERTFAttribute(attribute);\\n    }\\n\\n    function getCycleValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (IPS memory)\\n    {\\n        return assets[assetId].decodeAndGetCycleValueForForCERTFAttribute(attribute);\\n    }\\n\\n    function getContractReferenceValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (ContractReference memory)\\n    {\\n        return assets[assetId].decodeAndGetContractReferenceValueForCERTFAttribute(attribute);\\n    }\\n\\n    function getNextComputedEvent(bytes32 assetId)\\n        internal\\n        view\\n        override(TermsRegistry)\\n        returns (bytes32, bool)\\n    {\\n        Asset storage asset = assets[assetId];\\n        CERTFTerms memory terms = asset.decodeAndGetCERTFTerms();\\n\\n        EventType nextEventType;\\n        uint256 nextScheduleTime;\\n        bool isCyclicEvent = true;\\n\\n        // COF\\n        {\\n            (EventType eventType, uint256 scheduleTime) = decodeEvent(ICERTFEngine(asset.engine).computeNextCyclicEvent(\\n                terms,\\n                asset.schedule.lastScheduleTimeOfCyclicEvent[EventType.COF],\\n                EventType.COF\\n            ));\\n\\n            if (\\n                (nextScheduleTime == 0)\\n                || (scheduleTime < nextScheduleTime)\\n                || (nextScheduleTime == scheduleTime && getEpochOffset(eventType) < getEpochOffset(nextEventType))\\n            ) {\\n                nextScheduleTime = scheduleTime;\\n                nextEventType = eventType;\\n            }\\n        }\\n\\n        // COP\\n        {\\n            (EventType eventType, uint256 scheduleTime) = decodeEvent(ICERTFEngine(asset.engine).computeNextCyclicEvent(\\n                terms,\\n                asset.schedule.lastScheduleTimeOfCyclicEvent[EventType.COP],\\n                EventType.COP\\n            ));\\n\\n            if (\\n                (nextScheduleTime == 0)\\n                || (scheduleTime != 0 && scheduleTime < nextScheduleTime)\\n                || (scheduleTime != 0 && nextScheduleTime == scheduleTime && getEpochOffset(eventType) < getEpochOffset(nextEventType))\\n            ) {\\n                nextScheduleTime = scheduleTime;\\n                nextEventType = eventType;\\n            }\\n        }\\n\\n        // REF\\n        {\\n            (EventType eventType, uint256 scheduleTime) = decodeEvent(ICERTFEngine(asset.engine).computeNextCyclicEvent(\\n                terms,\\n                asset.schedule.lastScheduleTimeOfCyclicEvent[EventType.REF],\\n                EventType.REF\\n            ));\\n\\n            if (\\n                (nextScheduleTime == 0)\\n                || (scheduleTime != 0 && scheduleTime < nextScheduleTime)\\n                || (scheduleTime != 0 && nextScheduleTime == scheduleTime && getEpochOffset(eventType) < getEpochOffset(nextEventType))\\n            ) {\\n                nextScheduleTime = scheduleTime;\\n                nextEventType = eventType;\\n            }\\n        }\\n\\n        // REP\\n        {\\n            (EventType eventType, uint256 scheduleTime) = decodeEvent(ICERTFEngine(asset.engine).computeNextCyclicEvent(\\n                terms,\\n                asset.schedule.lastScheduleTimeOfCyclicEvent[EventType.REP],\\n                EventType.REP\\n            ));\\n\\n            if (\\n                (nextScheduleTime == 0)\\n                || (scheduleTime != 0 && scheduleTime < nextScheduleTime)\\n                || (scheduleTime != 0 && nextScheduleTime == scheduleTime && getEpochOffset(eventType) < getEpochOffset(nextEventType))\\n            ) {\\n                nextScheduleTime = scheduleTime;\\n                nextEventType = eventType;\\n            }\\n        }\\n\\n        // EXE\\n        {\\n            (EventType eventType, uint256 scheduleTime) = decodeEvent(ICERTFEngine(asset.engine).computeNextCyclicEvent(\\n                terms,\\n                asset.schedule.lastScheduleTimeOfCyclicEvent[EventType.EXE],\\n                EventType.EXE\\n            ));\\n\\n            if (\\n                (nextScheduleTime == 0)\\n                || (scheduleTime != 0 && scheduleTime < nextScheduleTime)\\n                || (scheduleTime != 0 && nextScheduleTime == scheduleTime && getEpochOffset(eventType) < getEpochOffset(nextEventType))\\n            ) {\\n                nextScheduleTime = scheduleTime;\\n                nextEventType = eventType;\\n            }\\n        }\\n\\n        // Non-Cyclic\\n        {\\n            (EventType eventType, uint256 scheduleTime) = decodeEvent(ICERTFEngine(asset.engine).computeNextNonCyclicEvent(\\n                terms,\\n                asset.schedule.lastNonCyclicEvent\\n            ));\\n\\n            if (\\n                (nextScheduleTime == 0)\\n                || (scheduleTime != 0 && scheduleTime < nextScheduleTime)\\n                || (scheduleTime != 0 && nextScheduleTime == scheduleTime && getEpochOffset(eventType) < getEpochOffset(nextEventType))\\n            ) {\\n                nextScheduleTime = scheduleTime;\\n                nextEventType = eventType;\\n                isCyclicEvent = false;\\n            }        \\n        }\\n\\n        return (encodeEvent(nextEventType, nextScheduleTime), isCyclicEvent);\\n    }\\n}\\n\",\"keccak256\":\"0x1ac7d3e1f2efbae19983aee45603886bd292cbe4788c5f16f37de5014e9129f3\",\"license\":\"Apache-2.0\"},\"contracts/Core/CERTF/ICERTFRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/IAssetRegistry.sol\\\";\\n\\n\\ninterface ICERTFRegistry is IAssetRegistry {\\n\\n    function registerAsset(\\n        bytes32 assetId,\\n        CERTFTerms calldata terms,\\n        State calldata state,\\n        bytes32[] calldata schedule,\\n        AssetOwnership calldata ownership,\\n        address engine,\\n        address actor,\\n        address admin\\n    )\\n        external;\\n    \\n    function getTerms(bytes32 assetId)\\n        external\\n        view\\n        returns (CERTFTerms memory);\\n\\n    function setTerms(bytes32 assetId, CERTFTerms calldata terms)\\n        external;\\n}\\n\",\"keccak256\":\"0x789c9bbd36b78a24ab16c4292d7e2ea1a0a7ffa300fee82a5069b3b2048753e7\",\"license\":\"Apache-2.0\"},\"contracts/external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: MIT\\\"\\npragma solidity ^0.7.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x2b0c785d6fe1e5ae7239ac6833b6c014f865e1d12c4628dc9def5e0a901cc3eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060006200001e6200006e565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000072565b3390565b6157ad80620000826000396000f3fe608060405234801561001057600080fd5b506004361061030c5760003560e01c8063a17b75b51161019d578063d51dc3dc116100e9578063e8f7ca3e116100a2578063ee43eda11161007c578063ee43eda11461072e578063f2fde38b14610741578063f52f84e114610754578063f7f729ad146107675761030c565b8063e8f7ca3e146106f5578063eb01255914610708578063ecef55771461071b5761030c565b8063d51dc3dc14610676578063d981e77314610689578063de07a1731461069c578063e05a66e0146106af578063e50e0ef7146106c2578063e7dc3188146106e25761030c565b8063ba4d2d2811610156578063c3b6e7c211610130578063c3b6e7c21461061d578063c6d2d66e14610630578063ccfc347e14610643578063cf5aed12146106565761030c565b8063ba4d2d28146105c9578063bc6a7d76146105ea578063bd1f0a6c1461060a5761030c565b8063a17b75b51461054a578063b02ca0c01461055d578063b0b4888f14610570578063b3c45ebe14610590578063b461dd4f146105a3578063b8282041146105b65761030c565b80633adc277a1161025c5780636fe55baa1161021557806375e86ae4116101ef57806375e86ae4146104fc578063811322fb1461050f578063842962d5146105225780638da5cb5b146105355761030c565b80636fe55baa146104b3578063715018a6146104d357806372540003146104db5761030c565b80633adc277a1461043a578063512872f41461045a5780636031a0941461046d578063606aa07e146104805780636a899b9b146104805780636be39bda146104935761030c565b80631b126815116102c95780633549d08d116102a35780633549d08d146103ee57806337462dba1461040157806339262e87146104145780633a60d6fe146104275761030c565b80631b126815146103a857806327258b22146103c857806328e0f8a9146103db5761030c565b806303a81a2a1461031157806309648a9d146103265780630c5b75a41461034f5780630d62037a1461036f578063135b9f4d146103825780631717e86714610395575b600080fd5b61032461031f366004614246565b61077a565b005b610339610334366004614216565b61084f565b6040516103469190615559565b60405180910390f35b61036261035d366004614216565b610876565b6040516103469190614cf6565b61032461037d366004614246565b6108ed565b610362610390366004614275565b610992565b6103246103a33660046142c1565b610a31565b6103bb6103b63660046142c1565b610ae7565b6040516103469190614cdb565b6103bb6103d6366004614216565b610b64565b6103626103e9366004614216565b610b79565b6103246103fc366004614246565b610b8e565b61033961040f366004614216565b610c69565b6103246104223660046142c1565b610c88565b610324610435366004614421565b610d2d565b61044d610448366004614216565b610ded565b6040516103469190614c97565b610324610468366004614246565b610e07565b61032461047b366004614246565b610ece565b61036261048e366004614275565b610fa9565b6104a66104a1366004614216565b610fc1565b60405161034691906154d7565b6104c66104c1366004614275565b61105f565b604051610346919061554b565b6103246110fe565b6104ee6104e9366004614216565b6111b2565b604051610346929190614dbb565b61036261050a366004614216565b6111db565b61036261051d366004614445565b6115af565b610324610530366004614421565b6115bd565b61053d611670565b6040516103469190614c69565b610362610558366004614216565b61167f565b61036261056b366004614275565b611694565b61058361057e366004614275565b6116b5565b604051610346919061553d565b61053d61059e366004614216565b611754565b6103626105b1366004614275565b611773565b6103626105c4366004614216565b6117b9565b6105dc6105d7366004614275565b61181d565b604051610346929190614ce6565b6105fd6105f8366004614275565b611847565b604051610346919061552f565b610324610618366004614246565b6118e6565b61036261062b366004614216565b61197e565b61032461063e36600461433b565b611ab7565b6103bb6106513660046141c2565b611bc6565b610669610664366004614275565b611bdb565b604051610346919061565f565b610362610684366004614275565b611bf3565b610324610697366004614275565b611c39565b6103246106aa366004614296565b611ca8565b6103626106bd36600461445f565b611d44565b6106d56106d0366004614216565b611d62565b6040516103469190615246565b6103246106f03660046141c2565b611dc0565b6103bb610703366004614246565b611e4e565b61053d610716366004614275565b611e84565b610669610729366004614275565b611f1a565b61053d61073c366004614216565b611fb0565b61032461074f3660046141c2565b611fd0565b610362610762366004614216565b6120da565b61032461077536600461430e565b6120ef565b6000828152600160208190526040909120015482906001600160a01b03163314806107b757506107b7816000356001600160e01b03191633610ae7565b6107dc5760405162461bcd60e51b81526004016107d390614eed565b60405180910390fd5b6000838152600160208190526040918290200180546001600160a01b038581166001600160a01b0319831617909255915191169084907f6baefd4565218ab73b43cb6b1019ca3a06161c4fcaef25cd665aacddabc44a20906108419084908790614c7d565b60405180910390a250505050565b610857613d20565b600082815260016020526040902061086e906121ef565b90505b919050565b60008181526001602081905260408220015482906001600160a01b03163314806108b257506108b2816000356001600160e01b03191633610ae7565b6108ce5760405162461bcd60e51b81526004016107d390614eed565b6000838152600160205260408120600601805491905591505b50919050565b610904826000356001600160e01b03191633610ae7565b6109205760405162461bcd60e51b81526004016107d39061518a565b6000828152600160205260409081902060080180546001600160a01b038481166001600160a01b031983161790925591519116907fa7f38588f02421aa73988ed359aee27363c896e7cc3b6e634e4357f7ee408e259061098590859084908690614cff565b60405180910390a1505050565b600082815260016020526040808220905163aaaf608760e01b8152732Ba32F3baaE4cbb697d7c495E7F6640590c21D9c9163aaaf6087916109d891908690600401615281565b60206040518083038186803b1580156109f057600080fd5b505af4158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a28919061422e565b90505b92915050565b610a48836000356001600160e01b03191633610ae7565b610a645760405162461bcd60e51b81526004016107d39061513b565b60008381526001602081815260408084206001600160e01b031987168552600d0182528084206001600160a01b038616808652925292839020805460ff1916909217909155905184907face25d271ad11ee299595b3021629bae0349e370d7c2eb7c2dced6e4edb4786590610ada908690614da6565b60405180910390a3505050565b60008381526001602090815260408083206001600160e01b031986168452600d0182528083206001600160a01b038516845290915281205460ff1680610b5a57506000848152600160209081526040808320838052600d0182528083206001600160a01b038616845290915290205460ff165b90505b9392505050565b60009081526001602052604090205460ff1690565b60009081526001602052604090206005015490565b6000828152600160205260409020600b01546001600160a01b031680610bc65760405162461bcd60e51b81526004016107d390614dd6565b336001600160a01b0382161480610bef5750610bef836000356001600160e01b03191633610ae7565b610c0b5760405162461bcd60e51b81526004016107d390614e33565b60008381526001602052604090819020600b0180546001600160a01b0319166001600160a01b038516179055517f66808241563a07166fd47b523591fa432148706dc0ddd255d49b69e71f1721ce9061098590859084908690614cff565b610c71613d20565b600082815260016020526040902061086e9061255c565b610c9f836000356001600160e01b03191633610ae7565b610cbb5760405162461bcd60e51b81526004016107d39061513b565b60008381526001602090815260408083206001600160e01b031986168452600d0182528083206001600160a01b038516808552925291829020805460ff19169055905184907f42b1b0e7392ad606bb4f5b003296aba62f16e43aa9372f1f40c1522fa2655ffa90610ada908690614da6565b6000828152600160208190526040909120015482906001600160a01b0316331480610d6a5750610d6a816000356001600160e01b03191633610ae7565b610d865760405162461bcd60e51b81526004016107d390614eed565b610dac610d9836849003840184614765565b6000858152600160205260409020906128f9565b827fad3970329ffaec63d947adc6077368479a4be7f09f2e7ba1b13852f8405b3ec68360200135604051610de09190614cf6565b60405180910390a2505050565b600081815260016020526040902060609061086e90612ca1565b6000828152600160208190526040909120015482906001600160a01b0316331480610e445750610e44816000356001600160e01b03191633610ae7565b610e605760405162461bcd60e51b81526004016107d390614eed565b6000838152600160205260409081902080546001600160a01b03858116610100908102610100600160a81b03198416179093559251919004919091169084907fdaa92ae0693b6616f14ef5db4b7ee053d3234c0d03f7a1885589c6a6c2c75bdb906108419084908790614c7d565b6000828152600160205260409020600901546001600160a01b031680610f065760405162461bcd60e51b81526004016107d3906150de565b336001600160a01b0382161480610f2f5750610f2f836000356001600160e01b03191633610ae7565b610f4b5760405162461bcd60e51b81526004016107d390614fdb565b6000838152600160205260409081902060090180546001600160a01b0319166001600160a01b038516179055517f66808241563a07166fd47b523591fa432148706dc0ddd255d49b69e71f1721ce9061098590859084908690614cff565b6000828152600160205260408120610a289083612d37565b610fc9613dcf565b6000828152600160205260409081902090516307c055c760e31b8152732Ba32F3baaE4cbb697d7c495E7F6640590c21D9c91633e02ae389161100e9190600401614cf6565b6107206040518083038186803b15801561102757600080fd5b505af415801561103b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086e9190614506565b611067613f0a565b6000838152600160205260409081902090516305c6b05560e41b8152732Ba32F3baaE4cbb697d7c495E7F6640590c21D9c91635c6b0550916110ae91908690600401615281565b60606040518083038186803b1580156110c657600080fd5b505af41580156110da573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a28919061474a565b611106612d4d565b6000546001600160a01b03908116911614611168576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000808060f884901c60218111156111c657fe5b92505067ffffffffffffffff83169050915091565b60006111e5613f2d565b6112058372636f6e74726163745265666572656e63655f3160681b611847565b805190915015801590611227575060038160600151600481111561122557fe5b145b156115a65780516020820151604051631392c59160e11b81526001600160a01b038216906327258b229061125f908590600401614cf6565b60206040518083038186803b15801561127757600080fd5b505afa15801561128b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112af91906141fa565b6112cb5760405162461bcd60e51b81526004016107d3906151de565b60006112e6866b65786572636973654461746560a01b610fa9565b9050600061130d877518dc99591a5d115d995b9d151e5c1950dbdd995c995960521b611f1a565b60ff16600581111561131b57fe5b90506000836001600160a01b031663cf5aed12866040518263ffffffff1660e01b815260040161134b9190614d81565b60206040518083038186803b15801561136357600080fd5b505afa158015611377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139b9190614882565b60ff1660058111156113a957fe5b90506000846001600160a01b031663606aa07e876040518263ffffffff1660e01b81526004016113d99190614d5e565b60206040518083038186803b1580156113f157600080fd5b505afa158015611405573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611429919061422e565b9050831561144a5761143c601a42611d44565b975050505050505050610871565b600083600581111561145857fe5b1415801561147b575082600581111561146d57fe5b82600581111561147957fe5b145b1561159f57600182600581111561148e57fe5b141561149f5761143c601982611d44565b60028260058111156114ad57fe5b1415611557576114bb613f0a565b6040516337f2add560e11b81526001600160a01b03871690636fe55baa906114e7908a90600401614d1e565b60606040518083038186803b1580156114ff57600080fd5b505afa158015611513573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611537919061474a565b905061154860196106bd8385612d51565b98505050505050505050610871565b600382600581111561156557fe5b141561159f57611573613f0a565b6040516337f2add560e11b81526001600160a01b03871690636fe55baa906114e7908a90600401614d3b565b5050505050505b50600092915050565b600081602181111561086e57fe5b6000828152600160208190526040909120015482906001600160a01b03163314806115fa57506115fa816000356001600160e01b03191633610ae7565b6116165760405162461bcd60e51b81526004016107d390614eed565b61163c61162836849003840184614765565b600085815260016020526040902090612e6a565b827f0c71209d22d4c70a40140b94deee55f1f54a9353e3d5d5a4ddfb45fcddcf720f8360200135604051610de09190614cf6565b6000546001600160a01b031690565b60009081526001602052604090206004015490565b60009182526001602090815260408084209284526003909201905290205490565b6116bd613f54565b60008381526001602052604090819020905163063a179b60e21b8152732Ba32F3baaE4cbb697d7c495E7F6640590c21D9c916318e85e6c9161170491908690600401615281565b60806040518083038186803b15801561171c57600080fd5b505af4158015611730573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a28919061472f565b600090815260016020819052604090912001546001600160a01b031690565b600082815260016020526040808220905163e0660e8160e01b8152732Ba32F3baaE4cbb697d7c495E7F6640590c21D9c9163e0660e81916109d891908690600401615281565b6000818152600160205260408120600481015415611809576004810154600582015414156117eb575060009050610871565b60058101546000908152600390910160205260409020549050610871565b600061181484613236565b50949350505050565b6000918252600160208181526040808520938552601090930190529120805491015460ff90911691565b61184f613f2d565b60008381526001602052604090819020905163799b1f8160e01b8152732Ba32F3baaE4cbb697d7c495E7F6640590c21D9c9163799b1f819161189691908690600401615281565b60806040518083038186803b1580156118ae57600080fd5b505af41580156118c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190614714565b6118fd826000356001600160e01b03191633610ae7565b6119195760405162461bcd60e51b81526004016107d390614e90565b60008281526001602052604090819020600a0180546001600160a01b038481166001600160a01b031983161790925591519116907fa7f38588f02421aa73988ed359aee27363c896e7cc3b6e634e4357f7ee408e259061098590859084908690614cff565b60008181526001602081905260408220015482906001600160a01b03163314806119ba57506119ba816000356001600160e01b03191633610ae7565b6119d65760405162461bcd60e51b81526004016107d390614eed565b6000838152600160205260409020600481015415611a305760058101546000818152600383016020526040902054600483015490911415611a1d5750600092506108e79050565b60059091018054600101905591506108e7565b600080611a3c86613236565b909250905081611a535750600093506108e7915050565b600080611a5f846111b2565b909250905060018315151415611aa35780600286016000846021811115611a8257fe5b6021811115611a8d57fe5b8152602081019190915260400160002055611aab565b600785018490555b50919695505050505050565b3360009081526002602052604090205460ff16611ae65760405162461bcd60e51b81526004016107d390614f87565b611b4489611af9368a90038a018a614765565b888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611b3c9250505036899003890189614488565b878787613718565b600089815260016020526040908190209051635445aa9b60e01b8152732Ba32F3baaE4cbb697d7c495E7F6640590c21D9c91635445aa9b91611b8b91908c9060040161528f565b60006040518083038186803b158015611ba357600080fd5b505af4158015611bb7573d6000803e3d6000fd5b50505050505050505050505050565b60026020526000908152604090205460ff1681565b6000828152600160205260408120610a289083613891565b600082815260016020526040808220905163ada653a360e01b8152732Ba32F3baaE4cbb697d7c495E7F6640590c21D9c9163ada653a3916109d891908690600401615281565b6000828152600160208190526040909120015482906001600160a01b0316331480611c765750611c76816000356001600160e01b03191633610ae7565b611c925760405162461bcd60e51b81526004016107d390614eed565b5060009182526001602052604090912060060155565b6000838152600160208190526040909120015483906001600160a01b0316331480611ce55750611ce5816000356001600160e01b03191633610ae7565b611d015760405162461bcd60e51b81526004016107d390614eed565b50604080518082018252600180825260208083019485526000968752818152838720958752601090950190945293209251835460ff191690151517835551910155565b60008160f8846021811115611d5557fe5b60ff16901b179392505050565b611d6a613f75565b50600090815260016020908152604091829020825160808101845260088201546001600160a01b0390811682526009830154811693820193909352600a820154831693810193909352600b015416606082015290565b611dc8612d4d565b6000546001600160a01b03908116911614611e2a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6000918252600160209081526040808420848052600d0182528084206001600160a01b0393909316845291905290205460ff1690565b60008281526001602052604080822090516359603f8160e01b8152732Ba32F3baaE4cbb697d7c495E7F6640590c21D9c916359603f8191611eca91908690600401615281565b60206040518083038186803b158015611ee257600080fd5b505af4158015611ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2891906141de565b6000828152600160205260408082209051633438aa2360e21b8152732Ba32F3baaE4cbb697d7c495E7F6640590c21D9c9163d0e2a88c91611f6091908690600401615281565b60206040518083038186803b158015611f7857600080fd5b505af4158015611f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190614882565b60009081526001602052604090205461010090046001600160a01b031690565b611fd8612d4d565b6000546001600160a01b0390811691161461203a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661207f5760405162461bcd60e51b81526004018080602001828103825260268152602001806157316026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526001602052604090206006015490565b6000828152600160208190526040909120015482906001600160a01b031633148061212c575061212c816000356001600160e01b03191633610ae7565b6121485760405162461bcd60e51b81526004016107d390614eed565b600083815260016020526040908190209051635445aa9b60e01b8152732Ba32F3baaE4cbb697d7c495E7F6640590c21D9c91635445aa9b9161218f9190869060040161528f565b60006040518083038186803b1580156121a757600080fd5b505af41580156121bb573d6000803e3d6000fd5b50506040518592507fb777acf68d226f3c8ab6f398cfb9a320e6fe8e92f5d2f0b4f69bc8ebab3b70cb9150600090a2505050565b6121f7613d20565b604080516102e08101825272636f6e7472616374506572666f726d616e636560681b6000908152600f85016020529190912054819060f81c600581111561223a57fe5b600581111561224557fe5b8152697374617475734461746560b01b6000908152600f8501602081815260408084205482860152706e6f6e506572666f726d696e674461746560781b845282825280842054818601526b6d617475726974794461746560a01b84528282528084205460608601526b65786572636973654461746560a01b84528282528084205460808601526e7465726d696e6174696f6e4461746560881b84528282528084205460a0860152736c617374436f75706f6e466978696e674461746560601b84528282528084205460c0860152756c6173744469766964656e64466978696e674461746560501b84528282528084205460e0860152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8452828252808420546101008601526e1858d8dc9d5959125b9d195c995cdd608a1b845282825280842054610120860152691999595058d8dc9d595960b21b845282825280842054610140860152726e6f6d696e616c496e7465726573745261746560681b8452828252808420546101608601527834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b845282825280842054610180860152783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b8452828252808420546101a08601527f6e6578745072696e636970616c526564656d7074696f6e5061796d656e7400008452828252808420546101c08601526d195e195c98da5cd9505b5bdd5b9d60921b8452828252808420546101e08601526f65786572636973655175616e7469747960801b845282825280842054610200860152677175616e7469747960c01b8452828252808420546102208601527018dbdd5c1bdb905b5bdd5b9d119a5e1959607a1b8452828252808420546102408601526b36b0b933b4b72330b1ba37b960a11b8452828252808420546102608601526f30b2353ab9ba36b2b73a2330b1ba37b960811b84528282528084205461028086015274191a5d9a59195b9914185e5b595b9d105b5bdd5b9d605a1b8452828252808420546102a08601526973706c6974526174696f60b01b84529190529020546102c0909101529050919050565b612564613d20565b604080516102e08101825274465f636f6e7472616374506572666f726d616e636560581b6000908152600f85016020529190912054819060f81c60058111156125a957fe5b60058111156125b457fe5b81526b465f7374617475734461746560a01b6000908152600f850160208181526040808420548286015272465f6e6f6e506572666f726d696e674461746560681b845282825280842054818601526d465f6d617475726974794461746560901b84528282528084205460608601526d465f65786572636973654461746560901b845282825280842054608086015270465f7465726d696e6174696f6e4461746560781b84528282528084205460a086015275465f6c617374436f75706f6e466978696e674461746560501b84528282528084205460c086015277465f6c6173744469766964656e64466978696e674461746560401b84528282528084205460e0860152721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b845282825280842054610100860152701197d858d8dc9d5959125b9d195c995cdd607a1b8452828252808420546101208601526b1197d999595058d8dc9d595960a21b84528282528084205461014086015274465f6e6f6d696e616c496e7465726573745261746560581b8452828252808420546101608601527f465f696e7465726573745363616c696e674d756c7469706c69657200000000008452828252808420546101808601527f465f6e6f74696f6e616c5363616c696e674d756c7469706c69657200000000008452828252808420546101a08601527f465f6e6578745072696e636970616c526564656d7074696f6e5061796d656e748452828252808420546101c08601526f1197d95e195c98da5cd9505b5bdd5b9d60821b8452828252808420546101e086015271465f65786572636973655175616e7469747960701b84528282528084205461020086015269465f7175616e7469747960b01b845282825280842054610220860152721197d8dbdd5c1bdb905b5bdd5b9d119a5e1959606a1b8452828252808420546102408601526d232fb6b0b933b4b72330b1ba37b960911b84528282528084205461026086015271232fb0b2353ab9ba36b2b73a2330b1ba37b960711b845282825280842054610280860152761197d91a5d9a59195b9914185e5b595b9d105b5bdd5b9d604a1b8452828252808420546102a08601526b465f73706c6974526174696f60a01b84529190529020546102c0909101529050919050565b6129308272636f6e7472616374506572666f726d616e636560681b60f88460000151600581111561292657fe5b60ff16901b61393d565b61294f82697374617475734461746560b01b836020015160001b61393d565b61297582706e6f6e506572666f726d696e674461746560781b836040015160001b61393d565b612996826b6d617475726974794461746560a01b836060015160001b61393d565b6129b7826b65786572636973654461746560a01b836080015160001b61393d565b6129db826e7465726d696e6174696f6e4461746560881b8360a0015160001b61393d565b612a0482736c617374436f75706f6e466978696e674461746560601b8360c0015160001b61393d565b612a2f82756c6173744469766964656e64466978696e674461746560501b8360e0015160001b61393d565b612a5682701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b83610100015160001b61393d565b612a7b826e1858d8dc9d5959125b9d195c995cdd608a1b83610120015160001b61393d565b612a9b82691999595058d8dc9d595960b21b83610140015160001b61393d565b612ac482726e6f6d696e616c496e7465726573745261746560681b83610160015160001b61393d565b612af3827834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b83610180015160001b61393d565b612b2282783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b836101a0015160001b61393d565b612b55827f6e6578745072696e636970616c526564656d7074696f6e5061796d656e740000836101c0015160001b61393d565b612b79826d195e195c98da5cd9505b5bdd5b9d60921b836101e0015160001b61393d565b612b9f826f65786572636973655175616e7469747960801b83610200015160001b61393d565b612bc5826f65786572636973655175616e7469747960801b83610200015160001b61393d565b612be382677175616e7469747960c01b83610220015160001b61393d565b612c0a827018dbdd5c1bdb905b5bdd5b9d119a5e1959607a1b83610240015160001b61393d565b612c2c826b36b0b933b4b72330b1ba37b960a11b83610260015160001b61393d565b612c52826f30b2353ab9ba36b2b73a2330b1ba37b960811b83610280015160001b61393d565b612c7d8274191a5d9a59195b9914185e5b595b9d105b5bdd5b9d605a1b836102a0015160001b61393d565b612c9d826973706c6974526174696f60b01b836102c0015160001b61393d565b5050565b606080826002016002015467ffffffffffffffff81118015612cc257600080fd5b50604051908082528060200260200182016040528015612cec578160200160208202803683370190505b50905060005b6004840154811015612d305760008181526003850160205260409020548251839083908110612d1d57fe5b6020908102919091010152600101612cf2565b5092915050565b6000908152600f91909101602052604090205490565b3390565b6000808084602001516005811115612d6557fe5b1415612d7f578351612d78908490613973565b9050610a28565b600184602001516005811115612d9157fe5b1415612daf578351612d7890612da8906007613988565b8490613973565b600284602001516005811115612dc157fe5b1415612dd4578351612d789084906139e1565b600384602001516005811115612de657fe5b1415612e04578351612d7890612dfd906003613988565b84906139e1565b600484602001516005811115612e1657fe5b1415612e2d578351612d7890612dfd906006613988565b600584602001516005811115612e3f57fe5b1415612e52578351612d78908490613a5d565b60405162461bcd60e51b81526004016107d390615081565b612e998274465f636f6e7472616374506572666f726d616e636560581b60f88460000151600581111561292657fe5b612eba826b465f7374617475734461746560a01b836020015160001b61393d565b612ee28272465f6e6f6e506572666f726d696e674461746560681b836040015160001b61393d565b612f05826d465f6d617475726974794461746560901b836060015160001b61393d565b612f28826d465f65786572636973654461746560901b836080015160001b61393d565b612f4e8270465f7465726d696e6174696f6e4461746560781b8360a0015160001b61393d565b612f798275465f6c617374436f75706f6e466978696e674461746560501b8360c0015160001b61393d565b612fa68277465f6c6173744469766964656e64466978696e674461746560401b8360e0015160001b61393d565b612fcf82721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b83610100015160001b61393d565b612ff682701197d858d8dc9d5959125b9d195c995cdd607a1b83610120015160001b61393d565b613018826b1197d999595058d8dc9d595960a21b83610140015160001b61393d565b6130438274465f6e6f6d696e616c496e7465726573745261746560581b83610160015160001b61393d565b613076827f465f696e7465726573745363616c696e674d756c7469706c696572000000000083610180015160001b61393d565b6130a9827f465f6e6f74696f6e616c5363616c696e674d756c7469706c6965720000000000836101a0015160001b61393d565b6130dc827f465f6e6578745072696e636970616c526564656d7074696f6e5061796d656e74836101c0015160001b61393d565b613102826f1197d95e195c98da5cd9505b5bdd5b9d60821b836101e0015160001b61393d565b61312a8271465f65786572636973655175616e7469747960701b83610200015160001b61393d565b6131528271465f65786572636973655175616e7469747960701b83610200015160001b61393d565b6131728269465f7175616e7469747960b01b83610220015160001b61393d565b61319b82721197d8dbdd5c1bdb905b5bdd5b9d119a5e1959606a1b83610240015160001b61393d565b6131bf826d232fb6b0b933b4b72330b1ba37b960911b83610260015160001b61393d565b6131e78271232fb0b2353ab9ba36b2b73a2330b1ba37b960711b83610280015160001b61393d565b61321482761197d91a5d9a59195b9914185e5b595b9d105b5bdd5b9d604a1b836102a0015160001b61393d565b612c9d826b465f73706c6974526174696f60a01b836102c0015160001b61393d565b6000818152600160205260408120819061324e613dcf565b6040516307c055c760e31b8152732Ba32F3baaE4cbb697d7c495E7F6640590c21D9c90633e02ae3890613285908590600401614cf6565b6107206040518083038186803b15801561329e57600080fd5b505af41580156132b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d69190614506565b825460116000818152600286016020526040808220549051631a53275160e11b8152949550909384936001938593849361337e9361010090046001600160a01b0316926334a64ea29261332e928c9290600401615503565b60206040518083038186803b15801561334657600080fd5b505afa15801561335a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e9919061422e565b91509150836000148061339057508381105b806133b4575080841480156133b457506133a9856115af565b6133b2836115af565b105b156133c0578093508194505b5050845460126000818152600288016020526040808220549051631a53275160e11b815291938493613411936101009092046001600160a01b0316926334a64ea29261332e928c9291600401615503565b91509150836000148061342d5750801580159061342d57508381105b8061345c5750801580159061344157508084145b801561345c5750613451856115af565b61345a836115af565b105b15613468578093508194505b5050845460136000818152600288016020526040808220549051631a53275160e11b8152919384936134b9936101009092046001600160a01b0316926334a64ea29261332e928c9291600401615503565b9150915083600014806134d5575080158015906134d557508381105b80613504575080158015906134e957508084145b801561350457506134f9856115af565b613502836115af565b105b15613510578093508194505b5050845460156000818152600288016020526040808220549051631a53275160e11b815291938493613561936101009092046001600160a01b0316926334a64ea29261332e928c9291600401615503565b91509150836000148061357d5750801580159061357d57508381105b806135ac5750801580159061359157508084145b80156135ac57506135a1856115af565b6135aa836115af565b105b156135b8578093508194505b5050845460196000818152600288016020526040808220549051631a53275160e11b815291938493613609936101009092046001600160a01b0316926334a64ea29261332e928c9291600401615503565b9150915083600014806136255750801580159061362557508381105b806136545750801580159061363957508084145b80156136545750613649856115af565b613652836115af565b105b15613660578093508194505b505084546007860154604051630e16292560e41b815260009283926136a4926101009092046001600160a01b03169163e16292509161332e918b91906004016154e6565b9150915083600014806136c0575080158015906136c057508381105b806136ef575080158015906136d457508084145b80156136ef57506136e4856115af565b6136ed836115af565b105b156136ff57809350819450600092505b505061370b8383611d44565b9650945050505050915091565b6000878152600160205260409020805460ff16156137485760405162461bcd60e51b81526004016107d390614f3c565b6001600160a01b03831660009081526002602052604090205460ff1615156001146137855760405162461bcd60e51b81526004016107d390615038565b805485516008830180546001600160a01b03199081166001600160a01b0393841617909155602088015160098501805483169184169190911790556040880151600a8501805483169184169190911790556060880151600b85018054831691841691909117905560ff199092166001908117610100600160a81b031916610100888416021784558301805490921690851617905561382381886128f9565b61382d8188612e6a565b6138378187613a84565b6001600160a01b03821615613850576138508883613aec565b7f5e73a3e4a3f69f1056f05ffd00ff11bf3835158ba0ebd5ad3b994065fcd896468860405161387f9190614cf6565b60405180910390a15050505050505050565b600072636f6e7472616374506572666f726d616e636560681b8214156138e2575072636f6e7472616374506572666f726d616e636560681b6000908152600f8301602052604090205460f81c610a2b565b74465f636f6e7472616374506572666f726d616e636560581b821415613935575074465f636f6e7472616374506572666f726d616e636560581b6000908152600f8301602052604090205460f81c610a2b565b506000610a2b565b6000828152600f8401602052604090205481141561395a5761396e565b6000828152600f8401602052604090208190555b505050565b620151808102820182811015610a2b57600080fd5b60008261399757506000610a2b565b828202828482816139a457fe5b0414610a285760405162461bcd60e51b81526004018080602001828103825260218152602001806157576021913960400191505060405180910390fd5b60008080806139f562015180875b04613b63565b600c918801600019810183810494909401965094509250900660010191506000613a1f8484613bf9565b905080821115613a2d578091505b62015180870662015180613a42868686613c7f565b0201945086851015613a5357600080fd5b5050505092915050565b6000808080613a6f62015180876139ef565b9187019450925090506000613a1f8484613bf9565b60005b815181101561396e576000801b828281518110613aa057fe5b60200260200101511415613ab35761396e565b818181518110613abf57fe5b60209081029190910181015160008381526003860190925260409091205560010160048301819055613a87565b6000828152600160208181526040808420848052600d0182528084206001600160a01b0386168086529252808420805460ff19169093179092559051909184917face25d271ad11ee299595b3021629bae0349e370d7c2eb7c2dced6e4edb4786591613b5791614da6565b60405180910390a35050565b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f8460500281613bba57fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b60008160011480613c0a5750816003145b80613c155750816005145b80613c205750816007145b80613c2b5750816008145b80613c36575081600a145b80613c41575081600c145b15613c4e5750601f610a2b565b81600214613c5e5750601e610a2b565b613c6783613cfb565b613c7257601c613c75565b601d5b60ff169392505050565b60006107b2841015613c9057600080fd5b838383600062253d8c600460036064611324600c600d19890105890101050205600c80600d19870105600c02600287030361016f0281613ccc57fe5b0560046105b5600c600d1989010589016112c0010205617d4b8603010103039050809450505050509392505050565b600060048206158015613d1057506064820615155b8061086e57505061019090061590565b604080516102e081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516104008101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001613e90613f0a565b8152602001613e9d613f0a565b8152602001613eaa613f0a565b8152602001613eb7613f0a565b8152602001613ec4613f0a565b8152602001613ed1613f54565b8152602001613ede613f54565b8152602001613eeb613f54565b8152602001613ef8613f2d565b8152602001613f05613f2d565b905290565b6040805160608101909152600080825260208201905b8152600060209091015290565b60408051608081018252600080825260208201819052909182019081526020016000613f05565b60408051608081019091526000808252602082019081526020016000613f20565b60408051608081018252600080825260208201819052918101829052606081019190915290565b8035610871816156b2565b8051610871816156b2565b8035610871816156d5565b8051610871816156d5565b8035610871816156e2565b8051610871816156e2565b8035610871816156ef565b803561087181615709565b805161087181615709565b803561087181615716565b805161087181615716565b803561087181615723565b805161087181615723565b8051610871816156ef565b80356022811061087157600080fd5b6000608082840312156108e7578081fd5b600061072082840312156108e7578081fd5b600060808284031215614079578081fd5b6040516080810181811067ffffffffffffffff8211171561409657fe5b8060405250809150825181526020830151602082015260408301516140ba816156fc565b604082015260608301516140cd816156fc565b6060919091015292915050565b6000608082840312156140eb578081fd5b6040516080810181811067ffffffffffffffff8211171561410857fe5b8060405250809150825181526020830151614122816156ef565b60208201526040830151614135816156e2565b604082015260608301516140cd816156c7565b600060608284031215614159578081fd5b6040516060810181811067ffffffffffffffff8211171561417657fe5b8060405250809150825181526020830151614190816156ef565b602082015260408301516141a3816156c7565b6040919091015292915050565b60006102e082840312156108e7578081fd5b6000602082840312156141d3578081fd5b8135610a28816156b2565b6000602082840312156141ef578081fd5b8151610a28816156b2565b60006020828403121561420b578081fd5b8151610a28816156c7565b600060208284031215614227578081fd5b5035919050565b60006020828403121561423f578081fd5b5051919050565b60008060408385031215614258578081fd5b82359150602083013561426a816156b2565b809150509250929050565b60008060408385031215614287578182fd5b50508035926020909101359150565b6000806000606084860312156142aa578081fd5b505081359360208301359350604090920135919050565b6000806000606084860312156142d5578081fd5b8335925060208401356001600160e01b0319811681146142f3578182fd5b91506040840135614303816156b2565b809150509250925092565b6000806107408385031215614321578182fd5b823591506143328460208501614056565b90509250929050565b6000806000806000806000806000610b208a8c031215614359578687fd5b8935985061436a8b60208c01614056565b975061437a8b6107408c016141b0565b9650610a208a013567ffffffffffffffff80821115614397578687fd5b818c0191508c601f8301126143aa578687fd5b8135818111156143b8578788fd5b8d602080830285010111156143cb578788fd5b6020830198508097505050506143e58b610a408c01614045565b93506143f4610ac08b01613f9c565b9250614403610ae08b01613f9c565b9150614412610b008b01613f9c565b90509295985092959850929598565b6000806103008385031215614434578182fd5b8235915061433284602085016141b0565b600060208284031215614456578081fd5b610a2882614036565b60008060408385031215614471578182fd5b61447a83614036565b946020939093013593505050565b600060808284031215614499578081fd5b6040516080810181811067ffffffffffffffff821117156144b657fe5b60405282356144c4816156b2565b815260208301356144d4816156b2565b602082015260408301356144e7816156b2565b604082015260608301356144fa816156b2565b60608201529392505050565b60006107208284031215614518578081fd5b61452361040061566d565b61452c8361400a565b815261453a60208401613fd3565b602082015261454b60408401613ff4565b604082015261455c6060840161402b565b606082015261456d60808401613fbd565b608082015261457e60a08401613fd3565b60a082015261458f60c08401614020565b60c08201526145a060e08401613fa7565b60e08201526101006145b3818501613fa7565b9082015261012083810151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e08084015190820152610200808401519082015261022080840151908201526102408084015190820152610260808401519082015261028080840151908201526102a080840151908201526102c061465585828601614148565b9082015261032061466885858301614148565b6102e083015261038061467d86828701614148565b6103008401526103e061469287828801614148565b838501526146a4876104408801614148565b6103408501526146b8876104a088016140da565b6103608501526146cc8761052088016140da565b828501526146de876105a088016140da565b6103a08501526146f2876106208801614068565b6103c0850152614706876106a08801614068565b908401525090949350505050565b600060808284031215614725578081fd5b610a288383614068565b600060808284031215614740578081fd5b610a2883836140da565b60006060828403121561475b578081fd5b610a288383614148565b60006102e0808385031215614778578182fd5b6147818161566d565b905061478c83613fde565b81526020838101359082015260408084013590820152606080840135908201526080808401359082015260a0808401359082015260c0808401359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a080840135908201526101c080840135908201526101e08084013590820152610200808401359082015261022080840135908201526102408084013590820152610260808401359082015261028080840135908201526102a080840135908201526102c0928301359281019290925250919050565b600060208284031215614893578081fd5b815160ff81168114610a28578182fd5b6001600160a01b03169052565b600981106148ba57fe5b9052565b6148ba81615691565b6148ba8161569e565b600d81106148ba57fe5b601381106148ba57fe5b600481106148ba57fe5b602281106148ba57fe5b6149038282516148da565b602081015161491560208401826148be565b50604081015161492860408401826148d0565b50606081015161493b60608401826148c7565b50608081015161494e60808401826148b0565b5060a081015161496160a08401826148be565b5060c081015161497460c08401826148e4565b5060e081015161498760e08401826148a3565b506101008082015161499b828501826148a3565b505061012081810151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028080820151908301526102a080820151908301526102c080820151614a3f82850182614c45565b50506102e0810151610320614a5681850183614c45565b6103008301519150610380614a6d81860184614c45565b9083015191506103e090614a8385830184614c45565b6103408401519250614a99610440860184614c45565b6103608401519250614aaf6104a0860184614bd3565b8301519150614ac2610520850183614bd3565b6103a08301519150614ad86105a0850183614bd3565b6103c08301519150614aee610620850183614b4d565b820151905061396e6106a0840182614b4d565b80358252602081013560208301526040810135614b1d816156fc565b614b26816156a8565b60408301526060810135614b39816156fc565b614b42816156a8565b806060840152505050565b80518252602081015160208301526040810151614b69816156a8565b60408301526060810151614b42816156a8565b803582526020810135614b8e816156ef565b614b978161569e565b60208301526040810135614baa816156e2565b614bb381615691565b60408301526060810135614bc6816156c7565b8015156060840152505050565b805182526020810151614be58161569e565b60208301526040810151614bf881615691565b60408301526060908101511515910152565b803582526020810135614c1c816156ef565b614c258161569e565b60208301526040810135614c38816156c7565b8015156040840152505050565b805182526020810151614c578161569e565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015614ccf57835183529284019291840191600101614cb3565b50909695505050505050565b901515815260200190565b9115158252602082015260400190565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b9081526a19dc9858d954195c9a5bd960aa1b602082015260400190565b9081527019195b1a5b9c5d595b98de54195c9a5bd9607a1b602082015260400190565b908152706e6f6e506572666f726d696e674461746560781b602082015260400190565b90815272636f6e7472616374506572666f726d616e636560681b602082015260400190565b6001600160e01b031991909116815260200190565b60408101614dc982856148ee565b8260208301529392505050565b6020808252603e908201527f417373657452656769737472792e736574436f756e746572706172747942656e60408201527f65666963696172793a20454e5452595f444f45535f4e4f545f45584953540000606082015260800190565b6020808252603d908201527f417373657452656769737472792e736574436f756e746572706172747942656e60408201527f65666963696172793a20554e415554484f52495a45445f53454e444552000000606082015260800190565b60208082526039908201527f417373657452656769737472792e736574436f756e74657270617274794f626c60408201527f69676f723a20554e415554484f52495a45445f53454e44455200000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c2e6973417574686f72697a65643a20554e415560408201526e2a2427a924ad22a22fa9a2a72222a960891b606082015260800190565b6020808252602b908201527f4261736552656769737472792e73657441737365743a2041535345545f414c5260408201526a454144595f45584953545360a81b606082015260800190565b60208082526034908201527f4261736552656769737472792e6f6e6c79417070726f7665644163746f72733a604082015273102aa720aaaa2427a924ad22a22fa9a2a72222a960611b606082015260800190565b60208082526038908201527f417373657452656769737472792e73657443726561746f7242656e656669636960408201527f6172793a20554e415554484f52495a45445f53454e4445520000000000000000606082015260800190565b60208082526029908201527f4261736552656769737472792e73657441737365743a204143544f525f4e4f5460408201526817d054141493d5915160ba1b606082015260800190565b60208082526037908201527f506572696f645574696c732e67657454696d657374616d70506c75735065726960408201527f6f643a204154545249425554455f4e4f545f464f554e44000000000000000000606082015260800190565b60208082526039908201527f417373657452656769737472792e73657443726561746f7242656e656669636960408201527f6172793a20454e5452595f444f45535f4e4f545f455849535400000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c2e7265766f6b654163636573733a20554e415560408201526e2a2427a924ad22a22fa9a2a72222a960891b606082015260800190565b60208082526034908201527f417373657452656769737472792e73657443726561746f724f626c69676f723a604082015273102aa720aaaa2427a924ad22a22fa9a2a72222a960611b606082015260800190565b60208082526042908201527f41737365744163746f722e6765744e657874556e6465726c79696e674576656e60408201527f743a20554e4445524c59494e475f41535345545f444f45535f4e4f545f45584960608201526114d560f21b608082015260a00190565b81516001600160a01b039081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b918252602082015260400190565b82815261074081016152ac602083016152a785613fff565b6148da565b6152b860208401613fc8565b6152c560408401826148be565b506152d260408401613fe9565b6152df60608401826148d0565b506152ec60608401613fde565b6152f960808401826148c7565b5061530660808401613fb2565b61531360a08401826148b0565b5061532060a08401613fc8565b61532d60c08401826148be565b5061533a60c08401614015565b61534760e08401826148e4565b5061535460e08401613f9c565b610100615363818501836148a3565b61536e818601613f9c565b915050610120615380818501836148a3565b6101409150808501358285015250610160818501358185015261018091508085013582850152506101a081850135818501526101c091508085013582850152506101e08185013581850152610200915080850135828501525061022081850135818501526102409150808501358285015250610260818501358185015261028091508085013582850152506102a081850135818501526102c091508085013582850152506154346102e08401828601614c0a565b5061544761034083016103208501614c0a565b6154596103a083016103808501614c0a565b61546b61040083016103e08501614c0a565b61547d61046083016104408501614c0a565b61548f6104c083016104a08501614b7c565b6154a161054083016105208501614b7c565b6154b36105c083016105a08501614b7c565b6154c561064083016106208501614b01565b610b5d6106c083016106a08501614b01565b6107208101610a2b82846148f8565b61074081016154f582856148f8565b826107208301529392505050565b610760810161551282866148f8565b836107208301526155276107408301846148ee565b949350505050565b60808101610a2b8284614b4d565b60808101610a2b8284614bd3565b60608101610a2b8284614c45565b60006102e08201905061556d8284516148c7565b6020838101519083015260408084015190830152606080840151908301526080808401519083015260a0808401519083015260c0808401519083015260e08084015190830152610100808401519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151908301526102c092830151929091019190915290565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561568957fe5b604052919050565b6002811061569b57fe5b50565b6006811061569b57fe5b6005811061569b57fe5b6001600160a01b038116811461569b57600080fd5b801515811461569b57600080fd5b6009811061569b57600080fd5b6002811061569b57600080fd5b6006811061569b57600080fd5b6005811061569b57600080fd5b600d811061569b57600080fd5b6013811061569b57600080fd5b6004811061569b57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220b7ea948ee3915ae32ec07ef2e6c3cc4d089f863d04a1d7fd509ac8bf6a3f6d9964736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030c5760003560e01c8063a17b75b51161019d578063d51dc3dc116100e9578063e8f7ca3e116100a2578063ee43eda11161007c578063ee43eda11461072e578063f2fde38b14610741578063f52f84e114610754578063f7f729ad146107675761030c565b8063e8f7ca3e146106f5578063eb01255914610708578063ecef55771461071b5761030c565b8063d51dc3dc14610676578063d981e77314610689578063de07a1731461069c578063e05a66e0146106af578063e50e0ef7146106c2578063e7dc3188146106e25761030c565b8063ba4d2d2811610156578063c3b6e7c211610130578063c3b6e7c21461061d578063c6d2d66e14610630578063ccfc347e14610643578063cf5aed12146106565761030c565b8063ba4d2d28146105c9578063bc6a7d76146105ea578063bd1f0a6c1461060a5761030c565b8063a17b75b51461054a578063b02ca0c01461055d578063b0b4888f14610570578063b3c45ebe14610590578063b461dd4f146105a3578063b8282041146105b65761030c565b80633adc277a1161025c5780636fe55baa1161021557806375e86ae4116101ef57806375e86ae4146104fc578063811322fb1461050f578063842962d5146105225780638da5cb5b146105355761030c565b80636fe55baa146104b3578063715018a6146104d357806372540003146104db5761030c565b80633adc277a1461043a578063512872f41461045a5780636031a0941461046d578063606aa07e146104805780636a899b9b146104805780636be39bda146104935761030c565b80631b126815116102c95780633549d08d116102a35780633549d08d146103ee57806337462dba1461040157806339262e87146104145780633a60d6fe146104275761030c565b80631b126815146103a857806327258b22146103c857806328e0f8a9146103db5761030c565b806303a81a2a1461031157806309648a9d146103265780630c5b75a41461034f5780630d62037a1461036f578063135b9f4d146103825780631717e86714610395575b600080fd5b61032461031f366004614246565b61077a565b005b610339610334366004614216565b61084f565b6040516103469190615559565b60405180910390f35b61036261035d366004614216565b610876565b6040516103469190614cf6565b61032461037d366004614246565b6108ed565b610362610390366004614275565b610992565b6103246103a33660046142c1565b610a31565b6103bb6103b63660046142c1565b610ae7565b6040516103469190614cdb565b6103bb6103d6366004614216565b610b64565b6103626103e9366004614216565b610b79565b6103246103fc366004614246565b610b8e565b61033961040f366004614216565b610c69565b6103246104223660046142c1565b610c88565b610324610435366004614421565b610d2d565b61044d610448366004614216565b610ded565b6040516103469190614c97565b610324610468366004614246565b610e07565b61032461047b366004614246565b610ece565b61036261048e366004614275565b610fa9565b6104a66104a1366004614216565b610fc1565b60405161034691906154d7565b6104c66104c1366004614275565b61105f565b604051610346919061554b565b6103246110fe565b6104ee6104e9366004614216565b6111b2565b604051610346929190614dbb565b61036261050a366004614216565b6111db565b61036261051d366004614445565b6115af565b610324610530366004614421565b6115bd565b61053d611670565b6040516103469190614c69565b610362610558366004614216565b61167f565b61036261056b366004614275565b611694565b61058361057e366004614275565b6116b5565b604051610346919061553d565b61053d61059e366004614216565b611754565b6103626105b1366004614275565b611773565b6103626105c4366004614216565b6117b9565b6105dc6105d7366004614275565b61181d565b604051610346929190614ce6565b6105fd6105f8366004614275565b611847565b604051610346919061552f565b610324610618366004614246565b6118e6565b61036261062b366004614216565b61197e565b61032461063e36600461433b565b611ab7565b6103bb6106513660046141c2565b611bc6565b610669610664366004614275565b611bdb565b604051610346919061565f565b610362610684366004614275565b611bf3565b610324610697366004614275565b611c39565b6103246106aa366004614296565b611ca8565b6103626106bd36600461445f565b611d44565b6106d56106d0366004614216565b611d62565b6040516103469190615246565b6103246106f03660046141c2565b611dc0565b6103bb610703366004614246565b611e4e565b61053d610716366004614275565b611e84565b610669610729366004614275565b611f1a565b61053d61073c366004614216565b611fb0565b61032461074f3660046141c2565b611fd0565b610362610762366004614216565b6120da565b61032461077536600461430e565b6120ef565b6000828152600160208190526040909120015482906001600160a01b03163314806107b757506107b7816000356001600160e01b03191633610ae7565b6107dc5760405162461bcd60e51b81526004016107d390614eed565b60405180910390fd5b6000838152600160208190526040918290200180546001600160a01b038581166001600160a01b0319831617909255915191169084907f6baefd4565218ab73b43cb6b1019ca3a06161c4fcaef25cd665aacddabc44a20906108419084908790614c7d565b60405180910390a250505050565b610857613d20565b600082815260016020526040902061086e906121ef565b90505b919050565b60008181526001602081905260408220015482906001600160a01b03163314806108b257506108b2816000356001600160e01b03191633610ae7565b6108ce5760405162461bcd60e51b81526004016107d390614eed565b6000838152600160205260408120600601805491905591505b50919050565b610904826000356001600160e01b03191633610ae7565b6109205760405162461bcd60e51b81526004016107d39061518a565b6000828152600160205260409081902060080180546001600160a01b038481166001600160a01b031983161790925591519116907fa7f38588f02421aa73988ed359aee27363c896e7cc3b6e634e4357f7ee408e259061098590859084908690614cff565b60405180910390a1505050565b600082815260016020526040808220905163aaaf608760e01b815273__$7d2c2eb2ff29afdcefe0bc8b190fcef71d$__9163aaaf6087916109d891908690600401615281565b60206040518083038186803b1580156109f057600080fd5b505af4158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a28919061422e565b90505b92915050565b610a48836000356001600160e01b03191633610ae7565b610a645760405162461bcd60e51b81526004016107d39061513b565b60008381526001602081815260408084206001600160e01b031987168552600d0182528084206001600160a01b038616808652925292839020805460ff1916909217909155905184907face25d271ad11ee299595b3021629bae0349e370d7c2eb7c2dced6e4edb4786590610ada908690614da6565b60405180910390a3505050565b60008381526001602090815260408083206001600160e01b031986168452600d0182528083206001600160a01b038516845290915281205460ff1680610b5a57506000848152600160209081526040808320838052600d0182528083206001600160a01b038616845290915290205460ff165b90505b9392505050565b60009081526001602052604090205460ff1690565b60009081526001602052604090206005015490565b6000828152600160205260409020600b01546001600160a01b031680610bc65760405162461bcd60e51b81526004016107d390614dd6565b336001600160a01b0382161480610bef5750610bef836000356001600160e01b03191633610ae7565b610c0b5760405162461bcd60e51b81526004016107d390614e33565b60008381526001602052604090819020600b0180546001600160a01b0319166001600160a01b038516179055517f66808241563a07166fd47b523591fa432148706dc0ddd255d49b69e71f1721ce9061098590859084908690614cff565b610c71613d20565b600082815260016020526040902061086e9061255c565b610c9f836000356001600160e01b03191633610ae7565b610cbb5760405162461bcd60e51b81526004016107d39061513b565b60008381526001602090815260408083206001600160e01b031986168452600d0182528083206001600160a01b038516808552925291829020805460ff19169055905184907f42b1b0e7392ad606bb4f5b003296aba62f16e43aa9372f1f40c1522fa2655ffa90610ada908690614da6565b6000828152600160208190526040909120015482906001600160a01b0316331480610d6a5750610d6a816000356001600160e01b03191633610ae7565b610d865760405162461bcd60e51b81526004016107d390614eed565b610dac610d9836849003840184614765565b6000858152600160205260409020906128f9565b827fad3970329ffaec63d947adc6077368479a4be7f09f2e7ba1b13852f8405b3ec68360200135604051610de09190614cf6565b60405180910390a2505050565b600081815260016020526040902060609061086e90612ca1565b6000828152600160208190526040909120015482906001600160a01b0316331480610e445750610e44816000356001600160e01b03191633610ae7565b610e605760405162461bcd60e51b81526004016107d390614eed565b6000838152600160205260409081902080546001600160a01b03858116610100908102610100600160a81b03198416179093559251919004919091169084907fdaa92ae0693b6616f14ef5db4b7ee053d3234c0d03f7a1885589c6a6c2c75bdb906108419084908790614c7d565b6000828152600160205260409020600901546001600160a01b031680610f065760405162461bcd60e51b81526004016107d3906150de565b336001600160a01b0382161480610f2f5750610f2f836000356001600160e01b03191633610ae7565b610f4b5760405162461bcd60e51b81526004016107d390614fdb565b6000838152600160205260409081902060090180546001600160a01b0319166001600160a01b038516179055517f66808241563a07166fd47b523591fa432148706dc0ddd255d49b69e71f1721ce9061098590859084908690614cff565b6000828152600160205260408120610a289083612d37565b610fc9613dcf565b6000828152600160205260409081902090516307c055c760e31b815273__$7d2c2eb2ff29afdcefe0bc8b190fcef71d$__91633e02ae389161100e9190600401614cf6565b6107206040518083038186803b15801561102757600080fd5b505af415801561103b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086e9190614506565b611067613f0a565b6000838152600160205260409081902090516305c6b05560e41b815273__$7d2c2eb2ff29afdcefe0bc8b190fcef71d$__91635c6b0550916110ae91908690600401615281565b60606040518083038186803b1580156110c657600080fd5b505af41580156110da573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a28919061474a565b611106612d4d565b6000546001600160a01b03908116911614611168576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000808060f884901c60218111156111c657fe5b92505067ffffffffffffffff83169050915091565b60006111e5613f2d565b6112058372636f6e74726163745265666572656e63655f3160681b611847565b805190915015801590611227575060038160600151600481111561122557fe5b145b156115a65780516020820151604051631392c59160e11b81526001600160a01b038216906327258b229061125f908590600401614cf6565b60206040518083038186803b15801561127757600080fd5b505afa15801561128b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112af91906141fa565b6112cb5760405162461bcd60e51b81526004016107d3906151de565b60006112e6866b65786572636973654461746560a01b610fa9565b9050600061130d877518dc99591a5d115d995b9d151e5c1950dbdd995c995960521b611f1a565b60ff16600581111561131b57fe5b90506000836001600160a01b031663cf5aed12866040518263ffffffff1660e01b815260040161134b9190614d81565b60206040518083038186803b15801561136357600080fd5b505afa158015611377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139b9190614882565b60ff1660058111156113a957fe5b90506000846001600160a01b031663606aa07e876040518263ffffffff1660e01b81526004016113d99190614d5e565b60206040518083038186803b1580156113f157600080fd5b505afa158015611405573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611429919061422e565b9050831561144a5761143c601a42611d44565b975050505050505050610871565b600083600581111561145857fe5b1415801561147b575082600581111561146d57fe5b82600581111561147957fe5b145b1561159f57600182600581111561148e57fe5b141561149f5761143c601982611d44565b60028260058111156114ad57fe5b1415611557576114bb613f0a565b6040516337f2add560e11b81526001600160a01b03871690636fe55baa906114e7908a90600401614d1e565b60606040518083038186803b1580156114ff57600080fd5b505afa158015611513573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611537919061474a565b905061154860196106bd8385612d51565b98505050505050505050610871565b600382600581111561156557fe5b141561159f57611573613f0a565b6040516337f2add560e11b81526001600160a01b03871690636fe55baa906114e7908a90600401614d3b565b5050505050505b50600092915050565b600081602181111561086e57fe5b6000828152600160208190526040909120015482906001600160a01b03163314806115fa57506115fa816000356001600160e01b03191633610ae7565b6116165760405162461bcd60e51b81526004016107d390614eed565b61163c61162836849003840184614765565b600085815260016020526040902090612e6a565b827f0c71209d22d4c70a40140b94deee55f1f54a9353e3d5d5a4ddfb45fcddcf720f8360200135604051610de09190614cf6565b6000546001600160a01b031690565b60009081526001602052604090206004015490565b60009182526001602090815260408084209284526003909201905290205490565b6116bd613f54565b60008381526001602052604090819020905163063a179b60e21b815273__$7d2c2eb2ff29afdcefe0bc8b190fcef71d$__916318e85e6c9161170491908690600401615281565b60806040518083038186803b15801561171c57600080fd5b505af4158015611730573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a28919061472f565b600090815260016020819052604090912001546001600160a01b031690565b600082815260016020526040808220905163e0660e8160e01b815273__$7d2c2eb2ff29afdcefe0bc8b190fcef71d$__9163e0660e81916109d891908690600401615281565b6000818152600160205260408120600481015415611809576004810154600582015414156117eb575060009050610871565b60058101546000908152600390910160205260409020549050610871565b600061181484613236565b50949350505050565b6000918252600160208181526040808520938552601090930190529120805491015460ff90911691565b61184f613f2d565b60008381526001602052604090819020905163799b1f8160e01b815273__$7d2c2eb2ff29afdcefe0bc8b190fcef71d$__9163799b1f819161189691908690600401615281565b60806040518083038186803b1580156118ae57600080fd5b505af41580156118c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190614714565b6118fd826000356001600160e01b03191633610ae7565b6119195760405162461bcd60e51b81526004016107d390614e90565b60008281526001602052604090819020600a0180546001600160a01b038481166001600160a01b031983161790925591519116907fa7f38588f02421aa73988ed359aee27363c896e7cc3b6e634e4357f7ee408e259061098590859084908690614cff565b60008181526001602081905260408220015482906001600160a01b03163314806119ba57506119ba816000356001600160e01b03191633610ae7565b6119d65760405162461bcd60e51b81526004016107d390614eed565b6000838152600160205260409020600481015415611a305760058101546000818152600383016020526040902054600483015490911415611a1d5750600092506108e79050565b60059091018054600101905591506108e7565b600080611a3c86613236565b909250905081611a535750600093506108e7915050565b600080611a5f846111b2565b909250905060018315151415611aa35780600286016000846021811115611a8257fe5b6021811115611a8d57fe5b8152602081019190915260400160002055611aab565b600785018490555b50919695505050505050565b3360009081526002602052604090205460ff16611ae65760405162461bcd60e51b81526004016107d390614f87565b611b4489611af9368a90038a018a614765565b888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611b3c9250505036899003890189614488565b878787613718565b600089815260016020526040908190209051635445aa9b60e01b815273__$7d2c2eb2ff29afdcefe0bc8b190fcef71d$__91635445aa9b91611b8b91908c9060040161528f565b60006040518083038186803b158015611ba357600080fd5b505af4158015611bb7573d6000803e3d6000fd5b50505050505050505050505050565b60026020526000908152604090205460ff1681565b6000828152600160205260408120610a289083613891565b600082815260016020526040808220905163ada653a360e01b815273__$7d2c2eb2ff29afdcefe0bc8b190fcef71d$__9163ada653a3916109d891908690600401615281565b6000828152600160208190526040909120015482906001600160a01b0316331480611c765750611c76816000356001600160e01b03191633610ae7565b611c925760405162461bcd60e51b81526004016107d390614eed565b5060009182526001602052604090912060060155565b6000838152600160208190526040909120015483906001600160a01b0316331480611ce55750611ce5816000356001600160e01b03191633610ae7565b611d015760405162461bcd60e51b81526004016107d390614eed565b50604080518082018252600180825260208083019485526000968752818152838720958752601090950190945293209251835460ff191690151517835551910155565b60008160f8846021811115611d5557fe5b60ff16901b179392505050565b611d6a613f75565b50600090815260016020908152604091829020825160808101845260088201546001600160a01b0390811682526009830154811693820193909352600a820154831693810193909352600b015416606082015290565b611dc8612d4d565b6000546001600160a01b03908116911614611e2a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6000918252600160209081526040808420848052600d0182528084206001600160a01b0393909316845291905290205460ff1690565b60008281526001602052604080822090516359603f8160e01b815273__$7d2c2eb2ff29afdcefe0bc8b190fcef71d$__916359603f8191611eca91908690600401615281565b60206040518083038186803b158015611ee257600080fd5b505af4158015611ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2891906141de565b6000828152600160205260408082209051633438aa2360e21b815273__$7d2c2eb2ff29afdcefe0bc8b190fcef71d$__9163d0e2a88c91611f6091908690600401615281565b60206040518083038186803b158015611f7857600080fd5b505af4158015611f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190614882565b60009081526001602052604090205461010090046001600160a01b031690565b611fd8612d4d565b6000546001600160a01b0390811691161461203a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661207f5760405162461bcd60e51b81526004018080602001828103825260268152602001806157316026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526001602052604090206006015490565b6000828152600160208190526040909120015482906001600160a01b031633148061212c575061212c816000356001600160e01b03191633610ae7565b6121485760405162461bcd60e51b81526004016107d390614eed565b600083815260016020526040908190209051635445aa9b60e01b815273__$7d2c2eb2ff29afdcefe0bc8b190fcef71d$$7d2c2eb2ff29afdcefe0bc8b190fcef71d$",
  "libraries": {
    "CERTFEncoder": "0x2Ba32F3baaE4cbb697d7c495E7F6640590c21D9c"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveActor(address)": {
        "details": "Can only be called by the owner of the contract.",
        "params": {
          "actor": "address of the actor"
        }
      },
      "getActor(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "address of the asset actor"
        }
      },
      "getEngine(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "address of the engine of the asset"
        }
      },
      "getEventAtIndex(bytes32,uint256)": {
        "params": {
          "assetId": "id of the asset",
          "index": "index of the event to return"
        },
        "returns": {
          "_0": "Event"
        }
      },
      "getFinalizedState(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "state of the asset"
        }
      },
      "getNextScheduleIndex(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "Index"
        }
      },
      "getNextScheduledEvent(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "event"
        }
      },
      "getOwnership(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "addresses of all owners of the asset"
        }
      },
      "getSchedule(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "the schedule"
        }
      },
      "getScheduleLength(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "Length of the schedule"
        }
      },
      "getState(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "state of the asset"
        }
      },
      "getTerms(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "terms of the asset"
        }
      },
      "grantAccess(bytes32,bytes4,address)": {
        "details": "Can only be called by an authorized account.",
        "params": {
          "account": "address of the account to grant access to",
          "assetId": "id of the asset",
          "methodSignature": "function / method signature (4 byte keccak256 hash of the method selector)"
        }
      },
      "hasAccess(bytes32,bytes4,address)": {
        "params": {
          "account": "address of the account for which to check access",
          "assetId": "id of the asset",
          "methodSignature": "function / method signature (4 byte keccak256 hash of the method selector)"
        },
        "returns": {
          "_0": "true if allowed access"
        }
      },
      "hasRootAccess(bytes32,address)": {
        "params": {
          "account": "address of the account for which to check root acccess",
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "true if has root access"
        }
      },
      "isEventSettled(bytes32,bytes32)": {
        "params": {
          "_event": "event (encoded)",
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "true if event was settled"
        }
      },
      "isRegistered(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "true if asset exist"
        }
      },
      "markEventAsSettled(bytes32,bytes32,int256)": {
        "details": "Can only be set by authorized account.",
        "params": {
          "_event": "event (encoded) to be marked as settled",
          "assetId": "id of the asset"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "popNextScheduledEvent(bytes32)": {
        "details": "Can only be updated by the assets actor or by an authorized account.",
        "params": {
          "assetId": "id of the asset"
        }
      },
      "registerAsset(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(bytes32,bytes32,uint8,uint8),(bytes32,bytes32,uint8,uint8)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32[],(address,address,address,address),address,address,address)": {
        "params": {
          "actor": "account which is allowed to update the asset state",
          "admin": "account which as admin rights (optional)",
          "engine": "ACTUS Engine of the asset",
          "ownership": "ownership of the asset",
          "schedule": "schedule of the asset",
          "state": "initial state of the asset",
          "terms": "asset specific terms (CERTFTerms)"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAccess(bytes32,bytes4,address)": {
        "details": "Can only be called by an authorized account.",
        "params": {
          "account": "address of the account to revoke access for",
          "assetId": "id of the asset",
          "methodSignature": "function / method signature (4 byte keccak256 hash of the method selector)"
        }
      },
      "setActor(bytes32,address)": {
        "params": {
          "actor": "address of the Actor contract",
          "assetId": "id of the asset"
        }
      },
      "setCounterpartyBeneficiary(bytes32,address)": {
        "details": "Can only be updated by the current counterparty beneficiary or by an authorized account.",
        "params": {
          "assetId": "id of the asset",
          "newCounterpartyBeneficiary": "address of the new beneficiary"
        }
      },
      "setCounterpartyObligor(bytes32,address)": {
        "details": "Can only be updated by an authorized account.",
        "params": {
          "assetId": "id of the asset",
          "newCounterpartyObligor": "address of the new counterparty obligor"
        }
      },
      "setCreatorBeneficiary(bytes32,address)": {
        "details": "Can only be updated by the current creator beneficiary or by an authorized account.",
        "params": {
          "assetId": "id of the asset",
          "newCreatorBeneficiary": "address of the new beneficiary"
        }
      },
      "setCreatorObligor(bytes32,address)": {
        "details": "Can only be updated by an authorized account.",
        "params": {
          "assetId": "id of the asset",
          "newCreatorObligor": "address of the new creator obligor"
        }
      },
      "setEngine(bytes32,address)": {
        "details": "Can only be set by authorized account.",
        "params": {
          "assetId": "id of the asset",
          "engine": "new engine address"
        }
      },
      "setFinalizedState(bytes32,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))": {
        "details": "Can only be updated by the assets actor or by an authorized account.",
        "params": {
          "assetId": "id of the asset",
          "state": "next state of the asset"
        }
      },
      "setState(bytes32,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))": {
        "details": "Can only be updated by the assets actor or by an authorized account.",
        "params": {
          "assetId": "id of the asset",
          "state": "next state of the asset"
        }
      },
      "setTerms(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(bytes32,bytes32,uint8,uint8),(bytes32,bytes32,uint8,uint8)))": {
        "details": "Can only be set by authorized account.",
        "params": {
          "assetId": "id of the asset",
          "terms": "new terms"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "CERTFRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveActor(address)": {
        "notice": "Approves the address of an actor contract e.g. for registering assets."
      },
      "getActor(bytes32)": {
        "notice": "Returns the address of the actor which is allowed to update the state of the asset."
      },
      "getEngine(bytes32)": {
        "notice": "Returns the address of a the ACTUS engine corresponding to the ContractType of an asset."
      },
      "getEpochOffset(uint8)": {
        "notice": "Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp"
      },
      "getEventAtIndex(bytes32,uint256)": {
        "notice": "Returns an event for a given position (index) in a schedule of a given asset."
      },
      "getFinalizedState(bytes32)": {
        "notice": "Returns the state of an asset."
      },
      "getNextScheduleIndex(bytes32)": {
        "notice": "Returns the index of the next event to be processed for a schedule of an asset."
      },
      "getNextScheduledEvent(bytes32)": {
        "notice": "Returns the next event to process."
      },
      "getNextUnderlyingEvent(bytes32)": {
        "notice": "If the underlying of the asset changes in performance to a covered performance, it returns the exerciseDate event."
      },
      "getOwnership(bytes32)": {
        "notice": "Retrieves the registered addresses of owners (creator, counterparty) of an asset."
      },
      "getSchedule(bytes32)": {
        "notice": "Convenience method for retrieving the entire schedule Not recommended to execute method on-chain (if schedule is too long the tx may run out of gas)"
      },
      "getScheduleLength(bytes32)": {
        "notice": "Returns the length of a schedule of a given asset."
      },
      "getState(bytes32)": {
        "notice": "Returns the state of an asset."
      },
      "getTerms(bytes32)": {
        "notice": "Returns the terms of an asset."
      },
      "grantAccess(bytes32,bytes4,address)": {
        "notice": "Grant access to an account to call a specific method on a specific asset."
      },
      "hasAccess(bytes32,bytes4,address)": {
        "notice": "Check whether an account is allowed to call a specific method on a specific asset."
      },
      "hasRootAccess(bytes32,address)": {
        "notice": "Check whether an account has root access for a specific asset."
      },
      "isEventSettled(bytes32,bytes32)": {
        "notice": "Returns true if an event of an assets schedule was settled"
      },
      "isRegistered(bytes32)": {
        "notice": "Returns if there is an asset registerd for a given assetId"
      },
      "markEventAsSettled(bytes32,bytes32,int256)": {
        "notice": "Mark an event as settled"
      },
      "popNextScheduledEvent(bytes32)": {
        "notice": "Increments the index of a schedule of an asset. (if max index is reached the index will be left unchanged)"
      },
      "registerAsset(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(bytes32,bytes32,uint8,uint8),(bytes32,bytes32,uint8,uint8)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32[],(address,address,address,address),address,address,address)": {
        "notice": "@param assetId id of the asset"
      },
      "revokeAccess(bytes32,bytes4,address)": {
        "notice": "Revoke access for an account to call a specific method on a specific asset."
      },
      "setActor(bytes32,address)": {
        "notice": "Set the address of the Actor contract which should be going forward."
      },
      "setCounterpartyBeneficiary(bytes32,address)": {
        "notice": "Updates the address of the default beneficiary of cashflows going to the counterparty."
      },
      "setCounterpartyObligor(bytes32,address)": {
        "notice": "Update the address of the counterparty which has to fulfill obligations for the counterparty of the asset."
      },
      "setCreatorBeneficiary(bytes32,address)": {
        "notice": "Update the address of the default beneficiary of cashflows going to the creator."
      },
      "setCreatorObligor(bytes32,address)": {
        "notice": "Update the address of the obligor which has to fulfill obligations for the creator of the asset."
      },
      "setEngine(bytes32,address)": {
        "notice": "Set the engine address which should be used for the asset going forward."
      },
      "setFinalizedState(bytes32,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))": {
        "notice": "Sets next finalized state of an asset."
      },
      "setState(bytes32,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))": {
        "notice": "Sets next state of an asset."
      },
      "setTerms(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(bytes32,bytes32,uint8,uint8),(bytes32,bytes32,uint8,uint8)))": {
        "notice": "Set the terms of the asset"
      }
    },
    "notice": "Registry for ACTUS Protocol assets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23517,
        "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
        "label": "assets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Asset)23506_storage)"
      },
      {
        "astId": 23215,
        "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
        "label": "approvedActors",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(EventType)1645": {
        "encoding": "inplace",
        "label": "enum EventType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(Asset)23506_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)23506_storage"
      },
      "t_mapping(t_bytes32,t_struct(Settlement)23473_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Settlement)",
        "numberOfBytes": "32",
        "value": "t_struct(Settlement)23473_storage"
      },
      "t_mapping(t_bytes4,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_enum(EventType)1645,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(EventType)1645",
        "label": "mapping(enum EventType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_int8,t_address)": {
        "encoding": "mapping",
        "key": "t_int8",
        "label": "mapping(int8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(Asset)23506_storage": {
        "encoding": "inplace",
        "label": "struct Asset",
        "members": [
          {
            "astId": 23475,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "isSet",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 23477,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "engine",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 23479,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "actor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 23481,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "schedule",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Schedule)26938_storage"
          },
          {
            "astId": 23483,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "ownership",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AssetOwnership)26921_storage"
          },
          {
            "astId": 23487,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "cashflowBeneficiaries",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_int8,t_address)"
          },
          {
            "astId": 23493,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "access",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_bytes4,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 23497,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "packedTerms",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 23501,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "packedState",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 23505,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "settlement",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_bytes32,t_struct(Settlement)23473_storage)"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(AssetOwnership)26921_storage": {
        "encoding": "inplace",
        "label": "struct AssetOwnership",
        "members": [
          {
            "astId": 26914,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "creatorObligor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 26916,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "creatorBeneficiary",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 26918,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "counterpartyObligor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 26920,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "counterpartyBeneficiary",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Schedule)26938_storage": {
        "encoding": "inplace",
        "label": "struct Schedule",
        "members": [
          {
            "astId": 26925,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "lastScheduleTimeOfCyclicEvent",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_enum(EventType)1645,t_uint256)"
          },
          {
            "astId": 26929,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "events",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_bytes32)"
          },
          {
            "astId": 26931,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 26933,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "nextScheduleIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 26935,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "pendingEvent",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 26937,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "lastNonCyclicEvent",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Settlement)23473_storage": {
        "encoding": "inplace",
        "label": "struct Settlement",
        "members": [
          {
            "astId": 23470,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "isSettled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 23472,
            "contract": "contracts/Core/CERTF/CERTFRegistry.sol:CERTFRegistry",
            "label": "payoff",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}