{
  "address": "0x0b9C0F3c5A35c804A5298F2f4875EC5E6BD8ac01",
  "abi": [],
  "transactionHash": "0xd31762f7f61cc5864c984a2aae837b2b8448d4e9d4ad4e3fd63b7411ee96c7c9",
  "receipt": {
    "to": null,
    "from": "0x6C51ECF949882c2183357B860FD82Dd4bb631840",
    "contractAddress": "0x0b9C0F3c5A35c804A5298F2f4875EC5E6BD8ac01",
    "transactionIndex": 0,
    "gasUsed": "2205714",
    "logsBloom": "0x
    "blockHash": "0x8fb3483f7ab3f343210b32b14ed81b4acf8a7bf8c501934d9b332d3212aa1532",
    "transactionHash": "0xd31762f7f61cc5864c984a2aae837b2b8448d4e9d4ad4e3fd63b7411ee96c7c9",
    "logs": [],
    "blockNumber": 43,
    "cumulativeGasUsed": "2205714",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9f67175c1fda3401d369e9c5efd0dbe5",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decodeAndGetCERTFTerms(Asset storage)\":{\"details\":\"Decode and loads CERTFTerms\"},\"encodeAndSetCERTFTerms(Asset storage,CERTFTerms)\":{\"details\":\"Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encodeAndSetCERTFTerms(Asset storage,CERTFTerms)\":{\"notice\":\"All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/CERTF/CERTFEncoder.sol\":\"CERTFEncoder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\n// enum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct State {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    // int256 delinquencyRate; not implemented\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionExercisePeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; // not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    int256 priceAtTerminationDate;\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\",\"keccak256\":\"0xdc4a72ed27c09ebbd6c76b352c94e3f2258ce309307a742b0436cf965d8acd27\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistryStorage.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"./State/StateEncoder.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\nstruct Settlement {\\n    bool isSettled;\\n    int256 payoff;\\n}\\n\\nstruct Asset {\\n    // boolean indicating that asset exists / is registered\\n    bool isSet;\\n    // address of the ACTUS Engine used for computing the State and the Payoff of the asset\\n    address engine;\\n    // address of the Asset Actor which is allowed to update the State of the asset\\n    address actor;\\n    // schedule of the asset\\n    Schedule schedule;\\n    // ownership of the asset\\n    AssetOwnership ownership;\\n    // granular ownership of the event type specific cashflows\\n    // per default owners are beneficiaries defined in ownership object\\n    // cashflow id (:= (EventType index + 1) * direction) => owner\\n    mapping (int8 => address) cashflowBeneficiaries;\\n    // method level access control - stores which address can a specific method\\n    // method signature => address => has access\\n    mapping (bytes4 => mapping (address => bool)) access;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedTerms;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedState;\\n    // indicates whether a specific event was settled\\n    mapping (bytes32 => Settlement) settlement;\\n}\\n\\n/**\\n * @title BaseRegistryStorage\\n * @notice Describes the storage of the AssetRegistry\\n * Contains getter and setter methods for encoding, decoding data to optimize gas cost.\\n * Circumvents storing default values by relying on the characteristic of mappings returning zero for not set values.\\n */\\nabstract contract BaseRegistryStorage {\\n\\n    using StateEncoder for Asset;\\n    using ScheduleEncoder for Asset;\\n\\n    // AssetId => Asset\\n    mapping (bytes32 => Asset) internal assets;\\n}\\n\",\"keccak256\":\"0xea52d9bb20a7b52f75fd27419e08201539bb402a9ce8a6da1ba5a2a585eedb87\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary ScheduleEncoder {\\n\\n    function encodeAndSetSchedule(Asset storage asset, bytes32[] memory schedule) internal {\\n        for (uint256 i = 0; i < schedule.length; i++) {\\n            if (schedule[i] == bytes32(0)) break;\\n            asset.schedule.events[i] = schedule[i];\\n            asset.schedule.length = i + 1;\\n        }\\n    }\\n\\n    function decodeAndGetSchedule(Asset storage asset) internal view returns (bytes32[] memory) {\\n        bytes32[] memory schedule = new bytes32[](asset.schedule.length);\\n\\n        for (uint256 i = 0; i < asset.schedule.length; i++) {\\n            schedule[i] = asset.schedule.events[i];\\n        }\\n\\n        return schedule;\\n    }\\n}\\n\",\"keccak256\":\"0x420da04c67322d387c9b0fbeb00accc59a63fb9c10cb7b4c21f955792c4ad236\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/State/StateEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary StateEncoder {\\n\\n    function storeInPackedState(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedState[attributeKey] == value) return;\\n        asset.packedState[attributeKey] = value;\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store State\\n     */\\n    function encodeAndSetState(Asset storage asset, State memory state) internal {\\n        storeInPackedState(asset, \\\"contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n\\n        storeInPackedState(asset, \\\"notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n        storeInPackedState(asset, \\\"exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store finalized State\\n     */\\n    function encodeAndSetFinalizedState(Asset storage asset, State memory state) internal {\\n        storeInPackedState(asset, \\\"F_contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"F_statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"F_nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"F_maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"F_exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"F_terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"F_lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"F_lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n\\n        storeInPackedState(asset, \\\"F_notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"F_accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"F_feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"F_nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"F_interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n        storeInPackedState(asset, \\\"F_exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"F_quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"F_couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"F_marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"F_adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"F_dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"F_splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Decode and load the State of the asset\\n     */\\n    function decodeAndGetState(Asset storage asset) internal view returns (State memory) {\\n        return State(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"statusDate\\\"]),\\n            uint256(asset.packedState[\\\"nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"lastCouponFixingDate\\\"]),\\n            uint256(asset.packedState[\\\"lastDividendFixingDate\\\"]),\\n\\n            int256(asset.packedState[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"nextPrincipalRedemptionPayment\\\"]),\\n            int256(asset.packedState[\\\"exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"exerciseQuantity\\\"]),\\n\\n            int256(asset.packedState[\\\"quantity\\\"]),\\n            int256(asset.packedState[\\\"couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"marginFactor\\\"]),\\n            int256(asset.packedState[\\\"adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"splitRatio\\\"])\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and load the finalized State of the asset\\n     */\\n    function decodeAndGetFinalizedState(Asset storage asset) internal view returns (State memory) {\\n        return State(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"F_statusDate\\\"]),\\n            uint256(asset.packedState[\\\"F_nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"F_exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"F_terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastCouponFixingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastDividendFixingDate\\\"]),\\n\\n            int256(asset.packedState[\\\"F_notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"F_accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"F_feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"F_nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"F_interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_nextPrincipalRedemptionPayment\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseQuantity\\\"]),\\n\\n            int256(asset.packedState[\\\"F_quantity\\\"]),\\n            int256(asset.packedState[\\\"F_couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"F_marginFactor\\\"]),\\n            int256(asset.packedState[\\\"F_adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"F_dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"F_splitRatio\\\"])\\n        );\\n    }\\n\\n\\n    function decodeAndGetEnumValueForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"F_contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetUIntValueForForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedState[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedState[attributeKey]);\\n    }\\n}\\n\",\"keccak256\":\"0x8ea00bd6be196c2c740901169da39a8a9224d4b3c8655408d4beb9dc6d20dc6f\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"},\"contracts/Core/CERTF/CERTFEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary CERTFEncoder {\\n\\n    function storeInPackedTerms(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedTerms[attributeKey] == value) return;\\n        asset.packedTerms[attributeKey] = value;\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\\n     * @notice All non zero values of the overwrittenTerms object are stored.\\n     * It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\\n     */\\n    function encodeAndSetCERTFTerms(Asset storage asset, CERTFTerms memory terms) external {\\n        storeInPackedTerms(\\n            asset,\\n            \\\"enums\\\",\\n            bytes32(uint256(uint8(terms.contractType))) << 248 |\\n            bytes32(uint256(uint8(terms.calendar))) << 240 |\\n            bytes32(uint256(uint8(terms.contractRole))) << 232 |\\n            bytes32(uint256(uint8(terms.dayCountConvention))) << 224 |\\n            bytes32(uint256(uint8(terms.businessDayConvention))) << 216 |\\n            bytes32(uint256(uint8(terms.endOfMonthConvention))) << 208 |\\n            bytes32(uint256(uint8(terms.couponType))) << 200\\n        );\\n\\n        storeInPackedTerms(asset, \\\"currency\\\", bytes32(uint256(terms.currency) << 96));\\n        storeInPackedTerms(asset, \\\"settlementCurrency\\\", bytes32(uint256(terms.settlementCurrency) << 96));\\n\\n        storeInPackedTerms(asset, \\\"contractDealDate\\\", bytes32(terms.contractDealDate));\\n        storeInPackedTerms(asset, \\\"statusDate\\\", bytes32(terms.statusDate));\\n        storeInPackedTerms(asset, \\\"initialExchangeDate\\\", bytes32(terms.initialExchangeDate));\\n        storeInPackedTerms(asset, \\\"maturityDate\\\", bytes32(terms.maturityDate));\\n        storeInPackedTerms(asset, \\\"issueDate\\\", bytes32(terms.issueDate));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfRedemption\\\", bytes32(terms.cycleAnchorDateOfRedemption));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfTermination\\\", bytes32(terms.cycleAnchorDateOfTermination));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfCoupon\\\", bytes32(terms.cycleAnchorDateOfCoupon));\\n\\n        storeInPackedTerms(asset, \\\"nominalPrice\\\", bytes32(terms.nominalPrice));\\n        storeInPackedTerms(asset, \\\"issuePrice\\\", bytes32(terms.issuePrice));\\n        storeInPackedTerms(asset, \\\"quantity\\\", bytes32(terms.quantity));\\n        storeInPackedTerms(asset, \\\"denominationRatio\\\", bytes32(terms.denominationRatio));\\n        storeInPackedTerms(asset, \\\"couponRate\\\", bytes32(terms.couponRate));\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"gracePeriod\\\",\\n            bytes32(uint256(terms.gracePeriod.i)) << 24 |\\n            bytes32(uint256(terms.gracePeriod.p)) << 16 |\\n            bytes32(uint256((terms.gracePeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"delinquencyPeriod\\\",\\n            bytes32(uint256(terms.delinquencyPeriod.i)) << 24 |\\n            bytes32(uint256(terms.delinquencyPeriod.p)) << 16 |\\n            bytes32(uint256((terms.delinquencyPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"settlementPeriod\\\",\\n            bytes32(uint256(terms.settlementPeriod.i)) << 24 |\\n            bytes32(uint256(terms.settlementPeriod.p)) << 16 |\\n            bytes32(uint256((terms.settlementPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"fixingPeriod\\\",\\n            bytes32(uint256(terms.fixingPeriod.i)) << 24 |\\n            bytes32(uint256(terms.fixingPeriod.p)) << 16 |\\n            bytes32(uint256((terms.fixingPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"redemptionExercisePeriod\\\",\\n            bytes32(uint256(terms.redemptionExercisePeriod.i)) << 24 |\\n            bytes32(uint256(terms.redemptionExercisePeriod.p)) << 16 |\\n            bytes32(uint256((terms.redemptionExercisePeriod.isSet) ? 1 : 0)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfRedemption\\\",\\n            bytes32(uint256(terms.cycleOfRedemption.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfRedemption.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfRedemption.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfRedemption.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfTermination\\\",\\n            bytes32(uint256(terms.cycleOfTermination.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfTermination.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfTermination.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfTermination.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfCoupon\\\",\\n            bytes32(uint256(terms.cycleOfCoupon.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfCoupon.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfCoupon.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfCoupon.isSet) ? 1 : 0))\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_object\\\",\\n            terms.contractReference_1.object\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_object2\\\",\\n            terms.contractReference_1.object2\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_type_role\\\",\\n            bytes32(uint256(terms.contractReference_1._type)) << 16 |\\n            bytes32(uint256(terms.contractReference_1.role)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_object\\\",\\n            terms.contractReference_2.object\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_object2\\\",\\n            terms.contractReference_2.object2\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_type_role\\\",\\n            bytes32(uint256(terms.contractReference_2._type)) << 16 |\\n            bytes32(uint256(terms.contractReference_2.role)) << 8\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and loads CERTFTerms\\n     */\\n    function decodeAndGetCERTFTerms(Asset storage asset) external view returns (CERTFTerms memory) {\\n        return CERTFTerms(\\n            ContractType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248))),\\n            Calendar(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240))),\\n            ContractRole(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232))),\\n            DayCountConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224))),\\n            BusinessDayConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216))),\\n            EndOfMonthConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208))),\\n            CouponType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200))),\\n\\n            address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96)),\\n            address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96)),\\n\\n            uint256(asset.packedTerms[\\\"contractDealDate\\\"]),\\n            uint256(asset.packedTerms[\\\"statusDate\\\"]),\\n            uint256(asset.packedTerms[\\\"initialExchangeDate\\\"]),\\n            uint256(asset.packedTerms[\\\"maturityDate\\\"]),\\n            uint256(asset.packedTerms[\\\"issueDate\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfRedemption\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfTermination\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfCoupon\\\"]),\\n\\n            int256(asset.packedTerms[\\\"nominalPrice\\\"]),\\n            int256(asset.packedTerms[\\\"issuePrice\\\"]),\\n            int256(asset.packedTerms[\\\"quantity\\\"]),\\n            int256(asset.packedTerms[\\\"denominationRatio\\\"]),\\n            int256(asset.packedTerms[\\\"couponRate\\\"]),\\n\\n            IP(\\n                uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"gracePeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"settlementPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"settlementPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"settlementPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"fixingPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"fixingPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"fixingPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"redemptionExercisePeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"redemptionExercisePeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"redemptionExercisePeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfRedemption\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfRedemption\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfRedemption\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfRedemption\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfTermination\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfTermination\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfTermination\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfTermination\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfCoupon\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfCoupon\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfCoupon\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfCoupon\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            ContractReference(\\n                asset.packedTerms[\\\"contractReference_1_object\\\"],\\n                asset.packedTerms[\\\"contractReference_1_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 8)))\\n            ),\\n            ContractReference(\\n                asset.packedTerms[\\\"contractReference_2_object\\\"],\\n                asset.packedTerms[\\\"contractReference_2_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 8)))\\n            )\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractType\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"calendar\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240));\\n        } else if (attributeKey == bytes32(\\\"contractRole\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232));\\n        } else if (attributeKey == bytes32(\\\"dayCountConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224));\\n        } else if (attributeKey == bytes32(\\\"businessDayConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216));\\n        } else if (attributeKey == bytes32(\\\"endOfMonthConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208));\\n        } else if (attributeKey == bytes32(\\\"couponType\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetAddressValueForForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (attributeKey == bytes32(\\\"currency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96));\\n        } else if (attributeKey == bytes32(\\\"settlementCurrency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96));\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function decodeAndGetBytes32ValueForForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return asset.packedTerms[attributeKey];\\n    }\\n\\n    function decodeAndGetUIntValueForForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetPeriodValueForForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IP memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"gracePeriod\\\")\\n            || attributeKey == bytes32(\\\"delinquencyPeriod\\\")\\n            || attributeKey == bytes32(\\\"settlementPeriod\\\")\\n            || attributeKey == bytes32(\\\"fixingPeriod\\\")\\n            || attributeKey == bytes32(\\\"redemptionExercisePeriod\\\")\\n        ) {\\n            return IP(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                (asset.packedTerms[attributeKey] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IP(0, P(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetCycleValueForForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IPS memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"cycleOfRedemption\\\")\\n            || attributeKey == bytes32(\\\"cycleOfTermination\\\")\\n            || attributeKey == bytes32(\\\"cycleOfCoupon\\\")\\n        ) {\\n            return IPS(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[attributeKey] >> 8))),\\n                (asset.packedTerms[attributeKey] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IPS(0, P(0), S(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetContractReferenceValueForCERTFAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (ContractReference memory)\\n    {\\n        if (attributeKey == bytes32(\\\"contractReference_1\\\")) {\\n            return ContractReference(\\n                asset.packedTerms[\\\"contractReference_1_object\\\"],\\n                asset.packedTerms[\\\"contractReference_1_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 8)))\\n            );\\n        } else if (attributeKey == bytes32(\\\"contractReference_2\\\")) {\\n            return ContractReference(\\n                asset.packedTerms[\\\"contractReference_2_object\\\"],\\n                asset.packedTerms[\\\"contractReference_2_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 8)))\\n            );\\n        } else {\\n            return ContractReference(\\n                bytes32(0),\\n                bytes32(0),\\n                ContractReferenceType(0),\\n                ContractReferenceRole(0)\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdac797a9e896dd4993d2f5f8d99cd1e6890813547bc4d1cdd4af6c3b1427911b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6126f3610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c8063799b1f8111610070578063799b1f8114610158578063aaaf608714610178578063ada653a314610178578063d0e2a88c14610198578063e0660e8114610178576100a8565b806318e85e6c146100ad5780633e02ae38146100d65780635445aa9b146100f657806359603f81146101185780635c6b055014610138575b600080fd5b6100c06100bb36600461205e565b6101b8565b6040516100cd91906125e7565b60405180910390f35b6100e96100e4366004612046565b610302565b6040516100cd91906123c0565b81801561010257600080fd5b5061011661011136600461207f565b610f11565b005b61012b61012636600461205e565b6116f2565b6040516100cd91906123a3565b61014b61014636600461205e565b611782565b6040516100cd91906125f5565b61016b61016636600461205e565b6118aa565b6040516100cd91906125d9565b61018b61018636600461205e565b611ae7565b6040516100cd91906123b7565b6101ab6101a636600461205e565b611afd565b6040516100cd9190612603565b6101c0611cdc565b7031bcb1b632a7b32932b232b6b83a34b7b760791b8214806101f657507131bcb1b632a7b32a32b936b4b730ba34b7b760711b82145b8061021057506c31bcb1b632a7b321b7bab837b760991b82145b156102d257604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561025457fe5b600581111561025f57fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561028f57fe5b600181111561029a57fe5b81526000848152600e860160209081526040909120549101906001908116146102c45760006102c7565b60015b1515905290506102fc565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290505b92915050565b61030a611d06565b604080516104008101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c601281111561033f57fe5b601281111561034a57fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561038257fe5b600181111561038d57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c8111156103c557fe5b600c8111156103d057fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600581111561040857fe5b600581111561041357fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600881111561044b57fe5b600881111561045657fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561048e57fe5b600181111561049957fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660038111156104d157fe5b60038111156104dc57fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c828701526f636f6e74726163744465616c4461746560801b85528383528185205481870152697374617475734461746560b01b855283835281852054608087015272696e697469616c45786368616e67654461746560681b85528383528185205460a08701526b6d617475726974794461746560a01b85528383528185205460c08701526869737375654461746560b81b85528383528185205460e08701527f6379636c65416e63686f72446174654f66526564656d7074696f6e00000000008552838352818520546101008701527f6379636c65416e63686f72446174654f665465726d696e6174696f6e000000008552838352818520546101208701527631bcb1b632a0b731b437b92230ba32a7b321b7bab837b760491b8552838352818520546101408701526b6e6f6d696e616c507269636560a01b855283835281852054610160870152696973737565507269636560b01b855283835281852054610180870152677175616e7469747960c01b8552838352818520546101a08701527064656e6f6d696e6174696f6e526174696f60781b8552838352818520546101c087015269636f75706f6e5261746560b01b8552838352818520546101e0870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526102009093019282019060101c60ff16600581111561073257fe5b600581111561073d57fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c60019081161461077957600061077c565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156107da57fe5b60058111156107e557fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c60019081161461082757600061082a565b60015b151590528152604080516060810182526f1cd95d1d1b195b595b9d14195c9a5bd960821b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561088757fe5b600581111561089257fe5b81526f1cd95d1d1b195b595b9d14195c9a5bd960821b6000908152600e8701602090815260409091205491019060081c6001908116146108d35760006108d6565b60015b151590528152604080516060810182526b199a5e1a5b99d4195c9a5bd960a21b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561092f57fe5b600581111561093a57fe5b81526b199a5e1a5b99d4195c9a5bd960a21b6000908152600e8701602090815260409091205491019060081c60019081161461097757600061097a565b60015b15159052815260408051606081018252771c9959195b5c1d1a5bdb915e195c98da5cd954195c9a5bd960421b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156109df57fe5b60058111156109ea57fe5b8152771c9959195b5c1d1a5bdb915e195c98da5cd954195c9a5bd960421b6000908152600e8701602090815260409091205491019060081c600190811614610a33576000610a36565b60015b151590528152604080516080810182527031bcb1b632a7b32932b232b6b83a34b7b760791b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610a9457fe5b6005811115610a9f57fe5b8152602001600886600e0160007031bcb1b632a7b32932b232b6b83a34b7b760791b815260200190815260200160002054901c60001c60ff166001811115610ae357fe5b6001811115610aee57fe5b81527031bcb1b632a7b32932b232b6b83a34b7b760791b6000908152600e87016020908152604090912054910190600190811614610b2d576000610b30565b60015b151590528152604080516080810182527131bcb1b632a7b32a32b936b4b730ba34b7b760711b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610b8f57fe5b6005811115610b9a57fe5b8152602001600886600e0160007131bcb1b632a7b32a32b936b4b730ba34b7b760711b815260200190815260200160002054901c60001c60ff166001811115610bdf57fe5b6001811115610bea57fe5b81527131bcb1b632a7b32a32b936b4b730ba34b7b760711b6000908152600e87016020908152604090912054910190600190811614610c2a576000610c2d565b60015b151590528152604080516080810182526c31bcb1b632a7b321b7bab837b760991b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610c8757fe5b6005811115610c9257fe5b8152602001600886600e0160006c31bcb1b632a7b321b7bab837b760991b815260200190815260200160002054901c60001c60ff166001811115610cd257fe5b6001811115610cdd57fe5b81526c31bcb1b632a7b321b7bab837b760991b6000908152600e87016020908152604090912054910190600190811614610d18576000610d1b565b60015b151590528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a6563743200000000008352818152848320548185015260008051602061267e83398151915283529081529083902054930192909182019060101c60ff166004811115610dbd57fe5b6004811115610dc857fe5b8152602001600886600e01600060008051602061267e833981519152815260200190815260200160002054901c60001c60ff166004811115610e0657fe5b6004811115610e1157fe5b90528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a6563743200000000008352818152848320548185015260008051602061269e83398151915283529081529083902054930192909182019060101c60ff166004811115610eb157fe5b6004811115610ebc57fe5b8152602001600886600e01600060008051602061269e833981519152815260200190815260200160002054901c60001c60ff166004811115610efa57fe5b6004811115610f0557fe5b9052905290505b919050565b610fdc8264656e756d7360d81b60c88460c001516003811115610f3057fe5b60ff1660001b901b60d08560a001516001811115610f4a57fe5b60ff1660001b901b60d886608001516008811115610f6457fe5b60ff1660001b901b60e087606001516005811115610f7e57fe5b60ff1660001b901b60e88860400151600c811115610f9857fe5b60ff1660001b901b60f089602001516001811115610fb257fe5b60ff1660001b901b60f88a600001516012811115610fcc57fe5b60ff16901b171717171717611ca6565b611006826763757272656e637960c01b60608460e001516001600160a01b0316901b60001b611ca6565b61103b8271736574746c656d656e7443757272656e637960701b60608461010001516001600160a01b0316901b60001b611ca6565b611061826f636f6e74726163744465616c4461746560801b83610120015160001b611ca6565b61108182697374617475734461746560b01b83610140015160001b611ca6565b6110aa8272696e697469616c45786368616e67654461746560681b83610160015160001b611ca6565b6110cc826b6d617475726974794461746560a01b83610180015160001b611ca6565b6110eb826869737375654461746560b81b836101a0015160001b611ca6565b61111e827f6379636c65416e63686f72446174654f66526564656d7074696f6e0000000000836101c0015160001b611ca6565b611151827f6379636c65416e63686f72446174654f665465726d696e6174696f6e00000000836101e0015160001b611ca6565b61117e827631bcb1b632a0b731b437b92230ba32a7b321b7bab837b760491b83610200015160001b611ca6565b6111a0826b6e6f6d696e616c507269636560a01b83610220015160001b611ca6565b6111c082696973737565507269636560b01b83610240015160001b611ca6565b6111de82677175616e7469747960c01b83610260015160001b611ca6565b611205827064656e6f6d696e6174696f6e526174696f60781b83610280015160001b611ca6565b6112258269636f75706f6e5261746560b01b836102a0015160001b611ca6565b611284826a19dc9858d954195c9a5bd960aa1b6008846102c001516040015161124f576000611252565b60015b60ff1660001b901b6010856102c0015160200151600581111561127157fe5b6102c08701515160181b911b1717611ca6565b6112e9827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846102e00151604001516112b45760006112b7565b60015b60ff1660001b901b6010856102e001516020015160058111156112d657fe5b6102e08701515160181b911b1717611ca6565b61134d826f1cd95d1d1b195b595b9d14195c9a5bd960821b60088461030001516040015161131857600061131b565b60015b60ff1660001b901b601085610300015160200151600581111561133a57fe5b6103008701515160181b911b1717611ca6565b6113ad826b199a5e1a5b99d4195c9a5bd960a21b60088461032001516040015161137857600061137b565b60015b60ff1660001b901b601085610320015160200151600581111561139a57fe5b6103208701515160181b911b1717611ca6565b61141982771c9959195b5c1d1a5bdb915e195c98da5cd954195c9a5bd960421b6008846103400151604001516113e45760006113e7565b60015b60ff1660001b901b601085610340015160200151600581111561140657fe5b6103408701515160181b911b1717611ca6565b611497827031bcb1b632a7b32932b232b6b83a34b7b760791b8361036001516060015161144757600061144a565b60015b60ff1660001b600885610360015160400151600181111561146757fe5b60001b901b601086610360015160200151600581111561148357fe5b6103608801515160181b911b171717611ca6565b611516827131bcb1b632a7b32a32b936b4b730ba34b7b760711b836103800151606001516114c65760006114c9565b60015b60ff1660001b60088561038001516040015160018111156114e657fe5b60001b901b601086610380015160200151600581111561150257fe5b6103808801515160181b911b171717611ca6565b611590826c31bcb1b632a7b321b7bab837b760991b836103a0015160600151611540576000611543565b60015b60ff1660001b6008856103a0015160400151600181111561156057fe5b60001b901b6010866103a0015160200151600581111561157c57fe5b6103a08801515160181b911b171717611ca6565b6115c1827918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b836103c0015160000151611ca6565b6115f5827f636f6e74726163745265666572656e63655f315f6f626a656374320000000000836103c0015160200151611ca6565b6116438260008051602061267e8339815191526008846103c0015160600151600481111561161f57fe5b60001b901b6010856103c0015160400151600481111561163b57fe5b901b17611ca6565b611674827918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b836103e0015160000151611ca6565b6116a8827f636f6e74726163745265666572656e63655f325f6f626a656374320000000000836103e0015160200151611ca6565b6116ee8260008051602061269e8339815191526008846103e001516060015160048111156116d257fe5b60001b901b6010856103e0015160400151600481111561163b57fe5b5050565b60006763757272656e637960c01b82141561172d57506763757272656e637960c01b6000908152600e8301602052604090205460601c6102fc565b71736574746c656d656e7443757272656e637960701b82141561177a575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6102fc565b5060006102fc565b61178a611e41565b6a19dc9858d954195c9a5bd960aa1b8214806117b957507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b806117d657506f1cd95d1d1b195b595b9d14195c9a5bd960821b82145b806117ef57506b199a5e1a5b99d4195c9a5bd960a21b82145b806118145750771c9959195b5c1d1a5bdb915e195c98da5cd954195c9a5bd960421b82145b1561189057604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561185857fe5b600581111561186357fe5b81526000848152600e8601602090815260409091205491019060081c6001908116146102c45760006102c7565b6040805160608101909152600080825260208201906102ef565b6118b2611e5b565b72636f6e74726163745265666572656e63655f3160681b8214156119c357604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a6563743200000000008352818152848320548185015260008051602061267e83398151915283525282902054909182019060101c60ff16600481111561196657fe5b600481111561197157fe5b8152602001600885600e01600060008051602061267e833981519152815260200190815260200160002054901c60001c60ff1660048111156119af57fe5b60048111156119ba57fe5b905290506102fc565b7231b7b73a3930b1ba2932b332b932b731b2af9960691b821415611ac057604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a6563743200000000008352818152848320548185015260008051602061269e83398151915283525282902054909182019060101c60ff166004811115611a7757fe5b6004811115611a8257fe5b8152602001600885600e01600060008051602061269e833981519152815260200190815260200160002054901c60001c60ff1660048111156119af57fe5b604080516080810182526000808252602082018190529091820190815260200160006119af565b6000908152600e91909101602052604090205490565b60006b636f6e74726163745479706560a01b821415611b39575064656e756d7360d81b6000908152600e8301602052604090205460f81c6102fc565b6731b0b632b73230b960c11b821415611b6f575064656e756d7360d81b6000908152600e8301602052604090205460f01c6102fc565b6b636f6e7472616374526f6c6560a01b821415611ba9575064656e756d7360d81b6000908152600e8301602052604090205460e81c6102fc565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b821415611be9575064656e756d7360d81b6000908152600e8301602052604090205460e01c6102fc565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415611c2c575064656e756d7360d81b6000908152600e8301602052604090205460d81c6102fc565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415611c6e575064656e756d7360d81b6000908152600e8301602052604090205460d01c6102fc565b69636f75706f6e5479706560b01b82141561177a575064656e756d7360d81b6000908152600e8301602052604090205460c81c6102fc565b6000828152600e84016020526040902054811415611cc357611cd7565b6000828152600e8401602052604090208190555b505050565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290565b604080516104008101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611dc7611e41565b8152602001611dd4611e41565b8152602001611de1611e41565b8152602001611dee611e41565b8152602001611dfb611e41565b8152602001611e08611cdc565b8152602001611e15611cdc565b8152602001611e22611cdc565b8152602001611e2f611e5b565b8152602001611e3c611e5b565b905290565b604080516060810190915260008082526020820190611cf9565b60408051608081018252600080825260208201819052909182019081526020016000611e3c565b80356001600160a01b0381168114610f0c57600080fd5b80358015158114610f0c57600080fd5b803560098110610f0c57600080fd5b8035610f0c81612656565b8035600d8110610f0c57600080fd5b803560138110610f0c57600080fd5b803560048110610f0c57600080fd5b8035610f0c81612670565b600060808284031215611f0c578081fd5b6040516080810181811067ffffffffffffffff82111715611f2957fe5b806040525080915082358152602083013560208201526040830135611f4d81612663565b60408201526060830135611f6081612663565b6060919091015292915050565b600060808284031215611f7e578081fd5b6040516080810181811067ffffffffffffffff82111715611f9b57fe5b604052823581529050806020830135611fb381612670565b60208201526040830135611fc681612656565b6040820152611fd760608401611e99565b60608201525092915050565b600060608284031215611ff4578081fd5b6040516060810181811067ffffffffffffffff8211171561201157fe5b60405282358152905080602083013561202981612670565b602082015261203a60408401611e99565b60408201525092915050565b600060208284031215612057578081fd5b5035919050565b60008060408385031215612070578081fd5b50508035926020909101359150565b600080828403610740811215612093578283fd5b83359250610720601f19820112156120a9578182fd5b506104006120b681612611565b6120c260208601611ed2565b81526120d060408601611eb8565b60208201526120e160608601611ec3565b60408201526120f260808601611ef0565b606082015261210360a08601611ea9565b608082015261211460c08601611eb8565b60a082015261212560e08601611ee1565b60c0820152610100612138818701611e82565b60e083015261012061214b818801611e82565b828401526101409150818701358184015250610160808701358284015261018091508187013581840152506101a080870135828401526101c091508187013581840152506101e08087013582840152610200915081870135818401525061022080870135828401526102409150818701358184015250610260808701358284015261028091508187013581840152506102a080870135828401526102c091508187013581840152506102e061220288828901611fe3565b82840152610340915061221788838901611fe3565b908301526103a061222a88888301611fe3565b61030084015261223c88858901611fe3565b610320840152612250886104608901611fe3565b82840152612262886104c08901611f6d565b610360840152612276886105408901611f6d565b61038084015261228a886105c08901611f6d565b908301525061229d866106408701611efb565b6103c08201526122b1866106c08701611efb565b6103e082015280925050509250929050565b6001600160a01b03169052565b600981106122da57fe5b9052565b6122da81612635565b600d81106122da57fe5b601381106122da57fe5b600481106122da57fe5b6122da8161264c565b8051825260208101516020830152604081015161232a81612642565b6040830152606081015161233d81612642565b806060840152505050565b80518252602081015161235a8161264c565b6020830152604081015161236d81612635565b60408301526060908101511515910152565b8051825260208101516123918161264c565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b6000610720820190506123d48284516122f1565b60208301516123e660208401826122de565b5060408301516123f960408401826122e7565b50606083015161240c6060840182612305565b50608083015161241f60808401826122d0565b5060a083015161243260a08401826122de565b5060c083015161244560c08401826122fb565b5060e083015161245860e08401826122c3565b506101008084015161246c828501826122c3565b505061012083810151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151908301526102c0808401516125108285018261237f565b50506102e08301516103206125278185018361237f565b610300850151915061038061253e8186018461237f565b9085015191506103e0906125548583018461237f565b610340860151925061256a61044086018461237f565b61036086015192506125806104a0860184612348565b8501519150612593610520850183612348565b6103a085015191506125a96105a0850183612348565b6103c085015191506125bf61062085018361230e565b84015190506125d26106a084018261230e565b5092915050565b608081016102fc828461230e565b608081016102fc8284612348565b606081016102fc828461237f565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561262d57fe5b604052919050565b6002811061263f57fe5b50565b6005811061263f57fe5b6006811061263f57fe5b6002811061263f57600080fd5b6005811061263f57600080fd5b6006811061263f57600080fdfe636f6e74726163745265666572656e63655f315f747970655f726f6c65000000636f6e74726163745265666572656e63655f325f747970655f726f6c65000000a2646970667358221220994e4fa88da90d6a0f934a5e45c853a6bc109fb65268f18f99f8bfea4ab7ab1464736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c8063799b1f8111610070578063799b1f8114610158578063aaaf608714610178578063ada653a314610178578063d0e2a88c14610198578063e0660e8114610178576100a8565b806318e85e6c146100ad5780633e02ae38146100d65780635445aa9b146100f657806359603f81146101185780635c6b055014610138575b600080fd5b6100c06100bb36600461205e565b6101b8565b6040516100cd91906125e7565b60405180910390f35b6100e96100e4366004612046565b610302565b6040516100cd91906123c0565b81801561010257600080fd5b5061011661011136600461207f565b610f11565b005b61012b61012636600461205e565b6116f2565b6040516100cd91906123a3565b61014b61014636600461205e565b611782565b6040516100cd91906125f5565b61016b61016636600461205e565b6118aa565b6040516100cd91906125d9565b61018b61018636600461205e565b611ae7565b6040516100cd91906123b7565b6101ab6101a636600461205e565b611afd565b6040516100cd9190612603565b6101c0611cdc565b7031bcb1b632a7b32932b232b6b83a34b7b760791b8214806101f657507131bcb1b632a7b32a32b936b4b730ba34b7b760711b82145b8061021057506c31bcb1b632a7b321b7bab837b760991b82145b156102d257604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561025457fe5b600581111561025f57fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561028f57fe5b600181111561029a57fe5b81526000848152600e860160209081526040909120549101906001908116146102c45760006102c7565b60015b1515905290506102fc565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290505b92915050565b61030a611d06565b604080516104008101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c601281111561033f57fe5b601281111561034a57fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561038257fe5b600181111561038d57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c8111156103c557fe5b600c8111156103d057fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600581111561040857fe5b600581111561041357fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600881111561044b57fe5b600881111561045657fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561048e57fe5b600181111561049957fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660038111156104d157fe5b60038111156104dc57fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c828701526f636f6e74726163744465616c4461746560801b85528383528185205481870152697374617475734461746560b01b855283835281852054608087015272696e697469616c45786368616e67654461746560681b85528383528185205460a08701526b6d617475726974794461746560a01b85528383528185205460c08701526869737375654461746560b81b85528383528185205460e08701527f6379636c65416e63686f72446174654f66526564656d7074696f6e00000000008552838352818520546101008701527f6379636c65416e63686f72446174654f665465726d696e6174696f6e000000008552838352818520546101208701527631bcb1b632a0b731b437b92230ba32a7b321b7bab837b760491b8552838352818520546101408701526b6e6f6d696e616c507269636560a01b855283835281852054610160870152696973737565507269636560b01b855283835281852054610180870152677175616e7469747960c01b8552838352818520546101a08701527064656e6f6d696e6174696f6e526174696f60781b8552838352818520546101c087015269636f75706f6e5261746560b01b8552838352818520546101e0870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526102009093019282019060101c60ff16600581111561073257fe5b600581111561073d57fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c60019081161461077957600061077c565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156107da57fe5b60058111156107e557fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c60019081161461082757600061082a565b60015b151590528152604080516060810182526f1cd95d1d1b195b595b9d14195c9a5bd960821b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561088757fe5b600581111561089257fe5b81526f1cd95d1d1b195b595b9d14195c9a5bd960821b6000908152600e8701602090815260409091205491019060081c6001908116146108d35760006108d6565b60015b151590528152604080516060810182526b199a5e1a5b99d4195c9a5bd960a21b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561092f57fe5b600581111561093a57fe5b81526b199a5e1a5b99d4195c9a5bd960a21b6000908152600e8701602090815260409091205491019060081c60019081161461097757600061097a565b60015b15159052815260408051606081018252771c9959195b5c1d1a5bdb915e195c98da5cd954195c9a5bd960421b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156109df57fe5b60058111156109ea57fe5b8152771c9959195b5c1d1a5bdb915e195c98da5cd954195c9a5bd960421b6000908152600e8701602090815260409091205491019060081c600190811614610a33576000610a36565b60015b151590528152604080516080810182527031bcb1b632a7b32932b232b6b83a34b7b760791b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610a9457fe5b6005811115610a9f57fe5b8152602001600886600e0160007031bcb1b632a7b32932b232b6b83a34b7b760791b815260200190815260200160002054901c60001c60ff166001811115610ae357fe5b6001811115610aee57fe5b81527031bcb1b632a7b32932b232b6b83a34b7b760791b6000908152600e87016020908152604090912054910190600190811614610b2d576000610b30565b60015b151590528152604080516080810182527131bcb1b632a7b32a32b936b4b730ba34b7b760711b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610b8f57fe5b6005811115610b9a57fe5b8152602001600886600e0160007131bcb1b632a7b32a32b936b4b730ba34b7b760711b815260200190815260200160002054901c60001c60ff166001811115610bdf57fe5b6001811115610bea57fe5b81527131bcb1b632a7b32a32b936b4b730ba34b7b760711b6000908152600e87016020908152604090912054910190600190811614610c2a576000610c2d565b60015b151590528152604080516080810182526c31bcb1b632a7b321b7bab837b760991b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610c8757fe5b6005811115610c9257fe5b8152602001600886600e0160006c31bcb1b632a7b321b7bab837b760991b815260200190815260200160002054901c60001c60ff166001811115610cd257fe5b6001811115610cdd57fe5b81526c31bcb1b632a7b321b7bab837b760991b6000908152600e87016020908152604090912054910190600190811614610d18576000610d1b565b60015b151590528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a6563743200000000008352818152848320548185015260008051602061267e83398151915283529081529083902054930192909182019060101c60ff166004811115610dbd57fe5b6004811115610dc857fe5b8152602001600886600e01600060008051602061267e833981519152815260200190815260200160002054901c60001c60ff166004811115610e0657fe5b6004811115610e1157fe5b90528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a6563743200000000008352818152848320548185015260008051602061269e83398151915283529081529083902054930192909182019060101c60ff166004811115610eb157fe5b6004811115610ebc57fe5b8152602001600886600e01600060008051602061269e833981519152815260200190815260200160002054901c60001c60ff166004811115610efa57fe5b6004811115610f0557fe5b9052905290505b919050565b610fdc8264656e756d7360d81b60c88460c001516003811115610f3057fe5b60ff1660001b901b60d08560a001516001811115610f4a57fe5b60ff1660001b901b60d886608001516008811115610f6457fe5b60ff1660001b901b60e087606001516005811115610f7e57fe5b60ff1660001b901b60e88860400151600c811115610f9857fe5b60ff1660001b901b60f089602001516001811115610fb257fe5b60ff1660001b901b60f88a600001516012811115610fcc57fe5b60ff16901b171717171717611ca6565b611006826763757272656e637960c01b60608460e001516001600160a01b0316901b60001b611ca6565b61103b8271736574746c656d656e7443757272656e637960701b60608461010001516001600160a01b0316901b60001b611ca6565b611061826f636f6e74726163744465616c4461746560801b83610120015160001b611ca6565b61108182697374617475734461746560b01b83610140015160001b611ca6565b6110aa8272696e697469616c45786368616e67654461746560681b83610160015160001b611ca6565b6110cc826b6d617475726974794461746560a01b83610180015160001b611ca6565b6110eb826869737375654461746560b81b836101a0015160001b611ca6565b61111e827f6379636c65416e63686f72446174654f66526564656d7074696f6e0000000000836101c0015160001b611ca6565b611151827f6379636c65416e63686f72446174654f665465726d696e6174696f6e00000000836101e0015160001b611ca6565b61117e827631bcb1b632a0b731b437b92230ba32a7b321b7bab837b760491b83610200015160001b611ca6565b6111a0826b6e6f6d696e616c507269636560a01b83610220015160001b611ca6565b6111c082696973737565507269636560b01b83610240015160001b611ca6565b6111de82677175616e7469747960c01b83610260015160001b611ca6565b611205827064656e6f6d696e6174696f6e526174696f60781b83610280015160001b611ca6565b6112258269636f75706f6e5261746560b01b836102a0015160001b611ca6565b611284826a19dc9858d954195c9a5bd960aa1b6008846102c001516040015161124f576000611252565b60015b60ff1660001b901b6010856102c0015160200151600581111561127157fe5b6102c08701515160181b911b1717611ca6565b6112e9827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846102e00151604001516112b45760006112b7565b60015b60ff1660001b901b6010856102e001516020015160058111156112d657fe5b6102e08701515160181b911b1717611ca6565b61134d826f1cd95d1d1b195b595b9d14195c9a5bd960821b60088461030001516040015161131857600061131b565b60015b60ff1660001b901b601085610300015160200151600581111561133a57fe5b6103008701515160181b911b1717611ca6565b6113ad826b199a5e1a5b99d4195c9a5bd960a21b60088461032001516040015161137857600061137b565b60015b60ff1660001b901b601085610320015160200151600581111561139a57fe5b6103208701515160181b911b1717611ca6565b61141982771c9959195b5c1d1a5bdb915e195c98da5cd954195c9a5bd960421b6008846103400151604001516113e45760006113e7565b60015b60ff1660001b901b601085610340015160200151600581111561140657fe5b6103408701515160181b911b1717611ca6565b611497827031bcb1b632a7b32932b232b6b83a34b7b760791b8361036001516060015161144757600061144a565b60015b60ff1660001b600885610360015160400151600181111561146757fe5b60001b901b601086610360015160200151600581111561148357fe5b6103608801515160181b911b171717611ca6565b611516827131bcb1b632a7b32a32b936b4b730ba34b7b760711b836103800151606001516114c65760006114c9565b60015b60ff1660001b60088561038001516040015160018111156114e657fe5b60001b901b601086610380015160200151600581111561150257fe5b6103808801515160181b911b171717611ca6565b611590826c31bcb1b632a7b321b7bab837b760991b836103a0015160600151611540576000611543565b60015b60ff1660001b6008856103a0015160400151600181111561156057fe5b60001b901b6010866103a0015160200151600581111561157c57fe5b6103a08801515160181b911b171717611ca6565b6115c1827918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b836103c0015160000151611ca6565b6115f5827f636f6e74726163745265666572656e63655f315f6f626a656374320000000000836103c0015160200151611ca6565b6116438260008051602061267e8339815191526008846103c0015160600151600481111561161f57fe5b60001b901b6010856103c0015160400151600481111561163b57fe5b901b17611ca6565b611674827918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b836103e0015160000151611ca6565b6116a8827f636f6e74726163745265666572656e63655f325f6f626a656374320000000000836103e0015160200151611ca6565b6116ee8260008051602061269e8339815191526008846103e001516060015160048111156116d257fe5b60001b901b6010856103e0015160400151600481111561163b57fe5b5050565b60006763757272656e637960c01b82141561172d57506763757272656e637960c01b6000908152600e8301602052604090205460601c6102fc565b71736574746c656d656e7443757272656e637960701b82141561177a575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6102fc565b5060006102fc565b61178a611e41565b6a19dc9858d954195c9a5bd960aa1b8214806117b957507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b806117d657506f1cd95d1d1b195b595b9d14195c9a5bd960821b82145b806117ef57506b199a5e1a5b99d4195c9a5bd960a21b82145b806118145750771c9959195b5c1d1a5bdb915e195c98da5cd954195c9a5bd960421b82145b1561189057604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561185857fe5b600581111561186357fe5b81526000848152600e8601602090815260409091205491019060081c6001908116146102c45760006102c7565b6040805160608101909152600080825260208201906102ef565b6118b2611e5b565b72636f6e74726163745265666572656e63655f3160681b8214156119c357604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a6563743200000000008352818152848320548185015260008051602061267e83398151915283525282902054909182019060101c60ff16600481111561196657fe5b600481111561197157fe5b8152602001600885600e01600060008051602061267e833981519152815260200190815260200160002054901c60001c60ff1660048111156119af57fe5b60048111156119ba57fe5b905290506102fc565b7231b7b73a3930b1ba2932b332b932b731b2af9960691b821415611ac057604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a6563743200000000008352818152848320548185015260008051602061269e83398151915283525282902054909182019060101c60ff166004811115611a7757fe5b6004811115611a8257fe5b8152602001600885600e01600060008051602061269e833981519152815260200190815260200160002054901c60001c60ff1660048111156119af57fe5b604080516080810182526000808252602082018190529091820190815260200160006119af565b6000908152600e91909101602052604090205490565b60006b636f6e74726163745479706560a01b821415611b39575064656e756d7360d81b6000908152600e8301602052604090205460f81c6102fc565b6731b0b632b73230b960c11b821415611b6f575064656e756d7360d81b6000908152600e8301602052604090205460f01c6102fc565b6b636f6e7472616374526f6c6560a01b821415611ba9575064656e756d7360d81b6000908152600e8301602052604090205460e81c6102fc565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b821415611be9575064656e756d7360d81b6000908152600e8301602052604090205460e01c6102fc565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415611c2c575064656e756d7360d81b6000908152600e8301602052604090205460d81c6102fc565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415611c6e575064656e756d7360d81b6000908152600e8301602052604090205460d01c6102fc565b69636f75706f6e5479706560b01b82141561177a575064656e756d7360d81b6000908152600e8301602052604090205460c81c6102fc565b6000828152600e84016020526040902054811415611cc357611cd7565b6000828152600e8401602052604090208190555b505050565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290565b604080516104008101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611dc7611e41565b8152602001611dd4611e41565b8152602001611de1611e41565b8152602001611dee611e41565b8152602001611dfb611e41565b8152602001611e08611cdc565b8152602001611e15611cdc565b8152602001611e22611cdc565b8152602001611e2f611e5b565b8152602001611e3c611e5b565b905290565b604080516060810190915260008082526020820190611cf9565b60408051608081018252600080825260208201819052909182019081526020016000611e3c565b80356001600160a01b0381168114610f0c57600080fd5b80358015158114610f0c57600080fd5b803560098110610f0c57600080fd5b8035610f0c81612656565b8035600d8110610f0c57600080fd5b803560138110610f0c57600080fd5b803560048110610f0c57600080fd5b8035610f0c81612670565b600060808284031215611f0c578081fd5b6040516080810181811067ffffffffffffffff82111715611f2957fe5b806040525080915082358152602083013560208201526040830135611f4d81612663565b60408201526060830135611f6081612663565b6060919091015292915050565b600060808284031215611f7e578081fd5b6040516080810181811067ffffffffffffffff82111715611f9b57fe5b604052823581529050806020830135611fb381612670565b60208201526040830135611fc681612656565b6040820152611fd760608401611e99565b60608201525092915050565b600060608284031215611ff4578081fd5b6040516060810181811067ffffffffffffffff8211171561201157fe5b60405282358152905080602083013561202981612670565b602082015261203a60408401611e99565b60408201525092915050565b600060208284031215612057578081fd5b5035919050565b60008060408385031215612070578081fd5b50508035926020909101359150565b600080828403610740811215612093578283fd5b83359250610720601f19820112156120a9578182fd5b506104006120b681612611565b6120c260208601611ed2565b81526120d060408601611eb8565b60208201526120e160608601611ec3565b60408201526120f260808601611ef0565b606082015261210360a08601611ea9565b608082015261211460c08601611eb8565b60a082015261212560e08601611ee1565b60c0820152610100612138818701611e82565b60e083015261012061214b818801611e82565b828401526101409150818701358184015250610160808701358284015261018091508187013581840152506101a080870135828401526101c091508187013581840152506101e08087013582840152610200915081870135818401525061022080870135828401526102409150818701358184015250610260808701358284015261028091508187013581840152506102a080870135828401526102c091508187013581840152506102e061220288828901611fe3565b82840152610340915061221788838901611fe3565b908301526103a061222a88888301611fe3565b61030084015261223c88858901611fe3565b610320840152612250886104608901611fe3565b82840152612262886104c08901611f6d565b610360840152612276886105408901611f6d565b61038084015261228a886105c08901611f6d565b908301525061229d866106408701611efb565b6103c08201526122b1866106c08701611efb565b6103e082015280925050509250929050565b6001600160a01b03169052565b600981106122da57fe5b9052565b6122da81612635565b600d81106122da57fe5b601381106122da57fe5b600481106122da57fe5b6122da8161264c565b8051825260208101516020830152604081015161232a81612642565b6040830152606081015161233d81612642565b806060840152505050565b80518252602081015161235a8161264c565b6020830152604081015161236d81612635565b60408301526060908101511515910152565b8051825260208101516123918161264c565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b6000610720820190506123d48284516122f1565b60208301516123e660208401826122de565b5060408301516123f960408401826122e7565b50606083015161240c6060840182612305565b50608083015161241f60808401826122d0565b5060a083015161243260a08401826122de565b5060c083015161244560c08401826122fb565b5060e083015161245860e08401826122c3565b506101008084015161246c828501826122c3565b505061012083810151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151908301526102c0808401516125108285018261237f565b50506102e08301516103206125278185018361237f565b610300850151915061038061253e8186018461237f565b9085015191506103e0906125548583018461237f565b610340860151925061256a61044086018461237f565b61036086015192506125806104a0860184612348565b8501519150612593610520850183612348565b6103a085015191506125a96105a0850183612348565b6103c085015191506125bf61062085018361230e565b84015190506125d26106a084018261230e565b5092915050565b608081016102fc828461230e565b608081016102fc8284612348565b606081016102fc828461237f565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561262d57fe5b604052919050565b6002811061263f57fe5b50565b6005811061263f57fe5b6006811061263f57fe5b6002811061263f57600080fd5b6005811061263f57600080fd5b6006811061263f57600080fdfe636f6e74726163745265666572656e63655f315f747970655f726f6c65000000636f6e74726163745265666572656e63655f325f747970655f726f6c65000000a2646970667358221220994e4fa88da90d6a0f934a5e45c853a6bc109fb65268f18f99f8bfea4ab7ab1464736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decodeAndGetCERTFTerms(Asset storage)": {
        "details": "Decode and loads CERTFTerms"
      },
      "encodeAndSetCERTFTerms(Asset storage,CERTFTerms)": {
        "details": "Tightly pack and store only non-zero overwritten terms (LifecycleTerms)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "encodeAndSetCERTFTerms(Asset storage,CERTFTerms)": {
        "notice": "All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}