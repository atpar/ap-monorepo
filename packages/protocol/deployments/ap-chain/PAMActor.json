{
  "address": "0x069b43a491B8e237F683aBC994530180F5F82eec",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAssetRegistry",
          "name": "assetRegistry",
          "type": "address"
        },
        {
          "internalType": "contract IOracleProxy",
          "name": "defaultOracleProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "InitializedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheduleTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "payoff",
          "type": "int256"
        }
      ],
      "name": "ProgressedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "statusMessage",
          "type": "bytes32"
        }
      ],
      "name": "Status",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "assetRegistry",
      "outputs": [
        {
          "internalType": "contract IAssetRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "object",
          "type": "bytes32"
        }
      ],
      "name": "decodeCollateralObject",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        }
      ],
      "name": "decodeEvent",
      "outputs": [
        {
          "internalType": "enum EventType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultOracleProxy",
      "outputs": [
        {
          "internalType": "contract IOracleProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "encodeCollateralAsObject",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "scheduleTime",
          "type": "uint256"
        }
      ],
      "name": "encodeEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "getEpochOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum ScalingEffect",
              "name": "scalingEffect",
              "type": "uint8"
            },
            {
              "internalType": "enum PenaltyType",
              "name": "penaltyType",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeBasis",
              "name": "feeBasis",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeRateReset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfRateReset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfScalingIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfFee",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "rateSpread",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextResetRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "penaltyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "delinquencyRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "lifeFloor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodCap",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "periodFloor",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfRateReset",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfScalingIndex",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfFee",
              "type": "tuple"
            }
          ],
          "internalType": "struct PAMTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "schedule",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "creatorObligor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creatorBeneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterpartyObligor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterpartyBeneficiary",
              "type": "address"
            }
          ],
          "internalType": "struct AssetOwnership",
          "name": "ownership",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "engine",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "progress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        }
      ],
      "name": "progressWith",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum BusinessDayConvention",
          "name": "convention",
          "type": "uint8"
        },
        {
          "internalType": "enum Calendar",
          "name": "calendar",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "shiftCalcTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum BusinessDayConvention",
          "name": "convention",
          "type": "uint8"
        },
        {
          "internalType": "enum Calendar",
          "name": "calendar",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "shiftEventTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x57915f36c4a9f9527fa42cd6db91f7120523fa427a4031078778e76cea49960e",
  "receipt": {
    "to": null,
    "from": "0x6C51ECF949882c2183357B860FD82Dd4bb631840",
    "contractAddress": "0x069b43a491B8e237F683aBC994530180F5F82eec",
    "transactionIndex": 0,
    "gasUsed": "3295600",
    "logsBloom": "0x
    "blockHash": "0x230ca3f84b300bf5cfb3c45c383b995bf4e5fd20e18543aac71b6b02375a9a04",
    "transactionHash": "0x57915f36c4a9f9527fa42cd6db91f7120523fa427a4031078778e76cea49960e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 77,
        "transactionHash": "0x57915f36c4a9f9527fa42cd6db91f7120523fa427a4031078778e76cea49960e",
        "address": "0x069b43a491B8e237F683aBC994530180F5F82eec",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006c51ecf949882c2183357b860fd82dd4bb631840"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x230ca3f84b300bf5cfb3c45c383b995bf4e5fd20e18543aac71b6b02375a9a04"
      }
    ],
    "blockNumber": 77,
    "cumulativeGasUsed": "3295600",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDFea64fD29ad9F8277d63961aD1e0f1615a0e4f6",
    "0xC70B88924bF52d11e705C612D2dCF30D01E4f8C3"
  ],
  "solcInputHash": "3e43ceeb5da11f8668c639d97933f6e4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAssetRegistry\",\"name\":\"assetRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IOracleProxy\",\"name\":\"defaultOracleProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"InitializedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"payoff\",\"type\":\"int256\"}],\"name\":\"ProgressedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"statusMessage\",\"type\":\"bytes32\"}],\"name\":\"Status\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assetRegistry\",\"outputs\":[{\"internalType\":\"contract IAssetRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"object\",\"type\":\"bytes32\"}],\"name\":\"decodeCollateralObject\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"}],\"name\":\"decodeEvent\",\"outputs\":[{\"internalType\":\"enum EventType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOracleProxy\",\"outputs\":[{\"internalType\":\"contract IOracleProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"encodeCollateralAsObject\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"scheduleTime\",\"type\":\"uint256\"}],\"name\":\"encodeEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"getEpochOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum ScalingEffect\",\"name\":\"scalingEffect\",\"type\":\"uint8\"},{\"internalType\":\"enum PenaltyType\",\"name\":\"penaltyType\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeBasis\",\"name\":\"feeBasis\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeRateReset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfRateReset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfScalingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"rateSpread\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextResetRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"penaltyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"delinquencyRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lifeFloor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodCap\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"periodFloor\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfRateReset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfScalingIndex\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfFee\",\"type\":\"tuple\"}],\"internalType\":\"struct PAMTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"schedule\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"creatorObligor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyObligor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyBeneficiary\",\"type\":\"address\"}],\"internalType\":\"struct AssetOwnership\",\"name\":\"ownership\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"engine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"progress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"}],\"name\":\"progressWith\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"convention\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"shiftCalcTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"convention\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"shiftEventTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),bytes32[],(address,address,address,address),address,address)\":{\"params\":{\"admin\":\"address of the admin of the asset (optional)\",\"engine\":\"address of the ACTUS engine used for the spec. ContractType\",\"ownership\":\"ownership of the asset\",\"schedule\":\"schedule of the asset\",\"terms\":\"asset specific terms\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"progress(bytes32)\":{\"details\":\"Emits ProgressedAsset if the state of the asset was updated.\",\"params\":{\"assetId\":\"id of the asset\"}},\"progressWith(bytes32,bytes32)\":{\"details\":\"Emits ProgressedAsset if the state of the asset was updated.\",\"params\":{\"_event\":\"the unscheduled event\",\"assetId\":\"id of the asset\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PAMActor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getEpochOffset(uint8)\":{\"notice\":\"Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp\"},\"initialize((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),bytes32[],(address,address,address,address),address,address)\":{\"notice\":\"Derives initial state of the asset terms and stores together with terms, schedule, ownership, engine, admin of the asset in the contract types specific AssetRegistry.\"},\"progress(bytes32)\":{\"notice\":\"Proceeds with the next state of the asset based on the terms, the last state, market object data and the settlement status of current obligation, derived from either a prev. pending event, an event generated based on the current state of an underlying asset or the assets schedule.\"},\"progressWith(bytes32,bytes32)\":{\"notice\":\"Proceeds with the next state of the asset based on the terms, the last state, market object data and the settlement status of current obligation, derived from a provided (unscheduled) event Reverts if the provided event violates the order of events.\"},\"shiftCalcTime(uint256,uint8,uint8,uint256)\":{\"notice\":\"Used in POFs and STFs for DCFs. No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided.\"}},\"notice\":\"TODO\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/PAM/PAMActor.sol\":\"PAMActor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x46d2453e9db55eae25c9abdae2c42229086c54f1a6a247e8ce32658bb785f6ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\nenum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct State {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    PenaltyType penaltyType;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    int256 penaltyRate;\\n    int256 delinquencyRate;\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 delinquencyRate;\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionExercisePeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    PenaltyType penaltyType;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    int256 penaltyRate;\\n    int256 delinquencyRate;\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    // int256 priceAtTerminationDate; // not implemented\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    // int256 priceAtTerminationDate; // not implemented\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\",\"keccak256\":\"0x58c525726b2ec1ce52cb6beeb7c2aa7b90d2df28cbfb31a198e3be979fbd9858\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/BusinessDayConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n\\n/**\\n * @title BusinessDayConventions\\n * @notice Contains conventions of how to handle non-business days when generating schedules of events.\\n * The events schedule time can be shifted or not, if shifted it is possible that it is shifted to the next\\n * or previous valid business days, etc.\\n */\\ncontract BusinessDayConventions {\\n\\n    /**\\n     * @notice Used in POFs and STFs for DCFs.\\n     * No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided.\\n     */\\n    function shiftCalcTime(\\n        uint256 timestamp,\\n        BusinessDayConvention convention,\\n        Calendar calendar,\\n        uint256 maturityDate\\n    )\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        if (\\n            convention == BusinessDayConvention.CSF ||\\n            convention == BusinessDayConvention.CSMF ||\\n            convention == BusinessDayConvention.CSP ||\\n            convention == BusinessDayConvention.CSMP\\n        ) {\\n            return timestamp;\\n        }\\n\\n        return shiftEventTime(timestamp, convention, calendar, maturityDate);\\n    }\\n\\n    /*\\n     * @notice Used for generating event schedules (for single events and event cycles schedules).\\n     * This convention assumes that when shifting the events schedule time according\\n     * to a BDC, the time is shifted first and calculations are performed thereafter.\\n     * (Calculations in POFs and STFs are based on the shifted time as well)\\n     */\\n    function shiftEventTime(\\n        uint256 timestamp,\\n        BusinessDayConvention convention,\\n        Calendar calendar,\\n        uint256 maturityDate\\n    )\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        // do not shift if equal to maturity date\\n        if (timestamp == maturityDate) return timestamp;\\n\\n        // Shift/Calc Following, Calc/Shift following\\n        if (convention == BusinessDayConvention.SCF || convention == BusinessDayConvention.CSF) {\\n            return getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n        // Shift/Calc Modified Following, Calc/Shift Modified following\\n        // Same as unmodified if shifted date is in the same month, if not it returns the previous buiness-day\\n        } else if (convention == BusinessDayConvention.SCMF || convention == BusinessDayConvention.CSMF) {\\n            uint256 followingOrSameBusinessDay = getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n            if (BokkyPooBahsDateTimeLibrary.getMonth(followingOrSameBusinessDay) == BokkyPooBahsDateTimeLibrary.getMonth(timestamp)) {\\n                return followingOrSameBusinessDay;\\n            }\\n            return getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n        // Shift/Calc Preceeding, Calc/Shift Preceeding\\n        } else if (convention == BusinessDayConvention.SCP || convention == BusinessDayConvention.CSP) {\\n            return getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n        // Shift/Calc Modified Preceeding, Calc/Shift Modified Preceeding\\n        // Same as unmodified if shifted date is in the same month, if not it returns the following buiness-day\\n        } else if (convention == BusinessDayConvention.SCMP || convention == BusinessDayConvention.CSMP) {\\n            uint256 preceedingOrSameBusinessDay = getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n            if (BokkyPooBahsDateTimeLibrary.getMonth(preceedingOrSameBusinessDay) == BokkyPooBahsDateTimeLibrary.getMonth(timestamp)) {\\n                return preceedingOrSameBusinessDay;\\n            }\\n            return getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n        }\\n\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the following business day if a non-business day is provided.\\n     * (Returns the same day if calendar != MondayToFriday)\\n     */\\n    function getClosestBusinessDaySameDayOrFollowing(uint256 timestamp, Calendar calendar)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (calendar == Calendar.MF) {\\n            if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 6) {\\n                return BokkyPooBahsDateTimeLibrary.addDays(timestamp, 2);\\n            } else if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 7) {\\n                return BokkyPooBahsDateTimeLibrary.addDays(timestamp, 1);\\n            }\\n        }\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the previous buiness day if a non-businessday is provided.\\n     * (Returns the same day if calendar != MondayToFriday)\\n     */\\n    function getClosestBusinessDaySameDayOrPreceeding(uint256 timestamp, Calendar calendar)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (calendar == Calendar.MF) {\\n            if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 6) {\\n                return BokkyPooBahsDateTimeLibrary.subDays(timestamp, 1);\\n            } else if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 7) {\\n                return BokkyPooBahsDateTimeLibrary.subDays(timestamp, 2);\\n            }\\n        }\\n        return timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x1406e47e0631852d7cab09816927778609dd56893df469ecc7a492bb8b45aa67\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/SignedMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * Advanced math library for signed integers\\n * (including floats which are represented as multiples of 10 ** 18)\\n */\\nlibrary SignedMath {\\n\\n    int256 constant private INT256_MIN = -2 ** 255;\\n\\n    uint256 constant public PRECISION = 18;\\n    uint256 constant public MULTIPLICATOR = 10 ** PRECISION;\\n\\n\\n    /**\\n     * @dev The product of a and b has to be less than INT256_MAX (~10 ** 76),\\n     * as devision (normalization) is performed after multiplication\\n     * Upper boundary would be (10 ** 58) * (MULTIPLICATOR) == ~10 ** 76\\n     */\\n    function floatMult(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        if (a == 0 || b == 0) return 0;\\n\\n        require(!(a == -1 && b == INT256_MIN), \\\"SignedMath.floatMult: OVERFLOW_DETECTED\\\");\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedMath.floatMult: OVERFLOW_DETECTED\\\");\\n\\n        // normalize (divide by MULTIPLICATOR)\\n        int256 d = c / int256(MULTIPLICATOR);\\n        require(d != 0, \\\"SignedMath.floatMult: CANNOT_REPRESENT_GRANULARITY\\\");\\n\\n        return d;\\n    }\\n\\n    function floatDiv(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        require(b != 0, \\\"SignedMath.floatDiv: DIVIDED_BY_ZERO\\\");\\n\\n        // normalize (multiply by MULTIPLICATOR)\\n        if (a == 0) return 0;\\n        int256 c = a * int256(MULTIPLICATOR);\\n        require(c / a == int256(MULTIPLICATOR), \\\"SignedMath.floatDiv: OVERFLOW_DETECTED\\\");\\n\\n        require(!(b == -1 && a == INT256_MIN), \\\"SignedMath.floatDiv: OVERFLOW_DETECTED\\\");\\n        int256 d = c / b;\\n        require(d != 0, \\\"SignedMath.floatDiv: CANNOT_REPRESENT_GRANULARITY\\\");\\n\\n        return d;\\n    }\\n\\n    /**\\n        * @dev Returns the smallest of two signed numbers.\\n        */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n            return a <= b ? a : b;\\n    }\\n\\n    /**\\n        * @dev Returns the largest of two signed numbers.\\n        */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n            return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x884bb3aec6597cb12c2ce3417ec60a1ffc82970342eefde5b195fad728efa233\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/EventUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n/**\\n * @title EventUtils\\n * @notice Methods for encoding decoding events\\n */\\ncontract EventUtils {\\n\\n    function encodeEvent(EventType eventType, uint256 scheduleTime)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return (\\n            bytes32(uint256(uint8(eventType))) << 248 |\\n            bytes32(scheduleTime)\\n        );\\n    }\\n\\n    function decodeEvent(bytes32 _event)\\n        public\\n        pure\\n        returns (EventType, uint256)\\n    {\\n        EventType eventType = EventType(uint8(uint256(_event >> 248)));\\n        uint256 scheduleTime = uint256(uint64(uint256(_event)));\\n\\n        return (eventType, scheduleTime);\\n    }\\n\\n    /**\\n     * @notice Returns the epoch offset for a given event type to determine the\\n     * correct order of events if multiple events have the same timestamp\\n     */\\n    function getEpochOffset(EventType eventType)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(eventType);\\n    }\\n}\\n\",\"keccak256\":\"0x0b57772142cc74943c55eea2bd2c8d2fd035bead19592b75cd4f7ad3159f96ee\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/IEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../Core/ACTUSTypes.sol\\\";\\n\\n\\ninterface IEngine {\\n    function contractType() external pure returns (ContractType);\\n}\",\"keccak256\":\"0xe2ecdc18616473e64d932c47ccf8408e5a35c100fa24e3157ad9f530556135bb\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/PAM/IPAMEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../Core/ACTUSTypes.sol\\\";\\nimport \\\"../IEngine.sol\\\";\\n\\n\\n/**\\n * @title IEngine\\n * @notice Interface which all Engines have to implement\\n */\\ninterface IPAMEngine is IEngine {\\n\\n    /**\\n     * @notice Initialize contract state space based on the contract terms.\\n     * @param terms terms of the contract\\n     * @return initial state of the contract\\n     */\\n    function computeInitialState(PAMTerms calldata terms)\\n        external\\n        pure\\n        returns (State memory);\\n\\n    /**\\n     * Applys an event to the current state of a contract and returns the resulting contract state.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event to be applied to the contract state\\n     * @param externalData external data needed for STF evaluation (e.g. rate for RR events)\\n     * @return the resulting contract state\\n     */\\n    function computeStateForEvent(\\n        PAMTerms calldata terms,\\n        State calldata state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        external\\n        pure\\n        returns (State memory);\\n\\n    /**\\n     * Evaluates the payoff for an event under the current state of the contract.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which the payoff should be evaluated\\n     * @param externalData external data needed for POF evaluation (e.g. fxRate)\\n     * @return the payoff of the event\\n     */\\n    function computePayoffForEvent(\\n        PAMTerms calldata terms,\\n        State calldata state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        external\\n        pure\\n        returns (int256);\\n\\n    /**\\n     * @notice Computes a schedule segment of non-cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @return segment of the non-cyclic schedule\\n     */\\n    function computeNonCyclicScheduleSegment(\\n        PAMTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Computes the next non-cyclic contract events based on the contract terms\\n     * and the timestamp on which the prev. event occured.\\n     * @dev Assumes that non-cyclic events of the same event type have a unique schedule time\\n     * @param terms terms of the contract\\n     * @param lastNonCyclicEvent last non-cyclic event\\n     * @return next non-cyclic event\\n     */\\n    function computeNextNonCyclicEvent(\\n        PAMTerms calldata terms,\\n        bytes32 lastNonCyclicEvent\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param lastScheduleTime last occurrence of cyclic event\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeNextCyclicEvent(\\n        PAMTerms calldata terms,\\n        uint256 lastScheduleTime,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns(bytes32);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeCyclicScheduleSegment(\\n        PAMTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Verifies that the provided event is still scheduled under the terms, the current state of the\\n     * contract and the current state of the underlying.\\n     * @param _event event for which to check if its still scheduled\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param hasUnderlying boolean indicating whether the contract has an underlying contract\\n     * @param underlyingState state of the underlying (empty state object if non-existing)\\n     * @return boolean indicating whether event is still scheduled\\n     */\\n    function isEventScheduled(\\n        bytes32 _event,\\n        PAMTerms calldata terms,\\n        State calldata state,\\n        bool hasUnderlying,\\n        State calldata underlyingState\\n    )\\n        external\\n        pure\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x2d388424da8a428ff40b6417e779d62c6f51e485c5ec699900c57b4b11e5a007\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetActor/BaseActor.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../../ACTUS/Core/SignedMath.sol\\\";\\nimport \\\"../../../ACTUS/Core/Conventions/BusinessDayConventions.sol\\\";\\nimport \\\"../../../ACTUS/Core/Utils/EventUtils.sol\\\";\\n\\n\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../AssetRegistry/IAssetRegistry.sol\\\";\\nimport \\\"../OracleProxy/IOracleProxy.sol\\\";\\nimport \\\"./IAssetActor.sol\\\";\\n\\n\\n/**\\n * @title BaseActor\\n * @notice As the centerpiece of the ACTUS Protocol it is responsible for managing the\\n * lifecycle of assets registered through the AssetRegistry. It acts as the executive of AP\\n * by initializing the state of the asset and by processing the assets schedule as specified\\n * in the TemplateRegistry. It derives the next state and the current outstanding payoff of\\n * the asset by submitting the last finalized state to the corresponding ACTUS Engine.\\n * The AssetActor stores the next state in the AssetRegistry, depending on if it is able\\n * to settle the current outstanding payoff on behalf of the obligor.\\n */\\nabstract contract BaseActor is Conversions, EventUtils, BusinessDayConventions, IAssetActor, Ownable {\\n\\n    using SignedMath for int;\\n\\n    event InitializedAsset(bytes32 indexed assetId, ContractType contractType, address creator, address counterparty);\\n    event ProgressedAsset(bytes32 indexed assetId, EventType eventType, uint256 scheduleTime, int256 payoff);\\n    event Status(bytes32 indexed assetId, bytes32 statusMessage);\\n\\n    IAssetRegistry public assetRegistry;\\n    IOracleProxy public defaultOracleProxy;\\n\\n\\n    constructor(IAssetRegistry _assetRegistry, IOracleProxy _defaultOracleProxy) {\\n        assetRegistry = _assetRegistry;\\n        defaultOracleProxy = _defaultOracleProxy;\\n    }\\n\\n    /**\\n     * @notice Proceeds with the next state of the asset based on the terms, the last state, market object data\\n     * and the settlement status of current obligation, derived from either a prev. pending event, an event\\n     * generated based on the current state of an underlying asset or the assets schedule.\\n     * @dev Emits ProgressedAsset if the state of the asset was updated.\\n     * @param assetId id of the asset\\n     */\\n    function progress(bytes32 assetId) external override {\\n        // revert if the asset is not registered in the AssetRegistry\\n        require(\\n            assetRegistry.isRegistered(assetId),\\n            \\\"BaseActor.progress: ASSET_DOES_NOT_EXIST\\\"\\n        );\\n\\n        // enforce order:\\n        // - 1. pending event has to be processed\\n        // - 2. an event which was generated based on the state of the underlying asset\\n        // - 3. the next event in the schedule\\n        bytes32 _event = assetRegistry.popPendingEvent(assetId);\\n        if (_event == bytes32(0)) _event = assetRegistry.getNextUnderlyingEvent(assetId);\\n        if (_event == bytes32(0)) _event = assetRegistry.popNextScheduledEvent(assetId);\\n\\n        // e.g. if all events in the schedule are processed\\n        require(\\n            _event != bytes32(0),\\n            \\\"BaseActor.progress: NO_NEXT_EVENT\\\"\\n        );\\n\\n        processEvent(assetId, _event);\\n    }\\n\\n    /**\\n     * @notice Proceeds with the next state of the asset based on the terms, the last state, market object data\\n     * and the settlement status of current obligation, derived from a provided (unscheduled) event\\n     * Reverts if the provided event violates the order of events.\\n     * @dev Emits ProgressedAsset if the state of the asset was updated.\\n     * @param assetId id of the asset\\n     * @param _event the unscheduled event\\n     */\\n    function progressWith(bytes32 assetId, bytes32 _event) external override {\\n        // revert if msg.sender is not authorized to update the asset\\n        require(\\n            assetRegistry.hasRootAccess(assetId, msg.sender),\\n            \\\"BaseActor.progressWith: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        // enforce order:\\n        // - 1. pending event has to be processed\\n        // - 2. an event which was generated based on the state of the underlying asset\\n        require(\\n            assetRegistry.getPendingEvent(assetId) == bytes32(0),\\n            \\\"BaseActor.progressWith: FOUND_PENDING_EVENT\\\"\\n        );\\n        require(\\n            assetRegistry.getNextUnderlyingEvent(assetId) == bytes32(0),\\n            \\\"BaseActor.progressWith: FOUND_UNDERLYING_EVENT\\\"\\n        );\\n\\n        // - 3. the scheduled event takes priority if its schedule time is early or equal to the provided event\\n        (, uint256 scheduledEventScheduleTime) = decodeEvent(assetRegistry.getNextScheduledEvent(assetId));\\n        (, uint256 providedEventScheduleTime) = decodeEvent(_event);\\n        require(\\n            scheduledEventScheduleTime == 0 || (providedEventScheduleTime < scheduledEventScheduleTime),\\n            \\\"BaseActor.progressWith: FOUND_EARLIER_EVENT\\\"\\n        );\\n\\n        processEvent(assetId, _event);\\n    }\\n\\n    /**\\n     * @notice Return true if event was settled\\n     */\\n    function processEvent(bytes32 assetId, bytes32 _event) internal {\\n        State memory state = assetRegistry.getState(assetId);\\n\\n        // block progression if asset has defaulted, terminated or reached maturity\\n        require(\\n            state.contractPerformance == ContractPerformance.PF\\n            || state.contractPerformance == ContractPerformance.DL\\n            || state.contractPerformance == ContractPerformance.DQ,\\n            \\\"BaseActor.processEvent: ASSET_REACHED_FINAL_STATE\\\"\\n        );\\n\\n        // get finalized state if asset is not performant\\n        if (state.contractPerformance != ContractPerformance.PF) {\\n            state = assetRegistry.getFinalizedState(assetId);\\n        }\\n\\n        (EventType eventType, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        // revert if the event time of the next event is in the future\\n        // compute event time by applying BDC to schedule time\\n        require(\\n            // solium-disable-next-line\\n            shiftEventTime(\\n                scheduleTime,\\n                BusinessDayConvention(assetRegistry.getEnumValueForTermsAttribute(assetId, \\\"businessDayConvention\\\")),\\n                Calendar(assetRegistry.getEnumValueForTermsAttribute(assetId, \\\"calendar\\\")),\\n                assetRegistry.getUIntValueForTermsAttribute(assetId, \\\"maturityDate\\\")\\n            ) <= block.timestamp,\\n            \\\"BaseActor.processEvent: NEXT_EVENT_NOT_YET_SCHEDULED\\\"\\n        );\\n\\n        // get external data for the next event\\n        // compute payoff and the next state by applying the event to the current state\\n        (State memory nextState, int256 payoff) = computeStateAndPayoffForEvent(assetId, state, _event);\\n\\n        // try to settle payoff of event\\n        bool settledPayoff = settlePayoffForEvent(assetId, _event, payoff);\\n\\n        if (settledPayoff == false) {\\n            // if the obligation can't be fulfilled and the performance changed from performant to DL, DQ or DF,\\n            // store the last performant state of the asset\\n            // (if the obligation is later fulfilled before the asset reaches default,\\n            // the last performant state is used to derive subsequent states of the asset)\\n            if (state.contractPerformance == ContractPerformance.PF) {\\n                assetRegistry.setFinalizedState(assetId, state);\\n            }\\n\\n            // store event as pending event for future settlement\\n            assetRegistry.pushPendingEvent(assetId, _event);\\n\\n            // create CreditEvent\\n            bytes32 ceEvent = encodeEvent(EventType.CE, scheduleTime);\\n\\n            // derive the actual state of the asset by applying the CreditEvent (updates performance of asset)\\n            (nextState, ) = computeStateAndPayoffForEvent(assetId, nextState, ceEvent);\\n        }\\n\\n        // store the resulting state\\n        assetRegistry.setState(assetId, nextState);\\n\\n        // mark event as settled\\n        if (settledPayoff == true) {\\n            assetRegistry.markEventAsSettled(assetId, _event, payoff);\\n        }\\n\\n        emit ProgressedAsset(\\n            assetId,\\n            // if settlement failed a CreditEvent got processed instead\\n            (settledPayoff == true) ? eventType : EventType.CE,\\n            scheduleTime,\\n            payoff\\n        );\\n    }\\n\\n    /**\\n     * @notice Routes a payment to the designated beneficiary of the event obligation.\\n     * @dev Checks if an owner of the specified cashflowId is set, if not it sends\\n     * funds to the default beneficiary.\\n     * @param assetId id of the asset which the payment relates to\\n     * @param _event _event to settle the payoff for\\n     * @param payoff payoff of the event\\n     */\\n    function settlePayoffForEvent(\\n        bytes32 assetId,\\n        bytes32 _event,\\n        int256 payoff\\n    )\\n        internal\\n        returns (bool)\\n    {\\n        require(\\n            assetId != bytes32(0) && _event != bytes32(0),\\n            \\\"BaseActor.settlePayoffForEvent: INVALID_FUNCTION_PARAMETERS\\\"\\n        );\\n\\n        // return if there is no amount due\\n        if (payoff == 0) return true;\\n\\n        // get the token address either from currency attribute or from the second contract reference\\n        address token = assetRegistry.getAddressValueForTermsAttribute(assetId, \\\"currency\\\");\\n        ContractReference memory contractReference_2 = assetRegistry.getContractReferenceValueForTermsAttribute(\\n            assetId,\\n            \\\"contractReference_2\\\"\\n        );\\n        if (contractReference_2.role == ContractReferenceRole.COVI) {\\n            (token, ) = decodeCollateralObject(contractReference_2.object);\\n        }\\n\\n        AssetOwnership memory ownership = assetRegistry.getOwnership(assetId);\\n\\n        // determine the payee and payer of the payment by checking the sign of the payoff\\n        address payee;\\n        address payer;\\n        if (payoff > 0) {\\n            // only allow for the obligor to settle the payment\\n            payer = ownership.counterpartyObligor;\\n            // use the default beneficiary if the there is no specific owner of the cashflow\\n            if (payee == address(0)) {\\n                payee = ownership.creatorBeneficiary;\\n            }\\n        } else {\\n            // only allow for the obligor to settle the payment\\n            payer = ownership.creatorObligor;\\n            // use the default beneficiary if the there is no specific owner of the cashflow\\n            if (payee == address(0)) {\\n                payee = ownership.counterpartyBeneficiary;\\n            }\\n        }\\n\\n        // calculate the magnitude of the payoff\\n        uint256 amount = (payoff > 0) ? uint256(payoff) : uint256(payoff * -1);\\n\\n        // check if allowance is set by the payer for the Asset Actor and that payer is able to cover payment\\n        if (IERC20(token).allowance(payer, address(this)) < amount || IERC20(token).balanceOf(payer) < amount) {\\n            emit Status(assetId, \\\"INSUFFICIENT_FUNDS\\\");\\n            return false;\\n        }\\n\\n        // try to transfer amount due from obligor to payee\\n        return IERC20(token).transferFrom(payer, payee, amount);\\n    }\\n\\n    function computeStateAndPayoffForEvent(bytes32 assetId, State memory state, bytes32 _event)\\n        internal\\n        view\\n        virtual\\n        returns (State memory, int256);\\n\\n    /**\\n     * @notice Retrieves external data (such as market object data, block time, underlying asset state)\\n     * used for evaluating the STF for a given event.\\n     */\\n    function getExternalDataForSTF(\\n        bytes32 assetId,\\n        EventType eventType,\\n        uint256 timestamp\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Retrieves external data (such as market object data)\\n     * used for evaluating the POF for a given event.\\n     */\\n    function getExternalDataForPOF(\\n        bytes32 assetId,\\n        EventType /* eventType */,\\n        uint256 timestamp\\n    )\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        address currency = assetRegistry.getAddressValueForTermsAttribute(assetId, \\\"currency\\\");\\n        address settlementCurrency = assetRegistry.getAddressValueForTermsAttribute(assetId, \\\"settlementCurrency\\\");\\n\\n        if (currency != settlementCurrency) {\\n            // get FX rate\\n            (int256 fxRate, bool isSet) = defaultOracleProxy.getDataPoint(\\n                keccak256(abi.encode(currency, settlementCurrency)),\\n                timestamp\\n            );\\n            if (isSet) return bytes32(fxRate);\\n        }\\n\\n        return bytes32(0);\\n    }\\n}\\n\",\"keccak256\":\"0x61d71f6afd30d3d778d30fe4df4cea435a6b8ef9427e1a45aa857f6c306321d2\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetActor/IAssetActor.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../SharedTypes.sol\\\";\\n\\n\\ninterface IAssetActor {\\n\\n    function progress(bytes32 assetId)\\n        external;\\n\\n    function progressWith(bytes32 assetId, bytes32 _event)\\n        external;\\n}\\n\",\"keccak256\":\"0xee8e1c35bba3537034a451ebf9a74635dd970b08b8b7eeccd10817b2f1009a57\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/AccessControl/IAccessControl.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IAccessControl {\\n\\n    function grantAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external;\\n\\n    function revokeAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external;\\n\\n    function hasAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external\\n        returns (bool);\\n\\n    function hasRootAccess(bytes32 assetId, address account)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x69235896cd0d8b8d460acad192d238bfac387212c2d4b50d495146de90ef9abf\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/IAssetRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./AccessControl/IAccessControl.sol\\\";\\nimport \\\"./Terms/ITermsRegistry.sol\\\";\\nimport \\\"./State/IStateRegistry.sol\\\";\\nimport \\\"./Schedule/IScheduleRegistry.sol\\\";\\nimport \\\"./Ownership/IOwnershipRegistry.sol\\\";\\nimport \\\"./IBaseRegistry.sol\\\";\\n\\n\\ninterface IAssetRegistry is\\n    IAccessControl,\\n    ITermsRegistry,\\n    IStateRegistry,\\n    IScheduleRegistry,\\n    IOwnershipRegistry,\\n    IBaseRegistry\\n{}\\n\",\"keccak256\":\"0xe7b720c06a1f2656d16d743cd6fed5787c9b802b70917abf17656dd2d1c735e7\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/IBaseRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IBaseRegistry {\\n\\n    function isRegistered(bytes32 assetId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getEngine(bytes32 assetId)\\n        external\\n        view\\n        returns (address);\\n\\n    function getActor(bytes32 assetId)\\n        external\\n        view\\n        returns (address);\\n\\n    function setEngine(bytes32 assetId, address engine)\\n        external;\\n\\n    function setActor(bytes32 assetId, address actor)\\n        external;\\n}\\n\",\"keccak256\":\"0xbf57f7affe11d5757bf393019d72c29c6db27678dfa306dc0672feb37e176878\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Ownership/IOwnershipRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface IOwnershipRegistry {\\n\\n    function setCreatorObligor (bytes32 assetId, address newCreatorObligor)\\n        external;\\n\\n    function setCounterpartyObligor (bytes32 assetId, address newCounterpartyObligor)\\n        external;\\n\\n    function setCreatorBeneficiary(bytes32 assetId, address newCreatorBeneficiary)\\n        external;\\n\\n    function setCounterpartyBeneficiary(bytes32 assetId, address newCounterpartyBeneficiary)\\n        external;\\n\\n    function getOwnership(bytes32 assetId)\\n        external\\n        view\\n        returns (AssetOwnership memory);\\n}\\n\",\"keccak256\":\"0x7ad4e4883948d40754366c61279e7e1eb8e3c2eb42766c18ad3e07d5f74a7290\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/IScheduleRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface IScheduleRegistry {\\n\\n    function getPendingEvent (bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function pushPendingEvent (bytes32 assetId, bytes32 pendingEvent)\\n        external;\\n\\n    function popPendingEvent (bytes32 assetId)\\n        external\\n        returns (bytes32);\\n\\n    function getNextUnderlyingEvent (bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function getEventAtIndex(bytes32 assetId, uint256 index)\\n        external\\n        view\\n        returns (bytes32);\\n    \\n    function getScheduleLength(bytes32 assetId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSchedule(bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getNextScheduleIndex(bytes32 assetId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNextScheduledEvent (bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function popNextScheduledEvent(bytes32 assetId)\\n        external\\n        returns (bytes32);\\n\\n    function isEventSettled(bytes32 assetId, bytes32 _event)\\n        external\\n        view\\n        returns (bool, int256);\\n\\n    function markEventAsSettled(bytes32 assetId, bytes32 _event, int256 _payoff)\\n        external;\\n}\\n\",\"keccak256\":\"0x4c9d29c2a2dfb2ad5279c0ab200497803ea89f4e67495955a1ace5b936babd78\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/State/IStateRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface IStateRegistry {\\n\\n    function getState(bytes32 assetId)\\n        external\\n        view\\n        returns (State memory);\\n\\n    function getFinalizedState(bytes32 assetId)\\n        external\\n        view\\n        returns (State memory);\\n\\n    function getEnumValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint8);\\n\\n    function getIntValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getUintValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setState(bytes32 assetId, State calldata state)\\n        external;\\n\\n    function setFinalizedState(bytes32 assetId, State calldata state)\\n        external;\\n}\\n\",\"keccak256\":\"0xca89d9a456981ce687d3ad07aafd347d161ee396f70af9283242481a8f42365a\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Terms/ITermsRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface ITermsRegistry {\\n\\n    function getEnumValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint8);\\n\\n    function getAddressValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (address);\\n\\n    function getBytes32ValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function getUIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getPeriodValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (IP memory);\\n\\n    function getCycleValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (IPS memory);\\n\\n    function getContractReferenceValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (ContractReference memory);\\n}\\n\",\"keccak256\":\"0xb6c776fdb37fbfb7768c84aaea8304ef30e6406ffd843c8476d986ce3b5417b6\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/OracleProxy/IOracleProxy.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\ninterface IOracleProxy {\\n\\n    /**\\n     * @notice Returns a data point for given id and timestamp.\\n     * @dev Has to be implement by each Oracle Proxy. It should never revert.\\n     * @param identifier identifier of the data\\n     * @param timestamp timestamp of\\n     * @return Int256 value, isSet\\n     */\\n    function getDataPoint(bytes32 identifier, uint256 timestamp) external view returns (int256, bool);\\n}\",\"keccak256\":\"0xc3ac47c05c14466e41f812ffd4d7b468b94119d65c971713c6898a16c2ae872a\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"},\"contracts/Core/PAM/IPAMRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/IAssetRegistry.sol\\\";\\n\\n\\ninterface IPAMRegistry is IAssetRegistry {\\n\\n    function registerAsset(\\n        bytes32 assetId,\\n        PAMTerms calldata terms,\\n        State calldata state,\\n        bytes32[] calldata schedule,\\n        AssetOwnership calldata ownership,\\n        address engine,\\n        address actor,\\n        address admin\\n    )\\n        external;\\n    \\n    function getTerms(bytes32 assetId)\\n        external\\n        view\\n        returns (PAMTerms memory);\\n\\n    function setTerms(bytes32 assetId, PAMTerms calldata terms)\\n        external;\\n}\\n\",\"keccak256\":\"0x6a3884b9b4f00ba6050706aef706ac64f72ba5019a79549b60bac40ee8ba064d\",\"license\":\"Apache-2.0\"},\"contracts/Core/PAM/PAMActor.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../ACTUS/Engines/PAM/IPAMEngine.sol\\\";\\n\\nimport \\\"../Base/AssetActor/BaseActor.sol\\\";\\nimport \\\"./IPAMRegistry.sol\\\";\\n\\n\\n/**\\n * @title PAMActor\\n * @notice TODO\\n */\\ncontract PAMActor is BaseActor {\\n\\n    constructor(IAssetRegistry assetRegistry, IOracleProxy defaultOracleProxy) BaseActor(assetRegistry, defaultOracleProxy) {}\\n\\n    /**\\n     * @notice Derives initial state of the asset terms and stores together with\\n     * terms, schedule, ownership, engine, admin of the asset in the contract types specific AssetRegistry.\\n     * @param terms asset specific terms\\n     * @param schedule schedule of the asset\\n     * @param ownership ownership of the asset\\n     * @param engine address of the ACTUS engine used for the spec. ContractType\\n     * @param admin address of the admin of the asset (optional)\\n     */\\n    function initialize(\\n        PAMTerms calldata terms,\\n        bytes32[] calldata schedule,\\n        AssetOwnership calldata ownership,\\n        address engine,\\n        address admin\\n    )\\n        external\\n    {\\n        require(\\n            engine != address(0) && IEngine(engine).contractType() == ContractType.PAM,\\n            \\\"ANNActor.initialize: CONTRACT_TYPE_OF_ENGINE_UNSUPPORTED\\\"\\n        );\\n\\n        // solium-disable-next-line\\n        bytes32 assetId = keccak256(abi.encode(terms, block.timestamp));\\n\\n        // compute the initial state of the asset\\n        State memory initialState = IPAMEngine(engine).computeInitialState(terms);\\n\\n        // register the asset in the AssetRegistry\\n        IPAMRegistry(address(assetRegistry)).registerAsset(\\n            assetId,\\n            terms,\\n            initialState,\\n            schedule,\\n            ownership,\\n            engine,\\n            address(this),\\n            admin\\n        );\\n\\n        emit InitializedAsset(assetId, ContractType.PAM, ownership.creatorObligor, ownership.counterpartyObligor);\\n    }\\n\\n    function computeStateAndPayoffForEvent(bytes32 assetId, State memory state, bytes32 _event)\\n        internal\\n        view\\n        override\\n        returns (State memory, int256)\\n    {\\n        address engine = assetRegistry.getEngine(assetId);\\n        PAMTerms memory terms = IPAMRegistry(address(assetRegistry)).getTerms(assetId);\\n        (EventType eventType, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        int256 payoff = IPAMEngine(engine).computePayoffForEvent(\\n            terms,\\n            state,\\n            _event,\\n            getExternalDataForPOF(\\n                assetId,\\n                eventType,\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate)\\n            )\\n        );\\n        state = IPAMEngine(engine).computeStateForEvent(\\n            terms,\\n            state,\\n            _event,\\n            getExternalDataForSTF(\\n                assetId,\\n                eventType,\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate)\\n            )\\n        );\\n\\n        return (state, payoff);\\n    }\\n\\n    /**\\n     * @notice Retrieves external data (such as market object data, block time, underlying asset state)\\n     * used for evaluating the STF for a given event.\\n     */\\n    function getExternalDataForSTF(\\n        bytes32 assetId,\\n        EventType eventType,\\n        uint256 timestamp\\n    )\\n        internal\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        if (eventType == EventType.RR) {\\n            // get rate from DataRegistry\\n            (int256 resetRate, bool isSet) = defaultOracleProxy.getDataPoint(\\n                assetRegistry.getBytes32ValueForTermsAttribute(assetId, \\\"marketObjectCodeRateReset\\\"),\\n                timestamp\\n            );\\n            if (isSet) return bytes32(resetRate);\\n        } else if (eventType == EventType.CE) {\\n            // get current timestamp\\n            // solium-disable-next-line\\n            return bytes32(block.timestamp);\\n        }\\n\\n        return bytes32(0);\\n    }\\n}\",\"keccak256\":\"0x414e41dde3148193a2711af0063f9eba41f1ca1f21154a3cd1a1f92213043642\",\"license\":\"Apache-2.0\"},\"contracts/external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: MIT\\\"\\npragma solidity ^0.7.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x2b0c785d6fe1e5ae7239ac6833b6c014f865e1d12c4628dc9def5e0a901cc3eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003a9238038062003a928339810160408190526200003491620000c5565b8181600062000042620000c1565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055506200011c9050565b3390565b60008060408385031215620000d8578182fd5b8251620000e58162000103565b6020840151909250620000f88162000103565b809150509250929050565b6001600160a01b03811681146200011957600080fd5b50565b613966806200012c6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063811322fb11610097578063e05a66e011610066578063e05a66e0146101e0578063e726d680146101f3578063f2fde38b14610206578063f5586e0514610219576100f5565b8063811322fb146101a85780638da5cb5b146101bb578063979d7e86146101d057806398172dd8146101d8576100f5565b80636b6ba664116100d35780636b6ba66414610159578063715018a61461016c57806372540003146101745780637aebd2a814610195576100f5565b80633f8ffc9c146100fa578063645a26bd1461010f5780636778e0e914610139575b600080fd5b61010d610108366004612594565b61022c565b005b61012261011d3660046123e3565b61046e565b604051610130929190612f92565b60405180910390f35b61014c61014736600461239c565b610487565b6040516101309190612fab565b61010d610167366004612413565b6104b2565b61010d61075e565b6101876101823660046123e3565b610812565b604051610130929190613215565b61010d6101a33660046123e3565b61083b565b61014c6101b6366004612450565b610a99565b6101c3610aaf565b6040516101309190612f40565b6101c3610abe565b6101c3610acd565b61014c6101ee36600461246a565b610adc565b61014c6102013660046129ea565b610afa565b61010d610214366004612364565b610c4f565b61014c6102273660046129ea565b610d59565b6001600160a01b038216158015906102bf57506000826001600160a01b031663cb2ef6f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561027a57600080fd5b505afa15801561028e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b29190612434565b60128111156102bd57fe5b145b6102e45760405162461bcd60e51b81526004016102db9061324f565b60405180910390fd5b600086426040516020016102f9929190613593565b604051602081830303815290604052805190602001209050610319611f06565b60405163263e1feb60e11b81526001600160a01b03851690634c7c3fd690610345908b90600401613584565b6102e06040518083038186803b15801561035e57600080fd5b505afa158015610372573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039691906128cd565b600154604051630a1b584960e01b81529192506001600160a01b031690630a1b5849906103d79085908c9086908d908d908d908d9030908e906004016130e0565b600060405180830381600087803b1580156103f157600080fd5b505af1158015610405573d6000803e3d6000fd5b508492507fc5df678b84aa92f5f59981df8c9997b366d886de25771c5f753015c2e14e907a91506000905061043d6020890189612364565b61044d60608a0160408b01612364565b60405161045c939291906131e5565b60405180910390a25050505050505050565b606081901c6bffffffffffffffffffffffff8216915091565b6bffffffffffffffffffffffff19606083901b166bffffffffffffffffffffffff8216175b92915050565b60015460405163747be51f60e11b81526001600160a01b039091169063e8f7ca3e906104e49085903390600401612fb4565b602060405180830381600087803b1580156104fe57600080fd5b505af1158015610512573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053691906123c7565b6105525760405162461bcd60e51b81526004016102db906133a4565b60015460405163f52f84e160e01b81526000916001600160a01b03169063f52f84e190610583908690600401612fab565b60206040518083038186803b15801561059b57600080fd5b505afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d391906123fb565b146105f05760405162461bcd60e51b81526004016102db906134e8565b600154604051631d7a1ab960e21b81526000916001600160a01b0316906375e86ae490610621908690600401612fab565b60206040518083038186803b15801561063957600080fd5b505afa15801561064d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067191906123fb565b1461068e5760405162461bcd60e51b81526004016102db90613356565b60015460405163b828204160e01b8152600091610715916001600160a01b039091169063b8282041906106c5908790600401612fab565b60206040518083038186803b1580156106dd57600080fd5b505afa1580156106f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018291906123fb565b915050600061072383610812565b91505081158061073257508181105b61074e5760405162461bcd60e51b81526004016102db906132ac565b6107588484610dcd565b50505050565b610766611364565b6000546001600160a01b039081169116146107c8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000808060f884901c602181111561082657fe5b92505067ffffffffffffffff83169050915091565b600154604051631392c59160e11b81526001600160a01b03909116906327258b229061086b908490600401612fab565b60206040518083038186803b15801561088357600080fd5b505afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb91906123c7565b6108d75760405162461bcd60e51b81526004016102db906133ef565b600154604051630316dd6960e21b81526000916001600160a01b031690630c5b75a490610908908590600401612fab565b602060405180830381600087803b15801561092257600080fd5b505af1158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a91906123fb565b9050806109e457600154604051631d7a1ab960e21b81526001600160a01b03909116906375e86ae490610991908590600401612fab565b60206040518083038186803b1580156109a957600080fd5b505afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e191906123fb565b90505b80610a6e576001546040516361db73e160e11b81526001600160a01b039091169063c3b6e7c290610a19908590600401612fab565b602060405180830381600087803b158015610a3357600080fd5b505af1158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b91906123fb565b90505b80610a8b5760405162461bcd60e51b81526004016102db90613315565b610a958282610dcd565b5050565b6000816021811115610aa757fe5b90505b919050565b6000546001600160a01b031690565b6001546001600160a01b031681565b6002546001600160a01b031681565b60008160f8846021811115610aed57fe5b60ff16901b179392505050565b600081851415610b0b575083610c47565b6001846008811115610b1957fe5b1480610b3057506003846008811115610b2e57fe5b145b15610b4657610b3f8584611368565b9050610c47565b6002846008811115610b5457fe5b1480610b6b57506004846008811115610b6957fe5b145b15610baf576000610b7c8685611368565b9050610b87866113c4565b610b90826113c4565b1415610b9d579050610c47565b610ba786856113dc565b915050610c47565b6005846008811115610bbd57fe5b1480610bd457506007846008811115610bd257fe5b145b15610be357610b3f85846113dc565b6006846008811115610bf157fe5b1480610c0857506008846008811115610c0657fe5b145b15610c44576000610c1986856113dc565b9050610c24866113c4565b610c2d826113c4565b1415610c3a579050610c47565b610ba78685611368565b50835b949350505050565b610c57611364565b6000546001600160a01b03908116911614610cb9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610cfe5760405162461bcd60e51b815260040180806020018281038252602681526020018061390b6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006003846008811115610d6957fe5b1480610d8057506004846008811115610d7e57fe5b145b80610d9657506007846008811115610d9457fe5b145b80610dac57506008846008811115610daa57fe5b145b15610db8575083610c47565b610dc485858585610afa565b95945050505050565b610dd5611f06565b6001546040516309648a9d60e01b81526001600160a01b03909116906309648a9d90610e05908690600401612fab565b6102e06040518083038186803b158015610e1e57600080fd5b505afa158015610e32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5691906128cd565b9050600081516005811115610e6757fe5b1480610e7f5750600181516005811115610e7d57fe5b145b80610e965750600281516005811115610e9457fe5b145b610eb25760405162461bcd60e51b81526004016102db90613533565b600081516005811115610ec157fe5b14610f4a57600154604051631ba316dd60e11b81526001600160a01b03909116906337462dba90610ef6908690600401612fab565b6102e06040518083038186803b158015610f0f57600080fd5b505afa158015610f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4791906128cd565b90505b600080610f5684610812565b60015460405163ecef557760e01b815292945090925042916111009184916001600160a01b039091169063ecef557790610f94908b90600401613081565b60206040518083038186803b158015610fac57600080fd5b505afa158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe49190612a31565b60ff166008811115610ff257fe5b60015460405163ecef557760e01b81526001600160a01b039091169063ecef557790611022908c906004016130c6565b60206040518083038186803b15801561103a57600080fd5b505afa15801561104e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110729190612a31565b60ff16600181111561108057fe5b60015460405163135b9f4d60e01b81526001600160a01b039091169063135b9f4d906110b0908d906004016130a8565b60206040518083038186803b1580156110c857600080fd5b505afa1580156110dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020191906123fb565b111561111e5760405162461bcd60e51b81526004016102db90613494565b611126611f06565b600061113387868861142a565b9150915060006111448888846116b0565b9050806112485760008651600581111561115a57fe5b14156111c55760015460405163842962d560e01b81526001600160a01b039091169063842962d590611192908b908a906004016131d0565b600060405180830381600087803b1580156111ac57600080fd5b505af11580156111c0573d6000803e3d6000fd5b505050505b60015460405163d981e77360e01b81526001600160a01b039091169063d981e773906111f7908b908b90600401612fcb565b600060405180830381600087803b15801561121157600080fd5b505af1158015611225573d6000803e3d6000fd5b505050506000611236600186610adc565b905061124389858361142a565b509350505b600154604051631d306b7f60e11b81526001600160a01b0390911690633a60d6fe9061127a908b9087906004016131d0565b600060405180830381600087803b15801561129457600080fd5b505af11580156112a8573d6000803e3d6000fd5b505050508015156001141561131e5760015460405163de07a17360e01b81526001600160a01b039091169063de07a173906112eb908b908b908790600401612fd9565b600060405180830381600087803b15801561130557600080fd5b505af1158015611319573d6000803e3d6000fd5b505050505b877fd255be8589971f117e0e4377177282fb7cce66e378bfb1b7eafddd05e4f181e9600183151514611351576001611353565b865b868560405161045c93929190613230565b3390565b6000600182600181111561137857fe5b14156113bd5761138783611ae6565b600614156113a15761139a836002611af9565b90506104ac565b6113aa83611ae6565b600714156113bd5761139a836001611af9565b5090919050565b60006113d4620151808304611b0e565b509392505050565b600060018260018111156113ec57fe5b14156113bd576113fb83611ae6565b6006141561140e5761139a836001611ba4565b61141783611ae6565b600714156113bd5761139a836002611ba4565b611432611f06565b60015460405163ee43eda160e01b815260009182916001600160a01b039091169063ee43eda190611467908990600401612fab565b60206040518083038186803b15801561147f57600080fd5b505afa158015611493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b79190612380565b90506114c1611fb5565b6001546040516335f1cded60e11b81526001600160a01b0390911690636be39bda906114f1908a90600401612fab565b6107806040518083038186803b15801561150a57600080fd5b505afa15801561151e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115429190612652565b905060008061155087610812565b915091506000846001600160a01b031663657ca3bd858b8b61158b8f896115868a8d608001518e602001518f6101e00151610d59565b611bb9565b6040518563ffffffff1660e01b81526004016115aa94939291906135b0565b60206040518083038186803b1580156115c257600080fd5b505afa1580156115d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fa91906123fb565b9050846001600160a01b031663b05d1340858b8b6116318f8961162c8a8d608001518e602001518f6101e00151610d59565b611db3565b6040518563ffffffff1660e01b815260040161165094939291906135b0565b6102e06040518083038186803b15801561166957600080fd5b505afa15801561167d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a191906128cd565b9a909950975050505050505050565b600083158015906116c057508215155b6116dc5760405162461bcd60e51b81526004016102db90613437565b816116e957506001611adf565b60015460405163eb01255960e01b81526000916001600160a01b03169063eb0125599061171a908890600401613014565b60206040518083038186803b15801561173257600080fd5b505afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190612380565b905061177461212f565b600154604051635e353ebb60e11b81526001600160a01b039091169063bc6a7d76906117a4908990600401612fef565b60806040518083038186803b1580156117bc57600080fd5b505afa1580156117d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f49190612532565b905060048160600151600481111561180857fe5b141561181d5780516118199061046e565b5091505b611825612156565b60015460405163e50e0ef760e01b81526001600160a01b039091169063e50e0ef790611855908a90600401612fab565b60806040518083038186803b15801561186d57600080fd5b505afa158015611881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a591906124b4565b905060008060008713156118d4575060408201516001600160a01b0382166118cf57826020015191505b6118ed565b5081516001600160a01b0382166118ed57826060015191505b6000808813611900578760001902611902565b875b905080866001600160a01b031663dd62ed3e84306040518363ffffffff1660e01b8152600401611933929190612f54565b60206040518083038186803b15801561194b57600080fd5b505afa15801561195f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198391906123fb565b1080611a0a57506040516370a0823160e01b815281906001600160a01b038816906370a08231906119b8908690600401612f40565b60206040518083038186803b1580156119d057600080fd5b505afa1580156119e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0891906123fb565b105b15611a5457897f4f269a19b64cfff0bdee7fd3cdaec44e1fe38ce2ff55d3009a89fac6ecbe9f2c604051611a3d906132f7565b60405180910390a260009650505050505050611adf565b6040516323b872dd60e01b81526001600160a01b038716906323b872dd90611a8490859087908690600401612f6e565b602060405180830381600087803b158015611a9e57600080fd5b505af1158015611ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad691906123c7565b96505050505050505b9392505050565b6007620151809091046003010660010190565b6201518081028201828110156104ac57600080fd5b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f8460500281611b6557fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b6201518081028203828111156104ac57600080fd5b60015460405163eb01255960e01b815260009182916001600160a01b039091169063eb01255990611bee908890600401613014565b60206040518083038186803b158015611c0657600080fd5b505afa158015611c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3e9190612380565b60015460405163eb01255960e01b81529192506000916001600160a01b039091169063eb01255990611c7490899060040161305d565b60206040518083038186803b158015611c8c57600080fd5b505afa158015611ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc49190612380565b9050806001600160a01b0316826001600160a01b031614611da75760025460405160009182916001600160a01b03909116906308a4ec1090611d0c9087908790602001612f54565b60405160208183030381529060405280519060200120886040518363ffffffff1660e01b8152600401611d40929190612fcb565b604080518083038186803b158015611d5757600080fd5b505afa158015611d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8f9190612485565b915091508015611da457509250611adf915050565b50505b50600095945050505050565b6000600d836021811115611dc357fe5b1415611ee15760025460015460405163354770f760e21b815260009283926001600160a01b03918216926308a4ec10929091169063d51dc3dc90611e0b908b9060040161302e565b60206040518083038186803b158015611e2357600080fd5b505afa158015611e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5b91906123fb565b866040518363ffffffff1660e01b8152600401611e79929190612fcb565b604080518083038186803b158015611e9057600080fd5b505afa158015611ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec89190612485565b915091508015611eda57509050611adf565b5050611efc565b6001836021811115611eef57fe5b1415611efc575042611adf565b5060009392505050565b604080516102e081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805161058081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016120e961217d565b81526020016120f661217d565b81526020016121036121a0565b81526020016121106121a0565b815260200161211d6121a0565b815260200161212a6121a0565b905290565b6040805160808101825260008082526020820181905290918201908152602001600061212a565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040805160608101909152600080825260208201905b8152600060209091015290565b60408051608081019091526000808252602082019081526020016000612193565b8035610aaa8161388c565b8051610aaa8161388c565b8035610aaa816138af565b8051610aaa816138af565b8035610aaa816138bc565b8051610aaa816138bc565b8051610aaa816138c9565b8035610aaa816138e3565b8051610aaa816138e3565b8035610aaa816138f0565b8051610aaa816138f0565b8035610aaa816138c9565b803560228110610aaa57600080fd5b8035610aaa816138fd565b8051610aaa816138fd565b60006080828403121561227b578081fd5b50919050565b600060808284031215612292578081fd5b6040516080810181811067ffffffffffffffff821117156122af57fe5b80604052508091508251815260208301516122c9816138c9565b602082015260408301516122dc816138bc565b604082015260608301516122ef816138a1565b6060919091015292915050565b60006060828403121561230d578081fd5b6040516060810181811067ffffffffffffffff8211171561232a57fe5b8060405250809150825181526020830151612344816138c9565b60208201526040830151612357816138a1565b6040919091015292915050565b600060208284031215612375578081fd5b8135611adf8161388c565b600060208284031215612391578081fd5b8151611adf8161388c565b600080604083850312156123ae578081fd5b82356123b98161388c565b946020939093013593505050565b6000602082840312156123d8578081fd5b8151611adf816138a1565b6000602082840312156123f4578081fd5b5035919050565b60006020828403121561240c578081fd5b5051919050565b60008060408385031215612425578182fd5b50508035926020909101359150565b600060208284031215612445578081fd5b8151611adf816138f0565b600060208284031215612461578081fd5b611adf82612245565b6000806040838503121561247c578182fd5b6123b983612245565b60008060408385031215612497578182fd5b8251915060208301516124a9816138a1565b809150509250929050565b6000608082840312156124c5578081fd5b6040516080810181811067ffffffffffffffff821117156124e257fe5b60405282516124f08161388c565b815260208301516125008161388c565b602082015260408301516125138161388c565b604082015260608301516125268161388c565b60608201529392505050565b600060808284031215612543578081fd5b6040516080810181811067ffffffffffffffff8211171561256057fe5b806040525082518152602083015160208201526040830151612581816138d6565b60408201526060830151612526816138d6565b6000806000806000808688036108608112156125ae578283fd5b610780808212156125bd578384fd5b889750870135905067ffffffffffffffff808211156125da578384fd5b818901915089601f8301126125ed578384fd5b8135818111156125fb578485fd5b8a6020808302850101111561260e578485fd5b602083019750809650505050612628886107a0890161226a565b925061263761082088016121c1565b915061264661084088016121c1565b90509295509295509295565b60006107808284031215612664578081fd5b61058061267081613851565b6126798461222f565b8152612687602085016121f8565b602082015261269860408501612219565b60408201526126a960608501612203565b60608201526126ba608085016121e2565b60808201526126cb60a085016121f8565b60a08201526126dc60c0850161225f565b60c08201526126ed60e0850161225f565b60e08201526101006127008186016121f8565b908201526101206127128582016121cc565b908201526101406127248582016121cc565b90820152610160848101519082015261018080850151908201526101a080850151908201526101c080850151908201526101e08085015190820152610200808501519082015261022080850151908201526102408085015190820152610260808501519082015261028080850151908201526102a080850151908201526102c080850151908201526102e08085015190820152610300808501519082015261032080850151908201526103408085015190820152610360808501519082015261038080850151908201526103a080850151908201526103c080850151908201526103e08085015190820152610400808501519082015261042080850151908201526104408085015190820152610460808501519082015261048080850151908201526104a080850151908201526104c0612860868287016122fc565b90820152610520612873868683016122fc565b6104e083015261288586848701612281565b610500830152612899866106008701612281565b908201526128ab856106808601612281565b6105408201526128bf856107008601612281565b610560820152949350505050565b60006102e08083850312156128e0578182fd5b6128e981613851565b90506128f483612203565b81526020838101519082015260408084015190820152606080840151908201526080808401519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e08084015190820152610200808401519082015261022080840151908201526102408084015190820152610260808401519082015261028080840151908201526102a080840151908201526102c0928301519281019290925250919050565b600080600080608085870312156129ff578182fd5b843593506020850135612a11816138af565b92506040850135612a21816138bc565b9396929550929360600135925050565b600060208284031215612a42578081fd5b815160ff81168114611adf578182fd5b6001600160a01b03169052565b60098110612a6957fe5b9052565b612a6981613875565b612a6981613882565b600d8110612a6957fe5b60138110612a6957fe5b60228110612a6957fe5b60048110612a6957fe5b803582526020810135612ab9816138c9565b612ac281613882565b60208301526040810135612ad5816138bc565b612ade81613875565b60408301526060810135612af1816138a1565b8015156060840152505050565b805182526020810151612b1081613882565b60208301526040810151612b2381613875565b60408301526060908101511515910152565b803582526020810135612b47816138c9565b612b5081613882565b60208301526040810135612b63816138a1565b8015156040840152505050565b805182526020810151612b8281613882565b60208301526040908101511515910152565b612ba682612ba183612224565b612a89565b612bb2602082016121ed565b612bbf6020840182612a6d565b50612bcc6040820161220e565b612bd96040840182612a7f565b50612be66060820161223a565b612bf36060840182612a76565b50612c00608082016121d7565b612c0d6080840182612a5f565b50612c1a60a082016121ed565b612c2760a0840182612a6d565b50612c3460c08201612254565b612c4160c0840182612a9d565b50612c4e60e08201612254565b612c5b60e0840182612a9d565b50610100612c6a8183016121ed565b612c7682850182612a6d565b5050610120612c868183016121c1565b612c9282850182612a52565b5050610140612ca28183016121c1565b612cae82850182612a52565b5050610160818101359083015261018080820135908301526101a080820135908301526101c080820135908301526101e08082013590830152610200808201359083015261022080820135908301526102408082013590830152610260808201359083015261028080820135908301526102a080820135908301526102c080820135908301526102e08082013590830152610300808201359083015261032080820135908301526103408082013590830152610360808201359083015261038080820135908301526103a080820135908301526103c080820135908301526103e08082013590830152610400808201359083015261042080820135908301526104408082013590830152610460808201359083015261048080820135908301526104a080820135908301526104c0612dea818401828401612b35565b50610520612dfc818401828401612b35565b50610580612e0e818401828401612aa7565b50610600612e20818401828401612aa7565b50610680612e32818401828401612aa7565b50610700612e44818401828401612aa7565b505050565b612e54828251612a76565b6020818101519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028080820151908301526102a080820151908301526102c090810151910152565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b90815260200190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b9081527231b7b73a3930b1ba2932b332b932b731b2af9960691b602082015260400190565b9081526763757272656e637960c01b602082015260400190565b9081527f6d61726b65744f626a656374436f646552617465526573657400000000000000602082015260400190565b90815271736574746c656d656e7443757272656e637960701b602082015260400190565b90815274313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b602082015260400190565b9081526b6d617475726974794461746560a01b602082015260400190565b9081526731b0b632b73230b960c11b602082015260400190565b6000610b808b83526130f5602084018c612b94565b6131036107a084018b612e49565b610a8083018190528201879052610ba06001600160fb1b03881115613126578182fd5b60208802808a8386013783010190815285356131418161388c565b6001600160a01b03908116610aa08401526020870135906131618261388c565b908116610ac08401526040870135906131798261388c565b908116610ae08401526060870135906131918261388c565b16610b008301526131a6610b20830186612a52565b6131b4610b40830185612a52565b6131c2610b60830184612a52565b9a9950505050505050505050565b8281526103008101611adf6020830184612e49565b606081016131f38286612a89565b6001600160a01b03938416602083015291909216604090920191909152919050565b604081016132238285612a93565b8260208301529392505050565b6060810161323e8286612a93565b602082019390935260400152919050565b60208082526038908201527f414e4e4163746f722e696e697469616c697a653a20434f4e54524143545f545960408201527f50455f4f465f454e47494e455f554e535550504f525445440000000000000000606082015260800190565b6020808252602b908201527f426173654163746f722e70726f6772657373576974683a20464f554e445f454160408201526a149312515497d15591539560aa1b606082015260800190565b71494e53554646494349454e545f46554e445360701b815260200190565b60208082526021908201527f426173654163746f722e70726f67726573733a204e4f5f4e4558545f4556454e6040820152601560fa1b606082015260800190565b6020808252602e908201527f426173654163746f722e70726f6772657373576974683a20464f554e445f554e60408201526d1111549316525391d7d15591539560921b606082015260800190565b6020808252602b908201527f426173654163746f722e70726f6772657373576974683a20554e415554484f5260408201526a24ad22a22fa9a2a72222a960a91b606082015260800190565b60208082526028908201527f426173654163746f722e70726f67726573733a2041535345545f444f45535f4e60408201526713d517d1561254d560c21b606082015260800190565b6020808252603b908201527f426173654163746f722e736574746c655061796f6666466f724576656e743a2060408201527f494e56414c49445f46554e4354494f4e5f504152414d45544552530000000000606082015260800190565b60208082526034908201527f426173654163746f722e70726f636573734576656e743a204e4558545f455645604082015273139517d393d517d6515517d4d0d211511553115160621b606082015260800190565b6020808252602b908201527f426173654163746f722e70726f6772657373576974683a20464f554e445f504560408201526a1391125391d7d15591539560aa1b606082015260800190565b60208082526031908201527f426173654163746f722e70726f636573734576656e743a2041535345545f524560408201527041434845445f46494e414c5f535441544560781b606082015260800190565b61078081016104ac8284612b94565b6107a081016135a28285612b94565b826107808301529392505050565b6000610aa0820190506135c4828751612a89565b60208601516135d66020840182612a6d565b5060408601516135e96040840182612a7f565b5060608601516135fc6060840182612a76565b50608086015161360f6080840182612a5f565b5060a086015161362260a0840182612a6d565b5060c086015161363560c0840182612a9d565b5060e086015161364860e0840182612a9d565b506101008087015161365c82850182612a6d565b50506101208087015161367182850182612a52565b50506101408087015161368682850182612a52565b5050610160868101519083015261018080870151908301526101a080870151908301526101c080870151908301526101e08087015190830152610200808701519083015261022080870151908301526102408087015190830152610260808701519083015261028080870151908301526102a080870151908301526102c080870151908301526102e08087015190830152610300808701519083015261032080870151908301526103408087015190830152610360808701519083015261038080870151908301526103a080870151908301526103c080870151908301526103e08087015190830152610400808701519083015261042080870151908301526104408087015190830152610460808701519083015261048080870151908301526104a080870151908301526104c0808701516137c482850182612b70565b50506104e08601516105206137db81850183612b70565b61050088015191506137f1610580850183612afe565b8701519050613804610600840182612afe565b50610540860151613819610680840182612afe565b5061056086015161382e610700840182612afe565b5061383d610780830186612e49565b610a60820193909352610a80015292915050565b60405181810167ffffffffffffffff8111828210171561386d57fe5b604052919050565b6002811061387f57fe5b50565b6006811061387f57fe5b6001600160a01b038116811461387f57600080fd5b801515811461387f57600080fd5b6009811061387f57600080fd5b6002811061387f57600080fd5b6006811061387f57600080fd5b6005811061387f57600080fd5b600d811061387f57600080fd5b6013811061387f57600080fd5b6004811061387f57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212202206dd7519922ed4f7edfc8a63781b67574eaa04d84b64309fd43b0c62b224ce64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063811322fb11610097578063e05a66e011610066578063e05a66e0146101e0578063e726d680146101f3578063f2fde38b14610206578063f5586e0514610219576100f5565b8063811322fb146101a85780638da5cb5b146101bb578063979d7e86146101d057806398172dd8146101d8576100f5565b80636b6ba664116100d35780636b6ba66414610159578063715018a61461016c57806372540003146101745780637aebd2a814610195576100f5565b80633f8ffc9c146100fa578063645a26bd1461010f5780636778e0e914610139575b600080fd5b61010d610108366004612594565b61022c565b005b61012261011d3660046123e3565b61046e565b604051610130929190612f92565b60405180910390f35b61014c61014736600461239c565b610487565b6040516101309190612fab565b61010d610167366004612413565b6104b2565b61010d61075e565b6101876101823660046123e3565b610812565b604051610130929190613215565b61010d6101a33660046123e3565b61083b565b61014c6101b6366004612450565b610a99565b6101c3610aaf565b6040516101309190612f40565b6101c3610abe565b6101c3610acd565b61014c6101ee36600461246a565b610adc565b61014c6102013660046129ea565b610afa565b61010d610214366004612364565b610c4f565b61014c6102273660046129ea565b610d59565b6001600160a01b038216158015906102bf57506000826001600160a01b031663cb2ef6f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561027a57600080fd5b505afa15801561028e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b29190612434565b60128111156102bd57fe5b145b6102e45760405162461bcd60e51b81526004016102db9061324f565b60405180910390fd5b600086426040516020016102f9929190613593565b604051602081830303815290604052805190602001209050610319611f06565b60405163263e1feb60e11b81526001600160a01b03851690634c7c3fd690610345908b90600401613584565b6102e06040518083038186803b15801561035e57600080fd5b505afa158015610372573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039691906128cd565b600154604051630a1b584960e01b81529192506001600160a01b031690630a1b5849906103d79085908c9086908d908d908d908d9030908e906004016130e0565b600060405180830381600087803b1580156103f157600080fd5b505af1158015610405573d6000803e3d6000fd5b508492507fc5df678b84aa92f5f59981df8c9997b366d886de25771c5f753015c2e14e907a91506000905061043d6020890189612364565b61044d60608a0160408b01612364565b60405161045c939291906131e5565b60405180910390a25050505050505050565b606081901c6bffffffffffffffffffffffff8216915091565b6bffffffffffffffffffffffff19606083901b166bffffffffffffffffffffffff8216175b92915050565b60015460405163747be51f60e11b81526001600160a01b039091169063e8f7ca3e906104e49085903390600401612fb4565b602060405180830381600087803b1580156104fe57600080fd5b505af1158015610512573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053691906123c7565b6105525760405162461bcd60e51b81526004016102db906133a4565b60015460405163f52f84e160e01b81526000916001600160a01b03169063f52f84e190610583908690600401612fab565b60206040518083038186803b15801561059b57600080fd5b505afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d391906123fb565b146105f05760405162461bcd60e51b81526004016102db906134e8565b600154604051631d7a1ab960e21b81526000916001600160a01b0316906375e86ae490610621908690600401612fab565b60206040518083038186803b15801561063957600080fd5b505afa15801561064d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067191906123fb565b1461068e5760405162461bcd60e51b81526004016102db90613356565b60015460405163b828204160e01b8152600091610715916001600160a01b039091169063b8282041906106c5908790600401612fab565b60206040518083038186803b1580156106dd57600080fd5b505afa1580156106f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018291906123fb565b915050600061072383610812565b91505081158061073257508181105b61074e5760405162461bcd60e51b81526004016102db906132ac565b6107588484610dcd565b50505050565b610766611364565b6000546001600160a01b039081169116146107c8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000808060f884901c602181111561082657fe5b92505067ffffffffffffffff83169050915091565b600154604051631392c59160e11b81526001600160a01b03909116906327258b229061086b908490600401612fab565b60206040518083038186803b15801561088357600080fd5b505afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb91906123c7565b6108d75760405162461bcd60e51b81526004016102db906133ef565b600154604051630316dd6960e21b81526000916001600160a01b031690630c5b75a490610908908590600401612fab565b602060405180830381600087803b15801561092257600080fd5b505af1158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a91906123fb565b9050806109e457600154604051631d7a1ab960e21b81526001600160a01b03909116906375e86ae490610991908590600401612fab565b60206040518083038186803b1580156109a957600080fd5b505afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e191906123fb565b90505b80610a6e576001546040516361db73e160e11b81526001600160a01b039091169063c3b6e7c290610a19908590600401612fab565b602060405180830381600087803b158015610a3357600080fd5b505af1158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b91906123fb565b90505b80610a8b5760405162461bcd60e51b81526004016102db90613315565b610a958282610dcd565b5050565b6000816021811115610aa757fe5b90505b919050565b6000546001600160a01b031690565b6001546001600160a01b031681565b6002546001600160a01b031681565b60008160f8846021811115610aed57fe5b60ff16901b179392505050565b600081851415610b0b575083610c47565b6001846008811115610b1957fe5b1480610b3057506003846008811115610b2e57fe5b145b15610b4657610b3f8584611368565b9050610c47565b6002846008811115610b5457fe5b1480610b6b57506004846008811115610b6957fe5b145b15610baf576000610b7c8685611368565b9050610b87866113c4565b610b90826113c4565b1415610b9d579050610c47565b610ba786856113dc565b915050610c47565b6005846008811115610bbd57fe5b1480610bd457506007846008811115610bd257fe5b145b15610be357610b3f85846113dc565b6006846008811115610bf157fe5b1480610c0857506008846008811115610c0657fe5b145b15610c44576000610c1986856113dc565b9050610c24866113c4565b610c2d826113c4565b1415610c3a579050610c47565b610ba78685611368565b50835b949350505050565b610c57611364565b6000546001600160a01b03908116911614610cb9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610cfe5760405162461bcd60e51b815260040180806020018281038252602681526020018061390b6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006003846008811115610d6957fe5b1480610d8057506004846008811115610d7e57fe5b145b80610d9657506007846008811115610d9457fe5b145b80610dac57506008846008811115610daa57fe5b145b15610db8575083610c47565b610dc485858585610afa565b95945050505050565b610dd5611f06565b6001546040516309648a9d60e01b81526001600160a01b03909116906309648a9d90610e05908690600401612fab565b6102e06040518083038186803b158015610e1e57600080fd5b505afa158015610e32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5691906128cd565b9050600081516005811115610e6757fe5b1480610e7f5750600181516005811115610e7d57fe5b145b80610e965750600281516005811115610e9457fe5b145b610eb25760405162461bcd60e51b81526004016102db90613533565b600081516005811115610ec157fe5b14610f4a57600154604051631ba316dd60e11b81526001600160a01b03909116906337462dba90610ef6908690600401612fab565b6102e06040518083038186803b158015610f0f57600080fd5b505afa158015610f23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4791906128cd565b90505b600080610f5684610812565b60015460405163ecef557760e01b815292945090925042916111009184916001600160a01b039091169063ecef557790610f94908b90600401613081565b60206040518083038186803b158015610fac57600080fd5b505afa158015610fc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe49190612a31565b60ff166008811115610ff257fe5b60015460405163ecef557760e01b81526001600160a01b039091169063ecef557790611022908c906004016130c6565b60206040518083038186803b15801561103a57600080fd5b505afa15801561104e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110729190612a31565b60ff16600181111561108057fe5b60015460405163135b9f4d60e01b81526001600160a01b039091169063135b9f4d906110b0908d906004016130a8565b60206040518083038186803b1580156110c857600080fd5b505afa1580156110dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020191906123fb565b111561111e5760405162461bcd60e51b81526004016102db90613494565b611126611f06565b600061113387868861142a565b9150915060006111448888846116b0565b9050806112485760008651600581111561115a57fe5b14156111c55760015460405163842962d560e01b81526001600160a01b039091169063842962d590611192908b908a906004016131d0565b600060405180830381600087803b1580156111ac57600080fd5b505af11580156111c0573d6000803e3d6000fd5b505050505b60015460405163d981e77360e01b81526001600160a01b039091169063d981e773906111f7908b908b90600401612fcb565b600060405180830381600087803b15801561121157600080fd5b505af1158015611225573d6000803e3d6000fd5b505050506000611236600186610adc565b905061124389858361142a565b509350505b600154604051631d306b7f60e11b81526001600160a01b0390911690633a60d6fe9061127a908b9087906004016131d0565b600060405180830381600087803b15801561129457600080fd5b505af11580156112a8573d6000803e3d6000fd5b505050508015156001141561131e5760015460405163de07a17360e01b81526001600160a01b039091169063de07a173906112eb908b908b908790600401612fd9565b600060405180830381600087803b15801561130557600080fd5b505af1158015611319573d6000803e3d6000fd5b505050505b877fd255be8589971f117e0e4377177282fb7cce66e378bfb1b7eafddd05e4f181e9600183151514611351576001611353565b865b868560405161045c93929190613230565b3390565b6000600182600181111561137857fe5b14156113bd5761138783611ae6565b600614156113a15761139a836002611af9565b90506104ac565b6113aa83611ae6565b600714156113bd5761139a836001611af9565b5090919050565b60006113d4620151808304611b0e565b509392505050565b600060018260018111156113ec57fe5b14156113bd576113fb83611ae6565b6006141561140e5761139a836001611ba4565b61141783611ae6565b600714156113bd5761139a836002611ba4565b611432611f06565b60015460405163ee43eda160e01b815260009182916001600160a01b039091169063ee43eda190611467908990600401612fab565b60206040518083038186803b15801561147f57600080fd5b505afa158015611493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b79190612380565b90506114c1611fb5565b6001546040516335f1cded60e11b81526001600160a01b0390911690636be39bda906114f1908a90600401612fab565b6107806040518083038186803b15801561150a57600080fd5b505afa15801561151e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115429190612652565b905060008061155087610812565b915091506000846001600160a01b031663657ca3bd858b8b61158b8f896115868a8d608001518e602001518f6101e00151610d59565b611bb9565b6040518563ffffffff1660e01b81526004016115aa94939291906135b0565b60206040518083038186803b1580156115c257600080fd5b505afa1580156115d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115fa91906123fb565b9050846001600160a01b031663b05d1340858b8b6116318f8961162c8a8d608001518e602001518f6101e00151610d59565b611db3565b6040518563ffffffff1660e01b815260040161165094939291906135b0565b6102e06040518083038186803b15801561166957600080fd5b505afa15801561167d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a191906128cd565b9a909950975050505050505050565b600083158015906116c057508215155b6116dc5760405162461bcd60e51b81526004016102db90613437565b816116e957506001611adf565b60015460405163eb01255960e01b81526000916001600160a01b03169063eb0125599061171a908890600401613014565b60206040518083038186803b15801561173257600080fd5b505afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190612380565b905061177461212f565b600154604051635e353ebb60e11b81526001600160a01b039091169063bc6a7d76906117a4908990600401612fef565b60806040518083038186803b1580156117bc57600080fd5b505afa1580156117d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f49190612532565b905060048160600151600481111561180857fe5b141561181d5780516118199061046e565b5091505b611825612156565b60015460405163e50e0ef760e01b81526001600160a01b039091169063e50e0ef790611855908a90600401612fab565b60806040518083038186803b15801561186d57600080fd5b505afa158015611881573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a591906124b4565b905060008060008713156118d4575060408201516001600160a01b0382166118cf57826020015191505b6118ed565b5081516001600160a01b0382166118ed57826060015191505b6000808813611900578760001902611902565b875b905080866001600160a01b031663dd62ed3e84306040518363ffffffff1660e01b8152600401611933929190612f54565b60206040518083038186803b15801561194b57600080fd5b505afa15801561195f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198391906123fb565b1080611a0a57506040516370a0823160e01b815281906001600160a01b038816906370a08231906119b8908690600401612f40565b60206040518083038186803b1580156119d057600080fd5b505afa1580156119e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0891906123fb565b105b15611a5457897f4f269a19b64cfff0bdee7fd3cdaec44e1fe38ce2ff55d3009a89fac6ecbe9f2c604051611a3d906132f7565b60405180910390a260009650505050505050611adf565b6040516323b872dd60e01b81526001600160a01b038716906323b872dd90611a8490859087908690600401612f6e565b602060405180830381600087803b158015611a9e57600080fd5b505af1158015611ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad691906123c7565b96505050505050505b9392505050565b6007620151809091046003010660010190565b6201518081028201828110156104ac57600080fd5b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f8460500281611b6557fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b6201518081028203828111156104ac57600080fd5b60015460405163eb01255960e01b815260009182916001600160a01b039091169063eb01255990611bee908890600401613014565b60206040518083038186803b158015611c0657600080fd5b505afa158015611c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3e9190612380565b60015460405163eb01255960e01b81529192506000916001600160a01b039091169063eb01255990611c7490899060040161305d565b60206040518083038186803b158015611c8c57600080fd5b505afa158015611ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc49190612380565b9050806001600160a01b0316826001600160a01b031614611da75760025460405160009182916001600160a01b03909116906308a4ec1090611d0c9087908790602001612f54565b60405160208183030381529060405280519060200120886040518363ffffffff1660e01b8152600401611d40929190612fcb565b604080518083038186803b158015611d5757600080fd5b505afa158015611d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8f9190612485565b915091508015611da457509250611adf915050565b50505b50600095945050505050565b6000600d836021811115611dc357fe5b1415611ee15760025460015460405163354770f760e21b815260009283926001600160a01b03918216926308a4ec10929091169063d51dc3dc90611e0b908b9060040161302e565b60206040518083038186803b158015611e2357600080fd5b505afa158015611e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5b91906123fb565b866040518363ffffffff1660e01b8152600401611e79929190612fcb565b604080518083038186803b158015611e9057600080fd5b505afa158015611ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec89190612485565b915091508015611eda57509050611adf565b5050611efc565b6001836021811115611eef57fe5b1415611efc575042611adf565b5060009392505050565b604080516102e081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805161058081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016120e961217d565b81526020016120f661217d565b81526020016121036121a0565b81526020016121106121a0565b815260200161211d6121a0565b815260200161212a6121a0565b905290565b6040805160808101825260008082526020820181905290918201908152602001600061212a565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040805160608101909152600080825260208201905b8152600060209091015290565b60408051608081019091526000808252602082019081526020016000612193565b8035610aaa8161388c565b8051610aaa8161388c565b8035610aaa816138af565b8051610aaa816138af565b8035610aaa816138bc565b8051610aaa816138bc565b8051610aaa816138c9565b8035610aaa816138e3565b8051610aaa816138e3565b8035610aaa816138f0565b8051610aaa816138f0565b8035610aaa816138c9565b803560228110610aaa57600080fd5b8035610aaa816138fd565b8051610aaa816138fd565b60006080828403121561227b578081fd5b50919050565b600060808284031215612292578081fd5b6040516080810181811067ffffffffffffffff821117156122af57fe5b80604052508091508251815260208301516122c9816138c9565b602082015260408301516122dc816138bc565b604082015260608301516122ef816138a1565b6060919091015292915050565b60006060828403121561230d578081fd5b6040516060810181811067ffffffffffffffff8211171561232a57fe5b8060405250809150825181526020830151612344816138c9565b60208201526040830151612357816138a1565b6040919091015292915050565b600060208284031215612375578081fd5b8135611adf8161388c565b600060208284031215612391578081fd5b8151611adf8161388c565b600080604083850312156123ae578081fd5b82356123b98161388c565b946020939093013593505050565b6000602082840312156123d8578081fd5b8151611adf816138a1565b6000602082840312156123f4578081fd5b5035919050565b60006020828403121561240c578081fd5b5051919050565b60008060408385031215612425578182fd5b50508035926020909101359150565b600060208284031215612445578081fd5b8151611adf816138f0565b600060208284031215612461578081fd5b611adf82612245565b6000806040838503121561247c578182fd5b6123b983612245565b60008060408385031215612497578182fd5b8251915060208301516124a9816138a1565b809150509250929050565b6000608082840312156124c5578081fd5b6040516080810181811067ffffffffffffffff821117156124e257fe5b60405282516124f08161388c565b815260208301516125008161388c565b602082015260408301516125138161388c565b604082015260608301516125268161388c565b60608201529392505050565b600060808284031215612543578081fd5b6040516080810181811067ffffffffffffffff8211171561256057fe5b806040525082518152602083015160208201526040830151612581816138d6565b60408201526060830151612526816138d6565b6000806000806000808688036108608112156125ae578283fd5b610780808212156125bd578384fd5b889750870135905067ffffffffffffffff808211156125da578384fd5b818901915089601f8301126125ed578384fd5b8135818111156125fb578485fd5b8a6020808302850101111561260e578485fd5b602083019750809650505050612628886107a0890161226a565b925061263761082088016121c1565b915061264661084088016121c1565b90509295509295509295565b60006107808284031215612664578081fd5b61058061267081613851565b6126798461222f565b8152612687602085016121f8565b602082015261269860408501612219565b60408201526126a960608501612203565b60608201526126ba608085016121e2565b60808201526126cb60a085016121f8565b60a08201526126dc60c0850161225f565b60c08201526126ed60e0850161225f565b60e08201526101006127008186016121f8565b908201526101206127128582016121cc565b908201526101406127248582016121cc565b90820152610160848101519082015261018080850151908201526101a080850151908201526101c080850151908201526101e08085015190820152610200808501519082015261022080850151908201526102408085015190820152610260808501519082015261028080850151908201526102a080850151908201526102c080850151908201526102e08085015190820152610300808501519082015261032080850151908201526103408085015190820152610360808501519082015261038080850151908201526103a080850151908201526103c080850151908201526103e08085015190820152610400808501519082015261042080850151908201526104408085015190820152610460808501519082015261048080850151908201526104a080850151908201526104c0612860868287016122fc565b90820152610520612873868683016122fc565b6104e083015261288586848701612281565b610500830152612899866106008701612281565b908201526128ab856106808601612281565b6105408201526128bf856107008601612281565b610560820152949350505050565b60006102e08083850312156128e0578182fd5b6128e981613851565b90506128f483612203565b81526020838101519082015260408084015190820152606080840151908201526080808401519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e08084015190820152610200808401519082015261022080840151908201526102408084015190820152610260808401519082015261028080840151908201526102a080840151908201526102c0928301519281019290925250919050565b600080600080608085870312156129ff578182fd5b843593506020850135612a11816138af565b92506040850135612a21816138bc565b9396929550929360600135925050565b600060208284031215612a42578081fd5b815160ff81168114611adf578182fd5b6001600160a01b03169052565b60098110612a6957fe5b9052565b612a6981613875565b612a6981613882565b600d8110612a6957fe5b60138110612a6957fe5b60228110612a6957fe5b60048110612a6957fe5b803582526020810135612ab9816138c9565b612ac281613882565b60208301526040810135612ad5816138bc565b612ade81613875565b60408301526060810135612af1816138a1565b8015156060840152505050565b805182526020810151612b1081613882565b60208301526040810151612b2381613875565b60408301526060908101511515910152565b803582526020810135612b47816138c9565b612b5081613882565b60208301526040810135612b63816138a1565b8015156040840152505050565b805182526020810151612b8281613882565b60208301526040908101511515910152565b612ba682612ba183612224565b612a89565b612bb2602082016121ed565b612bbf6020840182612a6d565b50612bcc6040820161220e565b612bd96040840182612a7f565b50612be66060820161223a565b612bf36060840182612a76565b50612c00608082016121d7565b612c0d6080840182612a5f565b50612c1a60a082016121ed565b612c2760a0840182612a6d565b50612c3460c08201612254565b612c4160c0840182612a9d565b50612c4e60e08201612254565b612c5b60e0840182612a9d565b50610100612c6a8183016121ed565b612c7682850182612a6d565b5050610120612c868183016121c1565b612c9282850182612a52565b5050610140612ca28183016121c1565b612cae82850182612a52565b5050610160818101359083015261018080820135908301526101a080820135908301526101c080820135908301526101e08082013590830152610200808201359083015261022080820135908301526102408082013590830152610260808201359083015261028080820135908301526102a080820135908301526102c080820135908301526102e08082013590830152610300808201359083015261032080820135908301526103408082013590830152610360808201359083015261038080820135908301526103a080820135908301526103c080820135908301526103e08082013590830152610400808201359083015261042080820135908301526104408082013590830152610460808201359083015261048080820135908301526104a080820135908301526104c0612dea818401828401612b35565b50610520612dfc818401828401612b35565b50610580612e0e818401828401612aa7565b50610600612e20818401828401612aa7565b50610680612e32818401828401612aa7565b50610700612e44818401828401612aa7565b505050565b612e54828251612a76565b6020818101519083015260408082015190830152606080820151908301526080808201519083015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028080820151908301526102a080820151908301526102c090810151910152565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b90815260200190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b9081527231b7b73a3930b1ba2932b332b932b731b2af9960691b602082015260400190565b9081526763757272656e637960c01b602082015260400190565b9081527f6d61726b65744f626a656374436f646552617465526573657400000000000000602082015260400190565b90815271736574746c656d656e7443757272656e637960701b602082015260400190565b90815274313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b602082015260400190565b9081526b6d617475726974794461746560a01b602082015260400190565b9081526731b0b632b73230b960c11b602082015260400190565b6000610b808b83526130f5602084018c612b94565b6131036107a084018b612e49565b610a8083018190528201879052610ba06001600160fb1b03881115613126578182fd5b60208802808a8386013783010190815285356131418161388c565b6001600160a01b03908116610aa08401526020870135906131618261388c565b908116610ac08401526040870135906131798261388c565b908116610ae08401526060870135906131918261388c565b16610b008301526131a6610b20830186612a52565b6131b4610b40830185612a52565b6131c2610b60830184612a52565b9a9950505050505050505050565b8281526103008101611adf6020830184612e49565b606081016131f38286612a89565b6001600160a01b03938416602083015291909216604090920191909152919050565b604081016132238285612a93565b8260208301529392505050565b6060810161323e8286612a93565b602082019390935260400152919050565b60208082526038908201527f414e4e4163746f722e696e697469616c697a653a20434f4e54524143545f545960408201527f50455f4f465f454e47494e455f554e535550504f525445440000000000000000606082015260800190565b6020808252602b908201527f426173654163746f722e70726f6772657373576974683a20464f554e445f454160408201526a149312515497d15591539560aa1b606082015260800190565b71494e53554646494349454e545f46554e445360701b815260200190565b60208082526021908201527f426173654163746f722e70726f67726573733a204e4f5f4e4558545f4556454e6040820152601560fa1b606082015260800190565b6020808252602e908201527f426173654163746f722e70726f6772657373576974683a20464f554e445f554e60408201526d1111549316525391d7d15591539560921b606082015260800190565b6020808252602b908201527f426173654163746f722e70726f6772657373576974683a20554e415554484f5260408201526a24ad22a22fa9a2a72222a960a91b606082015260800190565b60208082526028908201527f426173654163746f722e70726f67726573733a2041535345545f444f45535f4e60408201526713d517d1561254d560c21b606082015260800190565b6020808252603b908201527f426173654163746f722e736574746c655061796f6666466f724576656e743a2060408201527f494e56414c49445f46554e4354494f4e5f504152414d45544552530000000000606082015260800190565b60208082526034908201527f426173654163746f722e70726f636573734576656e743a204e4558545f455645604082015273139517d393d517d6515517d4d0d211511553115160621b606082015260800190565b6020808252602b908201527f426173654163746f722e70726f6772657373576974683a20464f554e445f504560408201526a1391125391d7d15591539560aa1b606082015260800190565b60208082526031908201527f426173654163746f722e70726f636573734576656e743a2041535345545f524560408201527041434845445f46494e414c5f535441544560781b606082015260800190565b61078081016104ac8284612b94565b6107a081016135a28285612b94565b826107808301529392505050565b6000610aa0820190506135c4828751612a89565b60208601516135d66020840182612a6d565b5060408601516135e96040840182612a7f565b5060608601516135fc6060840182612a76565b50608086015161360f6080840182612a5f565b5060a086015161362260a0840182612a6d565b5060c086015161363560c0840182612a9d565b5060e086015161364860e0840182612a9d565b506101008087015161365c82850182612a6d565b50506101208087015161367182850182612a52565b50506101408087015161368682850182612a52565b5050610160868101519083015261018080870151908301526101a080870151908301526101c080870151908301526101e08087015190830152610200808701519083015261022080870151908301526102408087015190830152610260808701519083015261028080870151908301526102a080870151908301526102c080870151908301526102e08087015190830152610300808701519083015261032080870151908301526103408087015190830152610360808701519083015261038080870151908301526103a080870151908301526103c080870151908301526103e08087015190830152610400808701519083015261042080870151908301526104408087015190830152610460808701519083015261048080870151908301526104a080870151908301526104c0808701516137c482850182612b70565b50506104e08601516105206137db81850183612b70565b61050088015191506137f1610580850183612afe565b8701519050613804610600840182612afe565b50610540860151613819610680840182612afe565b5061056086015161382e610700840182612afe565b5061383d610780830186612e49565b610a60820193909352610a80015292915050565b60405181810167ffffffffffffffff8111828210171561386d57fe5b604052919050565b6002811061387f57fe5b50565b6006811061387f57fe5b6001600160a01b038116811461387f57600080fd5b801515811461387f57600080fd5b6009811061387f57600080fd5b6002811061387f57600080fd5b6006811061387f57600080fd5b6005811061387f57600080fd5b600d811061387f57600080fd5b6013811061387f57600080fd5b6004811061387f57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212202206dd7519922ed4f7edfc8a63781b67574eaa04d84b64309fd43b0c62b224ce64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initialize((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),bytes32[],(address,address,address,address),address,address)": {
        "params": {
          "admin": "address of the admin of the asset (optional)",
          "engine": "address of the ACTUS engine used for the spec. ContractType",
          "ownership": "ownership of the asset",
          "schedule": "schedule of the asset",
          "terms": "asset specific terms"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "progress(bytes32)": {
        "details": "Emits ProgressedAsset if the state of the asset was updated.",
        "params": {
          "assetId": "id of the asset"
        }
      },
      "progressWith(bytes32,bytes32)": {
        "details": "Emits ProgressedAsset if the state of the asset was updated.",
        "params": {
          "_event": "the unscheduled event",
          "assetId": "id of the asset"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PAMActor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getEpochOffset(uint8)": {
        "notice": "Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp"
      },
      "initialize((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool),(uint256,uint8,uint8,bool)),bytes32[],(address,address,address,address),address,address)": {
        "notice": "Derives initial state of the asset terms and stores together with terms, schedule, ownership, engine, admin of the asset in the contract types specific AssetRegistry."
      },
      "progress(bytes32)": {
        "notice": "Proceeds with the next state of the asset based on the terms, the last state, market object data and the settlement status of current obligation, derived from either a prev. pending event, an event generated based on the current state of an underlying asset or the assets schedule."
      },
      "progressWith(bytes32,bytes32)": {
        "notice": "Proceeds with the next state of the asset based on the terms, the last state, market object data and the settlement status of current obligation, derived from a provided (unscheduled) event Reverts if the provided event violates the order of events."
      },
      "shiftCalcTime(uint256,uint8,uint8,uint256)": {
        "notice": "Used in POFs and STFs for DCFs. No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided."
      }
    },
    "notice": "TODO",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/Core/PAM/PAMActor.sol:PAMActor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 22270,
        "contract": "contracts/Core/PAM/PAMActor.sol:PAMActor",
        "label": "assetRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAssetRegistry)23540"
      },
      {
        "astId": 22272,
        "contract": "contracts/Core/PAM/PAMActor.sol:PAMActor",
        "label": "defaultOracleProxy",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IOracleProxy)26838"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAssetRegistry)23540": {
        "encoding": "inplace",
        "label": "contract IAssetRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IOracleProxy)26838": {
        "encoding": "inplace",
        "label": "contract IOracleProxy",
        "numberOfBytes": "20"
      }
    }
  }
}