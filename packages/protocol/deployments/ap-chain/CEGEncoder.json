{
  "address": "0xE0298147C79E85a8daE31977cB10565bc2F45813",
  "abi": [],
  "transactionHash": "0x6852a801c9dae71c10ecbe76a97844b6bcf18386649cff725ffb9e7513fb343c",
  "receipt": {
    "to": null,
    "from": "0x6C51ECF949882c2183357B860FD82Dd4bb631840",
    "contractAddress": "0xE0298147C79E85a8daE31977cB10565bc2F45813",
    "transactionIndex": 0,
    "gasUsed": "1763108",
    "logsBloom": "0x
    "blockHash": "0x0a98b6ace808d29b5f72d749cc4b43d7a5ca8a259218a1af3c356d6339212ad9",
    "transactionHash": "0x6852a801c9dae71c10ecbe76a97844b6bcf18386649cff725ffb9e7513fb343c",
    "logs": [],
    "blockNumber": 42,
    "cumulativeGasUsed": "1763108",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9f67175c1fda3401d369e9c5efd0dbe5",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decodeAndGetCEGTerms(Asset storage)\":{\"details\":\"Decode and loads CEGTerms\"},\"encodeAndSetCEGTerms(Asset storage,CEGTerms)\":{\"details\":\"Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encodeAndSetCEGTerms(Asset storage,CEGTerms)\":{\"notice\":\"All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/CEG/CEGEncoder.sol\":\"CEGEncoder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\n// enum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct State {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    // int256 delinquencyRate; not implemented\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionExercisePeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; // not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    int256 priceAtTerminationDate;\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\",\"keccak256\":\"0xdc4a72ed27c09ebbd6c76b352c94e3f2258ce309307a742b0436cf965d8acd27\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistryStorage.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"./State/StateEncoder.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\nstruct Settlement {\\n    bool isSettled;\\n    int256 payoff;\\n}\\n\\nstruct Asset {\\n    // boolean indicating that asset exists / is registered\\n    bool isSet;\\n    // address of the ACTUS Engine used for computing the State and the Payoff of the asset\\n    address engine;\\n    // address of the Asset Actor which is allowed to update the State of the asset\\n    address actor;\\n    // schedule of the asset\\n    Schedule schedule;\\n    // ownership of the asset\\n    AssetOwnership ownership;\\n    // granular ownership of the event type specific cashflows\\n    // per default owners are beneficiaries defined in ownership object\\n    // cashflow id (:= (EventType index + 1) * direction) => owner\\n    mapping (int8 => address) cashflowBeneficiaries;\\n    // method level access control - stores which address can a specific method\\n    // method signature => address => has access\\n    mapping (bytes4 => mapping (address => bool)) access;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedTerms;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedState;\\n    // indicates whether a specific event was settled\\n    mapping (bytes32 => Settlement) settlement;\\n}\\n\\n/**\\n * @title BaseRegistryStorage\\n * @notice Describes the storage of the AssetRegistry\\n * Contains getter and setter methods for encoding, decoding data to optimize gas cost.\\n * Circumvents storing default values by relying on the characteristic of mappings returning zero for not set values.\\n */\\nabstract contract BaseRegistryStorage {\\n\\n    using StateEncoder for Asset;\\n    using ScheduleEncoder for Asset;\\n\\n    // AssetId => Asset\\n    mapping (bytes32 => Asset) internal assets;\\n}\\n\",\"keccak256\":\"0xea52d9bb20a7b52f75fd27419e08201539bb402a9ce8a6da1ba5a2a585eedb87\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary ScheduleEncoder {\\n\\n    function encodeAndSetSchedule(Asset storage asset, bytes32[] memory schedule) internal {\\n        for (uint256 i = 0; i < schedule.length; i++) {\\n            if (schedule[i] == bytes32(0)) break;\\n            asset.schedule.events[i] = schedule[i];\\n            asset.schedule.length = i + 1;\\n        }\\n    }\\n\\n    function decodeAndGetSchedule(Asset storage asset) internal view returns (bytes32[] memory) {\\n        bytes32[] memory schedule = new bytes32[](asset.schedule.length);\\n\\n        for (uint256 i = 0; i < asset.schedule.length; i++) {\\n            schedule[i] = asset.schedule.events[i];\\n        }\\n\\n        return schedule;\\n    }\\n}\\n\",\"keccak256\":\"0x420da04c67322d387c9b0fbeb00accc59a63fb9c10cb7b4c21f955792c4ad236\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/State/StateEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary StateEncoder {\\n\\n    function storeInPackedState(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedState[attributeKey] == value) return;\\n        asset.packedState[attributeKey] = value;\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store State\\n     */\\n    function encodeAndSetState(Asset storage asset, State memory state) internal {\\n        storeInPackedState(asset, \\\"contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n\\n        storeInPackedState(asset, \\\"notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n        storeInPackedState(asset, \\\"exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store finalized State\\n     */\\n    function encodeAndSetFinalizedState(Asset storage asset, State memory state) internal {\\n        storeInPackedState(asset, \\\"F_contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"F_statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"F_nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"F_maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"F_exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"F_terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"F_lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"F_lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n\\n        storeInPackedState(asset, \\\"F_notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"F_accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"F_feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"F_nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"F_interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n        storeInPackedState(asset, \\\"F_exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"F_quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"F_couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"F_marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"F_adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"F_dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"F_splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Decode and load the State of the asset\\n     */\\n    function decodeAndGetState(Asset storage asset) internal view returns (State memory) {\\n        return State(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"statusDate\\\"]),\\n            uint256(asset.packedState[\\\"nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"lastCouponFixingDate\\\"]),\\n            uint256(asset.packedState[\\\"lastDividendFixingDate\\\"]),\\n\\n            int256(asset.packedState[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"nextPrincipalRedemptionPayment\\\"]),\\n            int256(asset.packedState[\\\"exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"exerciseQuantity\\\"]),\\n\\n            int256(asset.packedState[\\\"quantity\\\"]),\\n            int256(asset.packedState[\\\"couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"marginFactor\\\"]),\\n            int256(asset.packedState[\\\"adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"splitRatio\\\"])\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and load the finalized State of the asset\\n     */\\n    function decodeAndGetFinalizedState(Asset storage asset) internal view returns (State memory) {\\n        return State(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"F_statusDate\\\"]),\\n            uint256(asset.packedState[\\\"F_nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"F_exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"F_terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastCouponFixingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastDividendFixingDate\\\"]),\\n\\n            int256(asset.packedState[\\\"F_notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"F_accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"F_feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"F_nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"F_interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_nextPrincipalRedemptionPayment\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseQuantity\\\"]),\\n\\n            int256(asset.packedState[\\\"F_quantity\\\"]),\\n            int256(asset.packedState[\\\"F_couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"F_marginFactor\\\"]),\\n            int256(asset.packedState[\\\"F_adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"F_dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"F_splitRatio\\\"])\\n        );\\n    }\\n\\n\\n    function decodeAndGetEnumValueForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"F_contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetUIntValueForForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedState[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedState[attributeKey]);\\n    }\\n}\\n\",\"keccak256\":\"0x8ea00bd6be196c2c740901169da39a8a9224d4b3c8655408d4beb9dc6d20dc6f\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"},\"contracts/Core/CEG/CEGEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary CEGEncoder {\\n\\n    function storeInPackedTerms(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedTerms[attributeKey] == value) return;\\n        asset.packedTerms[attributeKey] = value;\\n    }\\n    \\n    /**\\n     * @dev Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\\n     * @notice All non zero values of the overwrittenTerms object are stored.\\n     * It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\\n     */\\n    function encodeAndSetCEGTerms(Asset storage asset, CEGTerms memory terms) external {\\n        storeInPackedTerms(\\n            asset,\\n            \\\"enums\\\",\\n            bytes32(uint256(uint8(terms.contractType))) << 248 |\\n            bytes32(uint256(uint8(terms.calendar))) << 240 |\\n            bytes32(uint256(uint8(terms.contractRole))) << 232 |\\n            bytes32(uint256(uint8(terms.dayCountConvention))) << 224 |\\n            bytes32(uint256(uint8(terms.businessDayConvention))) << 216 |\\n            bytes32(uint256(uint8(terms.endOfMonthConvention))) << 208 |\\n            bytes32(uint256(uint8(terms.feeBasis))) << 200 |\\n            bytes32(uint256(uint8(terms.creditEventTypeCovered))) << 192\\n        );\\n\\n        storeInPackedTerms(asset, \\\"currency\\\", bytes32(uint256(terms.currency) << 96));\\n        storeInPackedTerms(asset, \\\"settlementCurrency\\\", bytes32(uint256(terms.settlementCurrency) << 96));\\n\\n        storeInPackedTerms(asset, \\\"contractDealDate\\\", bytes32(terms.contractDealDate));\\n        storeInPackedTerms(asset, \\\"statusDate\\\", bytes32(terms.statusDate));\\n        storeInPackedTerms(asset, \\\"maturityDate\\\", bytes32(terms.maturityDate));\\n        storeInPackedTerms(asset, \\\"purchaseDate\\\", bytes32(terms.purchaseDate));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfFee\\\", bytes32(terms.cycleAnchorDateOfFee));\\n\\n        storeInPackedTerms(asset, \\\"notionalPrincipal\\\", bytes32(terms.notionalPrincipal));\\n        \\n        storeInPackedTerms(asset, \\\"feeRate\\\", bytes32(terms.feeRate));\\n        storeInPackedTerms(asset, \\\"feeAccrued\\\", bytes32(terms.feeAccrued));\\n        storeInPackedTerms(asset, \\\"priceAtPurchaseDate\\\", bytes32(terms.priceAtPurchaseDate));\\n        storeInPackedTerms(asset, \\\"priceAtTerminationDate\\\", bytes32(terms.priceAtTerminationDate));\\n\\n        storeInPackedTerms(asset, \\\"coverageOfCreditEnhancement\\\", bytes32(terms.coverageOfCreditEnhancement));\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"gracePeriod\\\",\\n            bytes32(uint256(terms.gracePeriod.i)) << 24 |\\n            bytes32(uint256(terms.gracePeriod.p)) << 16 |\\n            bytes32(uint256((terms.gracePeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"delinquencyPeriod\\\",\\n            bytes32(uint256(terms.delinquencyPeriod.i)) << 24 |\\n            bytes32(uint256(terms.delinquencyPeriod.p)) << 16 |\\n            bytes32(uint256((terms.delinquencyPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfFee\\\",\\n            bytes32(uint256(terms.cycleOfFee.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfFee.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfFee.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfFee.isSet) ? 1 : 0))\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_type_role\\\",\\n            bytes32(uint256(terms.contractReference_1._type)) << 16 |\\n            bytes32(uint256(terms.contractReference_1.role)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_object\\\",\\n            terms.contractReference_1.object\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_object2\\\",\\n            terms.contractReference_1.object2\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_type_role\\\",\\n            bytes32(uint256(terms.contractReference_2._type)) << 16 |\\n            bytes32(uint256(terms.contractReference_2.role)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_object\\\",\\n            terms.contractReference_2.object\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_object2\\\",\\n            terms.contractReference_2.object2\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and loads CEGTerms\\n     */\\n    function decodeAndGetCEGTerms(Asset storage asset) external view returns (CEGTerms memory) {\\n        return CEGTerms(\\n            ContractType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248))),\\n            Calendar(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240))),\\n            ContractRole(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232))),\\n            DayCountConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224))),\\n            BusinessDayConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216))),\\n            EndOfMonthConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208))),\\n            FeeBasis(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200))),\\n            ContractPerformance(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 192))),\\n\\n            address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96)),\\n            address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96)),\\n\\n            uint256(asset.packedTerms[\\\"contractDealDate\\\"]),\\n            uint256(asset.packedTerms[\\\"statusDate\\\"]),\\n            uint256(asset.packedTerms[\\\"maturityDate\\\"]),\\n            uint256(asset.packedTerms[\\\"purchaseDate\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfFee\\\"]),\\n\\n            int256(asset.packedTerms[\\\"notionalPrincipal\\\"]),\\n\\n            int256(asset.packedTerms[\\\"feeRate\\\"]),\\n            int256(asset.packedTerms[\\\"feeAccrued\\\"]),\\n            int256(asset.packedTerms[\\\"priceAtPurchaseDate\\\"]),\\n            int256(asset.packedTerms[\\\"priceAtTerminationDate\\\"]),\\n\\n            int256(asset.packedTerms[\\\"coverageOfCreditEnhancement\\\"]),\\n\\n            IP(\\n                uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"gracePeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfFee\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfFee\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfFee\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfFee\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n\\n            ContractReference(\\n                asset.packedTerms[\\\"contractReference_1_object\\\"],\\n                asset.packedTerms[\\\"contractReference_1_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 8)))\\n            ),\\n            ContractReference(\\n                asset.packedTerms[\\\"contractReference_2_object\\\"],\\n                asset.packedTerms[\\\"contractReference_2_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 8)))\\n            )\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForCEGAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == \\\"contractType\\\") {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"calendar\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240));\\n        } else if (attributeKey == bytes32(\\\"contractRole\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232));\\n        } else if (attributeKey == bytes32(\\\"dayCountConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224));\\n        } else if (attributeKey == bytes32(\\\"businessDayConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216));\\n        } else if (attributeKey == bytes32(\\\"endOfMonthConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208));\\n        } else if (attributeKey == bytes32(\\\"feeBasis\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200));\\n        } else if (attributeKey == bytes32(\\\"contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 192));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetAddressValueForForCEGAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (attributeKey == bytes32(\\\"currency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96));\\n        } else if (attributeKey == bytes32(\\\"settlementCurrency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96));\\n        } else {\\n            return address(0);\\n        }   \\n    }\\n\\n    function decodeAndGetBytes32ValueForForCEGAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return asset.packedTerms[attributeKey];\\n    }\\n\\n    function decodeAndGetUIntValueForForCEGAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForCEGAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetPeriodValueForForCEGAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IP memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"gracePeriod\\\")\\n            || attributeKey == bytes32(\\\"delinquencyPeriod\\\")\\n        ) {\\n            return IP(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                (asset.packedTerms[attributeKey] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IP(0, P(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetCycleValueForForCEGAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IPS memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"cycleOfFee\\\")\\n        ) {\\n            return IPS(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[attributeKey] >> 8))),\\n                (asset.packedTerms[attributeKey] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IPS(0, P(0), S(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetContractReferenceValueForCEGAttribute(Asset storage asset , bytes32 attributeKey )\\n        external\\n        view\\n        returns (ContractReference memory)\\n    {\\n        if (attributeKey == bytes32(\\\"contractReference_1\\\")) {\\n            return ContractReference(\\n                asset.packedTerms[\\\"contractReference_1_object\\\"],\\n                asset.packedTerms[\\\"contractReference_1_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 8)))\\n            );\\n        } else if (attributeKey == bytes32(\\\"contractReference_2\\\")) {\\n            return ContractReference(\\n                asset.packedTerms[\\\"contractReference_2_object\\\"],\\n                asset.packedTerms[\\\"contractReference_2_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 8)))\\n            );\\n        } else {\\n            return ContractReference(\\n                bytes32(0),\\n                bytes32(0),\\n                ContractReferenceType(0),\\n                ContractReferenceRole(0)\\n            );\\n        }\\n    }\\n}\",\"keccak256\":\"0x0d4c3339c691fcc522ec0a8dc91639717fdaaef988b7b9d5bb973f5f1cd25d4b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x611ef2610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100a75760003560e01c80636749043d116100705780636749043d146101375780639abd4ce414610157578063af08bc95146100f7578063bf5f9be314610177578063ce59fef814610197576100a7565b8062908ced146100ac578063188300ba146100d55780632b34c55f146100f7578063360022d6146100f757806365ef23a414610117575b600080fd5b6100bf6100ba36600461193f565b6101b7565b6040516100cc9190611e02565b60405180910390f35b8180156100e157600080fd5b506100f56100f0366004611960565b6103a9565b005b61010a61010536600461193f565b61092c565b6040516100cc9190611c24565b61012a610125366004611927565b610942565b6040516100cc9190611c2d565b61014a61014536600461193f565b611144565b6040516100cc9190611c10565b61016a61016536600461193f565b6111cc565b6040516100cc9190611dd8565b61018a61018536600461193f565b611409565b6040516100cc9190611df4565b6101aa6101a536600461193f565b6114f1565b6040516100cc9190611de6565b6000816b636f6e74726163745479706560a01b14156101f3575064656e756d7360d81b6000908152600e8301602052604090205460f81c6103a3565b6731b0b632b73230b960c11b821415610229575064656e756d7360d81b6000908152600e8301602052604090205460f01c6103a3565b6b636f6e7472616374526f6c6560a01b821415610263575064656e756d7360d81b6000908152600e8301602052604090205460e81c6103a3565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b8214156102a3575064656e756d7360d81b6000908152600e8301602052604090205460e01c6103a3565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b8214156102e6575064656e756d7360d81b6000908152600e8301602052604090205460d81c6103a3565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415610328575064656e756d7360d81b6000908152600e8301602052604090205460d01c6103a3565b67666565426173697360c01b82141561035e575064656e756d7360d81b6000908152600e8301602052604090205460c81c6103a3565b72636f6e7472616374506572666f726d616e636560681b82141561039f575064656e756d7360d81b6000908152600e8301602052604090205460c01c6103a3565b5060005b92915050565b61048f8264656e756d7360d81b60c08460e0015160058111156103c857fe5b60ff1660001b901b60c88560c0015160018111156103e257fe5b60ff1660001b901b60d08660a0015160018111156103fc57fe5b60ff1660001b901b60d88760800151600881111561041657fe5b60ff1660001b901b60e08860600151600581111561043057fe5b60ff1660001b901b60e88960400151600c81111561044a57fe5b60ff1660001b901b60f08a60200151600181111561046457fe5b60ff1660001b901b60f88b60000151601281111561047e57fe5b60ff16901b171717171717176115de565b6104ba826763757272656e637960c01b60608461010001516001600160a01b0316901b60001b6115de565b6104ef8271736574746c656d656e7443757272656e637960701b60608461012001516001600160a01b0316901b60001b6115de565b610515826f636f6e74726163744465616c4461746560801b83610140015160001b6115de565b61053582697374617475734461746560b01b83610160015160001b6115de565b610557826b6d617475726974794461746560a01b83610180015160001b6115de565b610579826b70757263686173654461746560a01b836101a0015160001b6115de565b6105a382736379636c65416e63686f72446174654f6646656560601b836101c0015160001b6115de565b6105ca82701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836101e0015160001b6115de565b6105e782666665655261746560c81b83610220015160001b6115de565b61060782691999595058d8dc9d595960b21b83610200015160001b6115de565b61063082727072696365417450757263686173654461746560681b83610240015160001b6115de565b61065c8275707269636541745465726d696e6174696f6e4461746560501b83610260015160001b6115de565b61068f827f636f7665726167654f66437265646974456e68616e63656d656e74000000000083610280015160001b6115de565b6106ee826a19dc9858d954195c9a5bd960aa1b6008846102a00151604001516106b95760006106bc565b60015b60ff1660001b901b6010856102a001516020015160058111156106db57fe5b6102a08701515160181b911b17176115de565b610753827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846102c001516040015161071e576000610721565b60015b60ff1660001b901b6010856102c0015160200151600581111561074057fe5b6102c08701515160181b911b17176115de565b6107ca82696379636c654f6646656560b01b836102e001516060015161077a57600061077d565b60015b60ff1660001b6008856102e0015160400151600181111561079a57fe5b60001b901b6010866102e001516020015160058111156107b657fe5b6102e08801515160181b911b1717176115de565b61081882600080516020611e7d83398151915260088461030001516060015160048111156107f457fe5b60001b901b601085610300015160400151600481111561081057fe5b901b176115de565b610849827918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b836103000151600001516115de565b61087d827f636f6e74726163745265666572656e63655f315f6f626a656374320000000000836103000151602001516115de565b6108c382600080516020611e9d83398151915260088461032001516060015160048111156108a757fe5b60001b901b601085610320015160400151600481111561081057fe5b6108f4827918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b836103200151600001516115de565b610928827f636f6e74726163745265666572656e63655f325f6f626a656374320000000000836103200151602001516115de565b5050565b6000908152600e91909101602052604090205490565b61094a611614565b604080516103408101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c601281111561097f57fe5b601281111561098a57fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660018111156109c257fe5b60018111156109cd57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c811115610a0557fe5b600c811115610a1057fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166005811115610a4857fe5b6005811115610a5357fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166008811115610a8b57fe5b6008811115610a9657fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610ace57fe5b6001811115610ad957fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610b1157fe5b6001811115610b1c57fe5b815260200160c084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166005811115610b5457fe5b6005811115610b5f57fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c828701526f636f6e74726163744465616c4461746560801b85528383528185205481870152697374617475734461746560b01b85528383528185205460808701526b6d617475726974794461746560a01b85528383528185205460a08701526b70757263686173654461746560a01b85528383528185205460c0870152736379636c65416e63686f72446174654f6646656560601b85528383528185205460e0870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b855283835281852054610100870152666665655261746560c81b855283835281852054610120870152691999595058d8dc9d595960b21b855283835281852054610140870152727072696365417450757263686173654461746560681b85528383528185205461016087015275707269636541745465726d696e6174696f6e4461746560501b8552838352818520546101808701527f636f7665726167654f66437265646974456e68616e63656d656e7400000000008552838352818520546101a0870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526101c09093019282019060101c60ff166005811115610d7157fe5b6005811115610d7c57fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c600190811614610db8576000610dbb565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610e1957fe5b6005811115610e2457fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c600190811614610e66576000610e69565b60015b15159052815260408051608081018252696379636c654f6646656560b01b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610ec057fe5b6005811115610ecb57fe5b8152602001600886600e016000696379636c654f6646656560b01b815260200190815260200160002054901c60001c60ff166001811115610f0857fe5b6001811115610f1357fe5b8152696379636c654f6646656560b01b6000908152600e87016020908152604090912054910190600190811614610f4b576000610f4e565b60015b151590528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a65637432000000000083528181528483205481850152600080516020611e7d83398151915283529081529083902054930192909182019060101c60ff166004811115610ff057fe5b6004811115610ffb57fe5b8152602001600886600e016000600080516020611e7d833981519152815260200190815260200160002054901c60001c60ff16600481111561103957fe5b600481111561104457fe5b90528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a65637432000000000083528181528483205481850152600080516020611e9d83398151915283529081529083902054930192909182019060101c60ff1660048111156110e457fe5b60048111156110ef57fe5b8152602001600886600e016000600080516020611e9d833981519152815260200190815260200160002054901c60001c60ff16600481111561112d57fe5b600481111561113857fe5b9052905290505b919050565b60006763757272656e637960c01b82141561117f57506763757272656e637960c01b6000908152600e8301602052604090205460601c6103a3565b71736574746c656d656e7443757272656e637960701b82141561039f575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6103a3565b6111d4611707565b72636f6e74726163745265666572656e63655f3160681b8214156112e557604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a65637432000000000083528181528483205481850152600080516020611e7d83398151915283525282902054909182019060101c60ff16600481111561128857fe5b600481111561129357fe5b8152602001600885600e016000600080516020611e7d833981519152815260200190815260200160002054901c60001c60ff1660048111156112d157fe5b60048111156112dc57fe5b905290506103a3565b7231b7b73a3930b1ba2932b332b932b731b2af9960691b8214156113e257604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a65637432000000000083528181528483205481850152600080516020611e9d83398151915283525282902054909182019060101c60ff16600481111561139957fe5b60048111156113a457fe5b8152602001600885600e016000600080516020611e9d833981519152815260200190815260200160002054901c60001c60ff1660048111156112d157fe5b604080516080810182526000808252602082018190529091820190815260200160006112d1565b61141161172e565b6a19dc9858d954195c9a5bd960aa1b82148061144057507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b156114ca57604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561148457fe5b600581111561148f57fe5b81526000848152600e8601602090815260409091205491019060081c6001908116146114bc5760006114bf565b60015b1515905290506103a3565b6040805160608101909152600080825260208201905b8152600060209091015290506103a3565b6114f9611751565b696379636c654f6646656560b01b8214156115bd57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561154d57fe5b600581111561155857fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561158857fe5b600181111561159357fe5b81526000848152600e860160209081526040909120549101906001908116146114bc5760006114bf565b604080516080810190915260008082526020820190815260200160006114e0565b6000828152600e840160205260409020548114156115fb5761160f565b6000828152600e8401602052604090208190555b505050565b60408051610340810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016116ce61172e565b81526020016116db61172e565b81526020016116e8611751565b81526020016116f5611707565b8152602001611702611707565b905290565b60408051608081018252600080825260208201819052909182019081526020016000611702565b6040805160608101909152600080825260208201905b8152600060209091015290565b60408051608081019091526000808252602082019081526020016000611744565b80356001600160a01b038116811461113f57600080fd5b8035801515811461113f57600080fd5b80356009811061113f57600080fd5b803561113f81611e55565b803561113f81611e62565b8035600d811061113f57600080fd5b80356013811061113f57600080fd5b6000608082840312156117ed578081fd5b6040516080810181811067ffffffffffffffff8211171561180a57fe5b80604052508091508235815260208301356020820152604083013561182e81611e6f565b6040820152606083013561184181611e6f565b6060919091015292915050565b60006080828403121561185f578081fd5b6040516080810181811067ffffffffffffffff8211171561187c57fe5b60405282358152905080602083013561189481611e62565b602082015260408301356118a781611e55565b60408201526118b860608401611789565b60608201525092915050565b6000606082840312156118d5578081fd5b6040516060810181811067ffffffffffffffff821117156118f257fe5b60405282358152905080602083013561190a81611e62565b602082015261191b60408401611789565b60408201525092915050565b600060208284031215611938578081fd5b5035919050565b60008060408385031215611951578081fd5b50508035926020909101359150565b600080828403610500811215611974578283fd5b833592506104e0601f198201121561198a578182fd5b50611996610340611e10565b6119a2602085016117cd565b81526119b0604085016117a8565b60208201526119c1606085016117be565b60408201526119d2608085016117b3565b60608201526119e360a08501611799565b60808201526119f460c085016117a8565b60a0820152611a0560e085016117a8565b60c0820152610100611a188186016117b3565b60e0830152610120611a2b818701611772565b828401526101409150611a3f828701611772565b8184015250610160808601358284015261018091508186013581840152506101a080860135828401526101c091508186013581840152506101e08086013582840152610200915081860135818401525061022080860135828401526102409150818601358184015250610260808601358284015261028091508186013581840152506102a080860135828401526102c09150611add878388016118c4565b90830152610320611af0878783016118c4565b82840152611b0287610380880161184e565b6102e0840152611b168761040088016117dc565b610300840152611b2a8761048088016117dc565b9083015250919491935090915050565b6001600160a01b03169052565b60098110611b5157fe5b9052565b611b5181611e34565b611b5181611e41565b600d8110611b5157fe5b60138110611b5157fe5b80518252602081015160208301526040810151611b9781611e4b565b60408301526060810151611baa81611e4b565b806060840152505050565b805182526020810151611bc781611e41565b60208301526040810151611bda81611e34565b60408301526060908101511515910152565b805182526020810151611bfe81611e41565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b60006104e082019050611c41828451611b71565b6020830151611c536020840182611b55565b506040830151611c666040840182611b67565b506060830151611c796060840182611b5e565b506080830151611c8c6080840182611b47565b5060a0830151611c9f60a0840182611b55565b5060c0830151611cb260c0840182611b55565b5060e0830151611cc560e0840182611b5e565b5061010080840151611cd982850182611b3a565b505061012080840151611cee82850182611b3a565b50506101408381015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151611d7c82850182611bec565b50506102c0830151610300611d9381850183611bec565b6102e08501519150611da9610360850183611bb5565b8401519050611dbc6103e0840182611b7b565b50610320830151611dd1610460840182611b7b565b5092915050565b608081016103a38284611b7b565b608081016103a38284611bb5565b606081016103a38284611bec565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715611e2c57fe5b604052919050565b60028110611e3e57fe5b50565b60068110611e3e57fe5b60058110611e3e57fe5b60028110611e3e57600080fd5b60068110611e3e57600080fd5b60058110611e3e57600080fdfe636f6e74726163745265666572656e63655f315f747970655f726f6c65000000636f6e74726163745265666572656e63655f325f747970655f726f6c65000000a26469706673582212206db091043aba3adf2da151d871be8bc0159e01ee37b59683937e442cb183b6e364736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100a75760003560e01c80636749043d116100705780636749043d146101375780639abd4ce414610157578063af08bc95146100f7578063bf5f9be314610177578063ce59fef814610197576100a7565b8062908ced146100ac578063188300ba146100d55780632b34c55f146100f7578063360022d6146100f757806365ef23a414610117575b600080fd5b6100bf6100ba36600461193f565b6101b7565b6040516100cc9190611e02565b60405180910390f35b8180156100e157600080fd5b506100f56100f0366004611960565b6103a9565b005b61010a61010536600461193f565b61092c565b6040516100cc9190611c24565b61012a610125366004611927565b610942565b6040516100cc9190611c2d565b61014a61014536600461193f565b611144565b6040516100cc9190611c10565b61016a61016536600461193f565b6111cc565b6040516100cc9190611dd8565b61018a61018536600461193f565b611409565b6040516100cc9190611df4565b6101aa6101a536600461193f565b6114f1565b6040516100cc9190611de6565b6000816b636f6e74726163745479706560a01b14156101f3575064656e756d7360d81b6000908152600e8301602052604090205460f81c6103a3565b6731b0b632b73230b960c11b821415610229575064656e756d7360d81b6000908152600e8301602052604090205460f01c6103a3565b6b636f6e7472616374526f6c6560a01b821415610263575064656e756d7360d81b6000908152600e8301602052604090205460e81c6103a3565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b8214156102a3575064656e756d7360d81b6000908152600e8301602052604090205460e01c6103a3565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b8214156102e6575064656e756d7360d81b6000908152600e8301602052604090205460d81c6103a3565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415610328575064656e756d7360d81b6000908152600e8301602052604090205460d01c6103a3565b67666565426173697360c01b82141561035e575064656e756d7360d81b6000908152600e8301602052604090205460c81c6103a3565b72636f6e7472616374506572666f726d616e636560681b82141561039f575064656e756d7360d81b6000908152600e8301602052604090205460c01c6103a3565b5060005b92915050565b61048f8264656e756d7360d81b60c08460e0015160058111156103c857fe5b60ff1660001b901b60c88560c0015160018111156103e257fe5b60ff1660001b901b60d08660a0015160018111156103fc57fe5b60ff1660001b901b60d88760800151600881111561041657fe5b60ff1660001b901b60e08860600151600581111561043057fe5b60ff1660001b901b60e88960400151600c81111561044a57fe5b60ff1660001b901b60f08a60200151600181111561046457fe5b60ff1660001b901b60f88b60000151601281111561047e57fe5b60ff16901b171717171717176115de565b6104ba826763757272656e637960c01b60608461010001516001600160a01b0316901b60001b6115de565b6104ef8271736574746c656d656e7443757272656e637960701b60608461012001516001600160a01b0316901b60001b6115de565b610515826f636f6e74726163744465616c4461746560801b83610140015160001b6115de565b61053582697374617475734461746560b01b83610160015160001b6115de565b610557826b6d617475726974794461746560a01b83610180015160001b6115de565b610579826b70757263686173654461746560a01b836101a0015160001b6115de565b6105a382736379636c65416e63686f72446174654f6646656560601b836101c0015160001b6115de565b6105ca82701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836101e0015160001b6115de565b6105e782666665655261746560c81b83610220015160001b6115de565b61060782691999595058d8dc9d595960b21b83610200015160001b6115de565b61063082727072696365417450757263686173654461746560681b83610240015160001b6115de565b61065c8275707269636541745465726d696e6174696f6e4461746560501b83610260015160001b6115de565b61068f827f636f7665726167654f66437265646974456e68616e63656d656e74000000000083610280015160001b6115de565b6106ee826a19dc9858d954195c9a5bd960aa1b6008846102a00151604001516106b95760006106bc565b60015b60ff1660001b901b6010856102a001516020015160058111156106db57fe5b6102a08701515160181b911b17176115de565b610753827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846102c001516040015161071e576000610721565b60015b60ff1660001b901b6010856102c0015160200151600581111561074057fe5b6102c08701515160181b911b17176115de565b6107ca82696379636c654f6646656560b01b836102e001516060015161077a57600061077d565b60015b60ff1660001b6008856102e0015160400151600181111561079a57fe5b60001b901b6010866102e001516020015160058111156107b657fe5b6102e08801515160181b911b1717176115de565b61081882600080516020611e7d83398151915260088461030001516060015160048111156107f457fe5b60001b901b601085610300015160400151600481111561081057fe5b901b176115de565b610849827918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b836103000151600001516115de565b61087d827f636f6e74726163745265666572656e63655f315f6f626a656374320000000000836103000151602001516115de565b6108c382600080516020611e9d83398151915260088461032001516060015160048111156108a757fe5b60001b901b601085610320015160400151600481111561081057fe5b6108f4827918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b836103200151600001516115de565b610928827f636f6e74726163745265666572656e63655f325f6f626a656374320000000000836103200151602001516115de565b5050565b6000908152600e91909101602052604090205490565b61094a611614565b604080516103408101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c601281111561097f57fe5b601281111561098a57fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660018111156109c257fe5b60018111156109cd57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c811115610a0557fe5b600c811115610a1057fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166005811115610a4857fe5b6005811115610a5357fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166008811115610a8b57fe5b6008811115610a9657fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610ace57fe5b6001811115610ad957fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610b1157fe5b6001811115610b1c57fe5b815260200160c084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166005811115610b5457fe5b6005811115610b5f57fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c828701526f636f6e74726163744465616c4461746560801b85528383528185205481870152697374617475734461746560b01b85528383528185205460808701526b6d617475726974794461746560a01b85528383528185205460a08701526b70757263686173654461746560a01b85528383528185205460c0870152736379636c65416e63686f72446174654f6646656560601b85528383528185205460e0870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b855283835281852054610100870152666665655261746560c81b855283835281852054610120870152691999595058d8dc9d595960b21b855283835281852054610140870152727072696365417450757263686173654461746560681b85528383528185205461016087015275707269636541745465726d696e6174696f6e4461746560501b8552838352818520546101808701527f636f7665726167654f66437265646974456e68616e63656d656e7400000000008552838352818520546101a0870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526101c09093019282019060101c60ff166005811115610d7157fe5b6005811115610d7c57fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c600190811614610db8576000610dbb565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610e1957fe5b6005811115610e2457fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c600190811614610e66576000610e69565b60015b15159052815260408051608081018252696379636c654f6646656560b01b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610ec057fe5b6005811115610ecb57fe5b8152602001600886600e016000696379636c654f6646656560b01b815260200190815260200160002054901c60001c60ff166001811115610f0857fe5b6001811115610f1357fe5b8152696379636c654f6646656560b01b6000908152600e87016020908152604090912054910190600190811614610f4b576000610f4e565b60015b151590528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a65637432000000000083528181528483205481850152600080516020611e7d83398151915283529081529083902054930192909182019060101c60ff166004811115610ff057fe5b6004811115610ffb57fe5b8152602001600886600e016000600080516020611e7d833981519152815260200190815260200160002054901c60001c60ff16600481111561103957fe5b600481111561104457fe5b90528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a65637432000000000083528181528483205481850152600080516020611e9d83398151915283529081529083902054930192909182019060101c60ff1660048111156110e457fe5b60048111156110ef57fe5b8152602001600886600e016000600080516020611e9d833981519152815260200190815260200160002054901c60001c60ff16600481111561112d57fe5b600481111561113857fe5b9052905290505b919050565b60006763757272656e637960c01b82141561117f57506763757272656e637960c01b6000908152600e8301602052604090205460601c6103a3565b71736574746c656d656e7443757272656e637960701b82141561039f575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6103a3565b6111d4611707565b72636f6e74726163745265666572656e63655f3160681b8214156112e557604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a65637432000000000083528181528483205481850152600080516020611e7d83398151915283525282902054909182019060101c60ff16600481111561128857fe5b600481111561129357fe5b8152602001600885600e016000600080516020611e7d833981519152815260200190815260200160002054901c60001c60ff1660048111156112d157fe5b60048111156112dc57fe5b905290506103a3565b7231b7b73a3930b1ba2932b332b932b731b2af9960691b8214156113e257604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a65637432000000000083528181528483205481850152600080516020611e9d83398151915283525282902054909182019060101c60ff16600481111561139957fe5b60048111156113a457fe5b8152602001600885600e016000600080516020611e9d833981519152815260200190815260200160002054901c60001c60ff1660048111156112d157fe5b604080516080810182526000808252602082018190529091820190815260200160006112d1565b61141161172e565b6a19dc9858d954195c9a5bd960aa1b82148061144057507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b156114ca57604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561148457fe5b600581111561148f57fe5b81526000848152600e8601602090815260409091205491019060081c6001908116146114bc5760006114bf565b60015b1515905290506103a3565b6040805160608101909152600080825260208201905b8152600060209091015290506103a3565b6114f9611751565b696379636c654f6646656560b01b8214156115bd57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561154d57fe5b600581111561155857fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561158857fe5b600181111561159357fe5b81526000848152600e860160209081526040909120549101906001908116146114bc5760006114bf565b604080516080810190915260008082526020820190815260200160006114e0565b6000828152600e840160205260409020548114156115fb5761160f565b6000828152600e8401602052604090208190555b505050565b60408051610340810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016116ce61172e565b81526020016116db61172e565b81526020016116e8611751565b81526020016116f5611707565b8152602001611702611707565b905290565b60408051608081018252600080825260208201819052909182019081526020016000611702565b6040805160608101909152600080825260208201905b8152600060209091015290565b60408051608081019091526000808252602082019081526020016000611744565b80356001600160a01b038116811461113f57600080fd5b8035801515811461113f57600080fd5b80356009811061113f57600080fd5b803561113f81611e55565b803561113f81611e62565b8035600d811061113f57600080fd5b80356013811061113f57600080fd5b6000608082840312156117ed578081fd5b6040516080810181811067ffffffffffffffff8211171561180a57fe5b80604052508091508235815260208301356020820152604083013561182e81611e6f565b6040820152606083013561184181611e6f565b6060919091015292915050565b60006080828403121561185f578081fd5b6040516080810181811067ffffffffffffffff8211171561187c57fe5b60405282358152905080602083013561189481611e62565b602082015260408301356118a781611e55565b60408201526118b860608401611789565b60608201525092915050565b6000606082840312156118d5578081fd5b6040516060810181811067ffffffffffffffff821117156118f257fe5b60405282358152905080602083013561190a81611e62565b602082015261191b60408401611789565b60408201525092915050565b600060208284031215611938578081fd5b5035919050565b60008060408385031215611951578081fd5b50508035926020909101359150565b600080828403610500811215611974578283fd5b833592506104e0601f198201121561198a578182fd5b50611996610340611e10565b6119a2602085016117cd565b81526119b0604085016117a8565b60208201526119c1606085016117be565b60408201526119d2608085016117b3565b60608201526119e360a08501611799565b60808201526119f460c085016117a8565b60a0820152611a0560e085016117a8565b60c0820152610100611a188186016117b3565b60e0830152610120611a2b818701611772565b828401526101409150611a3f828701611772565b8184015250610160808601358284015261018091508186013581840152506101a080860135828401526101c091508186013581840152506101e08086013582840152610200915081860135818401525061022080860135828401526102409150818601358184015250610260808601358284015261028091508186013581840152506102a080860135828401526102c09150611add878388016118c4565b90830152610320611af0878783016118c4565b82840152611b0287610380880161184e565b6102e0840152611b168761040088016117dc565b610300840152611b2a8761048088016117dc565b9083015250919491935090915050565b6001600160a01b03169052565b60098110611b5157fe5b9052565b611b5181611e34565b611b5181611e41565b600d8110611b5157fe5b60138110611b5157fe5b80518252602081015160208301526040810151611b9781611e4b565b60408301526060810151611baa81611e4b565b806060840152505050565b805182526020810151611bc781611e41565b60208301526040810151611bda81611e34565b60408301526060908101511515910152565b805182526020810151611bfe81611e41565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b60006104e082019050611c41828451611b71565b6020830151611c536020840182611b55565b506040830151611c666040840182611b67565b506060830151611c796060840182611b5e565b506080830151611c8c6080840182611b47565b5060a0830151611c9f60a0840182611b55565b5060c0830151611cb260c0840182611b55565b5060e0830151611cc560e0840182611b5e565b5061010080840151611cd982850182611b3a565b505061012080840151611cee82850182611b3a565b50506101408381015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151611d7c82850182611bec565b50506102c0830151610300611d9381850183611bec565b6102e08501519150611da9610360850183611bb5565b8401519050611dbc6103e0840182611b7b565b50610320830151611dd1610460840182611b7b565b5092915050565b608081016103a38284611b7b565b608081016103a38284611bb5565b606081016103a38284611bec565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715611e2c57fe5b604052919050565b60028110611e3e57fe5b50565b60068110611e3e57fe5b60058110611e3e57fe5b60028110611e3e57600080fd5b60068110611e3e57600080fd5b60058110611e3e57600080fdfe636f6e74726163745265666572656e63655f315f747970655f726f6c65000000636f6e74726163745265666572656e63655f325f747970655f726f6c65000000a26469706673582212206db091043aba3adf2da151d871be8bc0159e01ee37b59683937e442cb183b6e364736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decodeAndGetCEGTerms(Asset storage)": {
        "details": "Decode and loads CEGTerms"
      },
      "encodeAndSetCEGTerms(Asset storage,CEGTerms)": {
        "details": "Tightly pack and store only non-zero overwritten terms (LifecycleTerms)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "encodeAndSetCEGTerms(Asset storage,CEGTerms)": {
        "notice": "All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}