{
  "address": "0xBc75abB9b1ff03b748E14852fa49bf6dF791e2b0",
  "abi": [
    {
      "inputs": [],
      "name": "MAX_CYCLE_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_EVENT_SCHEDULE_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_POINT_ZERO",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EndOfMonthConvention",
          "name": "eomc",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "enum P",
              "name": "p",
              "type": "uint8"
            },
            {
              "internalType": "enum S",
              "name": "s",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isSet",
              "type": "bool"
            }
          ],
          "internalType": "struct IPS",
          "name": "cycle",
          "type": "tuple"
        }
      ],
      "name": "adjustEndOfMonthConvention",
      "outputs": [
        {
          "internalType": "enum EndOfMonthConvention",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum RedeemableByIssuer",
              "name": "redeemableByIssuer",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfDividend",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "nominalPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "issuePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "redemptionPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtTerminationDate",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "splitSettlementPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfDividend",
              "type": "tuple"
            }
          ],
          "internalType": "struct STKTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "segmentStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "segmentEnd",
          "type": "uint256"
        },
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "computeCyclicScheduleSegment",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        },
        {
          "internalType": "enum BusinessDayConvention",
          "name": "bdc",
          "type": "uint8"
        },
        {
          "internalType": "enum Calendar",
          "name": "calendar",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "computeEventTimeForEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum RedeemableByIssuer",
              "name": "redeemableByIssuer",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfDividend",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "nominalPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "issuePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "redemptionPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtTerminationDate",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "splitSettlementPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfDividend",
              "type": "tuple"
            }
          ],
          "internalType": "struct STKTerms",
          "name": "terms",
          "type": "tuple"
        }
      ],
      "name": "computeInitialState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum RedeemableByIssuer",
              "name": "redeemableByIssuer",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfDividend",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "nominalPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "issuePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "redemptionPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtTerminationDate",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "splitSettlementPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfDividend",
              "type": "tuple"
            }
          ],
          "internalType": "struct STKTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "lastScheduleTime",
          "type": "uint256"
        },
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "computeNextCyclicEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum RedeemableByIssuer",
              "name": "redeemableByIssuer",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfDividend",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "nominalPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "issuePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "redemptionPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtTerminationDate",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "splitSettlementPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfDividend",
              "type": "tuple"
            }
          ],
          "internalType": "struct STKTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "lastNonCyclicEvent",
          "type": "bytes32"
        }
      ],
      "name": "computeNextNonCyclicEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum RedeemableByIssuer",
              "name": "redeemableByIssuer",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfDividend",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "nominalPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "issuePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "redemptionPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtTerminationDate",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "splitSettlementPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfDividend",
              "type": "tuple"
            }
          ],
          "internalType": "struct STKTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "segmentStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "segmentEnd",
          "type": "uint256"
        }
      ],
      "name": "computeNonCyclicScheduleSegment",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum RedeemableByIssuer",
              "name": "redeemableByIssuer",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfDividend",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "nominalPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "issuePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "redemptionPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtTerminationDate",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "splitSettlementPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfDividend",
              "type": "tuple"
            }
          ],
          "internalType": "struct STKTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "externalData",
          "type": "bytes32"
        }
      ],
      "name": "computePayoffForEvent",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum RedeemableByIssuer",
              "name": "redeemableByIssuer",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfDividend",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "nominalPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "issuePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "redemptionPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtTerminationDate",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "splitSettlementPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfDividend",
              "type": "tuple"
            }
          ],
          "internalType": "struct STKTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "externalData",
          "type": "bytes32"
        }
      ],
      "name": "computeStateForEvent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractType",
      "outputs": [
        {
          "internalType": "enum ContractType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        }
      ],
      "name": "decodeEvent",
      "outputs": [
        {
          "internalType": "enum EventType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "scheduleTime",
          "type": "uint256"
        }
      ],
      "name": "encodeEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "getEpochOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum RedeemableByIssuer",
              "name": "redeemableByIssuer",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "contractDealDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfDividend",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "nominalPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "issuePrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "redemptionPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtTerminationDate",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "dividendPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "splitSettlementPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionRecordPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "redemptionPaymentPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfDividend",
              "type": "tuple"
            }
          ],
          "internalType": "struct STKTerms",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exerciseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastCouponFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastDividendFixingDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nextPrincipalRedemptionPayment",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "exerciseQuantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "quantity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "couponAmountFixed",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "marginFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "adjustmentFactor",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "dividendPaymentAmount",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "splitRatio",
              "type": "int256"
            }
          ],
          "internalType": "struct State",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "isEventScheduled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum BusinessDayConvention",
          "name": "convention",
          "type": "uint8"
        },
        {
          "internalType": "enum Calendar",
          "name": "calendar",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "shiftCalcTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum BusinessDayConvention",
          "name": "convention",
          "type": "uint8"
        },
        {
          "internalType": "enum Calendar",
          "name": "calendar",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "shiftEventTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f379c9f61de9a045fa5a3804bd77faaa07b1e09a79eac98716399dc063738d7",
  "receipt": {
    "to": null,
    "from": "0x6C51ECF949882c2183357B860FD82Dd4bb631840",
    "contractAddress": "0xBc75abB9b1ff03b748E14852fa49bf6dF791e2b0",
    "transactionIndex": 0,
    "gasUsed": "2259447",
    "logsBloom": "0x
    "blockHash": "0x9e5e7874470b68f06d790d81cf7c799295245f034b7afa2bc353b6b4db9e8cfe",
    "transactionHash": "0x8f379c9f61de9a045fa5a3804bd77faaa07b1e09a79eac98716399dc063738d7",
    "logs": [],
    "blockNumber": 39,
    "cumulativeGasUsed": "2259447",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9f67175c1fda3401d369e9c5efd0dbe5",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MAX_CYCLE_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EVENT_SCHEDULE_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_POINT_ZERO\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"eomc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycle\",\"type\":\"tuple\"}],\"name\":\"adjustEndOfMonthConvention\",\"outputs\":[{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum RedeemableByIssuer\",\"name\":\"redeemableByIssuer\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfDividend\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nominalPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"issuePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"redemptionPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtTerminationDate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"splitSettlementPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfDividend\",\"type\":\"tuple\"}],\"internalType\":\"struct STKTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"segmentEnd\",\"type\":\"uint256\"},{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"computeCyclicScheduleSegment\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"bdc\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"computeEventTimeForEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum RedeemableByIssuer\",\"name\":\"redeemableByIssuer\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfDividend\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nominalPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"issuePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"redemptionPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtTerminationDate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"splitSettlementPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfDividend\",\"type\":\"tuple\"}],\"internalType\":\"struct STKTerms\",\"name\":\"terms\",\"type\":\"tuple\"}],\"name\":\"computeInitialState\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum RedeemableByIssuer\",\"name\":\"redeemableByIssuer\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfDividend\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nominalPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"issuePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"redemptionPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtTerminationDate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"splitSettlementPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfDividend\",\"type\":\"tuple\"}],\"internalType\":\"struct STKTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastScheduleTime\",\"type\":\"uint256\"},{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"computeNextCyclicEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum RedeemableByIssuer\",\"name\":\"redeemableByIssuer\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfDividend\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nominalPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"issuePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"redemptionPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtTerminationDate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"splitSettlementPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfDividend\",\"type\":\"tuple\"}],\"internalType\":\"struct STKTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"lastNonCyclicEvent\",\"type\":\"bytes32\"}],\"name\":\"computeNextNonCyclicEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum RedeemableByIssuer\",\"name\":\"redeemableByIssuer\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfDividend\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nominalPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"issuePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"redemptionPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtTerminationDate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"splitSettlementPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfDividend\",\"type\":\"tuple\"}],\"internalType\":\"struct STKTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"segmentEnd\",\"type\":\"uint256\"}],\"name\":\"computeNonCyclicScheduleSegment\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum RedeemableByIssuer\",\"name\":\"redeemableByIssuer\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfDividend\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nominalPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"issuePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"redemptionPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtTerminationDate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"splitSettlementPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfDividend\",\"type\":\"tuple\"}],\"internalType\":\"struct STKTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"externalData\",\"type\":\"bytes32\"}],\"name\":\"computePayoffForEvent\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum RedeemableByIssuer\",\"name\":\"redeemableByIssuer\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfDividend\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nominalPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"issuePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"redemptionPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtTerminationDate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"splitSettlementPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfDividend\",\"type\":\"tuple\"}],\"internalType\":\"struct STKTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"externalData\",\"type\":\"bytes32\"}],\"name\":\"computeStateForEvent\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractType\",\"outputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"}],\"name\":\"decodeEvent\",\"outputs\":[{\"internalType\":\"enum EventType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"scheduleTime\",\"type\":\"uint256\"}],\"name\":\"encodeEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"getEpochOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum RedeemableByIssuer\",\"name\":\"redeemableByIssuer\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contractDealDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfDividend\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"nominalPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"issuePrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"redemptionPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtTerminationDate\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"dividendPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"splitSettlementPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionRecordPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"redemptionPaymentPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfDividend\",\"type\":\"tuple\"}],\"internalType\":\"struct STKTerms\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exerciseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCouponFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDividendFixingDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nextPrincipalRedemptionPayment\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"exerciseQuantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"quantity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"couponAmountFixed\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"marginFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"adjustmentFactor\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dividendPaymentAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"splitRatio\",\"type\":\"int256\"}],\"internalType\":\"struct State\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"isEventScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"convention\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"shiftCalcTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"convention\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"shiftEventTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"All numbers except unix timestamp are represented as multiple of 10 ** 18\",\"kind\":\"dev\",\"methods\":{\"adjustEndOfMonthConvention(uint8,uint256,(uint256,uint8,uint8,bool))\":{\"details\":\"The following is considered to dertermine if schedule dates are shifted to the end of month: - The convention SD (same day) means not adjusting, EM (end of month) means adjusting - Dates are only shifted if the schedule start date is an end-of-month date - Dates are only shifted if the schedule cycle is based on an \\\"M\\\" period unit or multiple thereof\",\"params\":{\"cycle\":\"the cycle struct\",\"eomc\":\"the end of month convention to adjust\",\"startTime\":\"timestamp of the cycle start\"},\"returns\":{\"_0\":\"the adjusted end of month convention\"}},\"computeCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256,uint8)\":{\"params\":{\"eventType\":\"eventType of the cyclic schedule\",\"segmentEnd\":\"end timestamp of the segment\",\"segmentStart\":\"start timestamp of the segment\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"event schedule segment\"}},\"computeEventTimeForEvent(bytes32,uint8,uint8,uint256)\":{\"details\":\"For optimization reasons not located in EventUtil by applying the BDC specified in the terms\"},\"computeInitialState((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)))\":{\"params\":{\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"the initial state of the contract\"}},\"computeNextCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint8)\":{\"params\":{\"eventType\":\"eventType of the cyclic schedule\",\"lastScheduleTime\":\"last occurrence of cyclic event\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"event schedule segment\"}},\"computeNextNonCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),bytes32)\":{\"details\":\"Assumes that non-cyclic events of the same event type have a unique schedule time param terms terms of the contract param lastNonCyclicEvent last non-cyclic event\",\"returns\":{\"_0\":\"next non-cyclic event\"}},\"computeNonCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256)\":{\"returns\":{\"_0\":\"segment of the non-cyclic schedule\"}},\"computePayoffForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)\":{\"params\":{\"_event\":\"event for which the payoff should be evaluated\",\"externalData\":\"external data needed for POF evaluation (e.g. fxRate)\",\"state\":\"current state of the contract\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"the payoff of the event\"}},\"computeStateForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)\":{\"params\":{\"_event\":\"event to be applied to the contract state\",\"externalData\":\"external data needed for STF evaluation (e.g. rate for RR events)\",\"state\":\"current state of the contract\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"the resulting contract state\"}},\"isEventScheduled(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bool,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))\":{\"params\":{\"state\":\"current state of the contract param hasUnderlying boolean indicating whether the contract has an underlying contract param underlyingState state of the underlying (empty state object if non-existing)\"},\"returns\":{\"_0\":\"boolean indicating whether event is still scheduled\"}}},\"title\":\"STKEngine\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adjustEndOfMonthConvention(uint8,uint256,(uint256,uint8,uint8,bool))\":{\"notice\":\"This function makes an adjustment on the end of month convention.\"},\"computeCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256,uint8)\":{\"notice\":\"Computes a schedule segment of cyclic contract events based on the contract terms and the specified timestamps.\"},\"computeEventTimeForEvent(bytes32,uint8,uint8,uint256)\":{\"notice\":\"Returns the event time for a given schedule time\"},\"computeInitialState((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)))\":{\"notice\":\"Initialize contract state space based on the contract terms.\"},\"computeNextCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint8)\":{\"notice\":\"Computes a schedule segment of cyclic contract events based on the contract terms and the specified timestamps.\"},\"computeNextNonCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),bytes32)\":{\"notice\":\"Computes the next non-cyclic contract events based on the contract terms and the timestamp on which the prev. event occured.\"},\"computeNonCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256)\":{\"notice\":\"Computes a schedule segment of non-cyclic contract events based on the contract terms and the specified timestamps. _param terms terms of the contract _param segmentStart start timestamp of the segment _param segmentEnd end timestamp of the segment\"},\"computePayoffForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)\":{\"notice\":\"Evaluates the payoff for an event under the current state of the contract.\"},\"computeStateForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)\":{\"notice\":\"Applies an event to the current state of a contract and returns the resulting contract state.\"},\"getEpochOffset(uint8)\":{\"notice\":\"Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp\"},\"isEventScheduled(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bool,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))\":{\"notice\":\"Verifies that the provided event is still scheduled under the terms, the current state of the contract and the current state of the underlying. param _event event for which to check if its still scheduled param terms terms of the contract\"},\"shiftCalcTime(uint256,uint8,uint8,uint256)\":{\"notice\":\"Used in POFs and STFs for DCFs. No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided.\"}},\"notice\":\"Inherits from BaseEngine by implementing STFs, POFs according to the ACTUS standard for a STK contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ACTUS/Engines/STK/STKEngine.sol\":\"STKEngine\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xba085261d44cf28d2583f7c8cdb2f0a6a495ff1a640f86d995ea9d36b42b0046\",\"license\":\"MIT\"},\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\n// enum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct State {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    // int256 delinquencyRate; not implemented\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionExercisePeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; // not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    int256 priceAtTerminationDate;\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\",\"keccak256\":\"0xdc4a72ed27c09ebbd6c76b352c94e3f2258ce309307a742b0436cf965d8acd27\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/BusinessDayConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n\\n/**\\n * @title BusinessDayConventions\\n * @notice Contains conventions of how to handle non-business days when generating schedules of events.\\n * The events schedule time can be shifted or not, if shifted it is possible that it is shifted to the next\\n * or previous valid business days, etc.\\n */\\ncontract BusinessDayConventions {\\n\\n    /**\\n     * @notice Used in POFs and STFs for DCFs.\\n     * No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided.\\n     */\\n    function shiftCalcTime(\\n        uint256 timestamp,\\n        BusinessDayConvention convention,\\n        Calendar calendar,\\n        uint256 maturityDate\\n    )\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        if (\\n            convention == BusinessDayConvention.CSF ||\\n            convention == BusinessDayConvention.CSMF ||\\n            convention == BusinessDayConvention.CSP ||\\n            convention == BusinessDayConvention.CSMP\\n        ) {\\n            return timestamp;\\n        }\\n\\n        return shiftEventTime(timestamp, convention, calendar, maturityDate);\\n    }\\n\\n    /*\\n     * @notice Used for generating event schedules (for single events and event cycles schedules).\\n     * This convention assumes that when shifting the events schedule time according\\n     * to a BDC, the time is shifted first and calculations are performed thereafter.\\n     * (Calculations in POFs and STFs are based on the shifted time as well)\\n     */\\n    function shiftEventTime(\\n        uint256 timestamp,\\n        BusinessDayConvention convention,\\n        Calendar calendar,\\n        uint256 maturityDate\\n    )\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        // do not shift if equal to maturity date\\n        if (timestamp == maturityDate) return timestamp;\\n\\n        // Shift/Calc Following, Calc/Shift following\\n        if (convention == BusinessDayConvention.SCF || convention == BusinessDayConvention.CSF) {\\n            return getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n        // Shift/Calc Modified Following, Calc/Shift Modified following\\n        // Same as unmodified if shifted date is in the same month, if not it returns the previous buiness-day\\n        } else if (convention == BusinessDayConvention.SCMF || convention == BusinessDayConvention.CSMF) {\\n            uint256 followingOrSameBusinessDay = getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n            if (BokkyPooBahsDateTimeLibrary.getMonth(followingOrSameBusinessDay) == BokkyPooBahsDateTimeLibrary.getMonth(timestamp)) {\\n                return followingOrSameBusinessDay;\\n            }\\n            return getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n        // Shift/Calc Preceeding, Calc/Shift Preceeding\\n        } else if (convention == BusinessDayConvention.SCP || convention == BusinessDayConvention.CSP) {\\n            return getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n        // Shift/Calc Modified Preceeding, Calc/Shift Modified Preceeding\\n        // Same as unmodified if shifted date is in the same month, if not it returns the following buiness-day\\n        } else if (convention == BusinessDayConvention.SCMP || convention == BusinessDayConvention.CSMP) {\\n            uint256 preceedingOrSameBusinessDay = getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n            if (BokkyPooBahsDateTimeLibrary.getMonth(preceedingOrSameBusinessDay) == BokkyPooBahsDateTimeLibrary.getMonth(timestamp)) {\\n                return preceedingOrSameBusinessDay;\\n            }\\n            return getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n        }\\n\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the following business day if a non-business day is provided.\\n     * (Returns the same day if calendar != MondayToFriday)\\n     */\\n    function getClosestBusinessDaySameDayOrFollowing(uint256 timestamp, Calendar calendar)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (calendar == Calendar.MF) {\\n            if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 6) {\\n                return BokkyPooBahsDateTimeLibrary.addDays(timestamp, 2);\\n            } else if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 7) {\\n                return BokkyPooBahsDateTimeLibrary.addDays(timestamp, 1);\\n            }\\n        }\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the previous buiness day if a non-businessday is provided.\\n     * (Returns the same day if calendar != MondayToFriday)\\n     */\\n    function getClosestBusinessDaySameDayOrPreceeding(uint256 timestamp, Calendar calendar)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (calendar == Calendar.MF) {\\n            if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 6) {\\n                return BokkyPooBahsDateTimeLibrary.subDays(timestamp, 1);\\n            } else if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 7) {\\n                return BokkyPooBahsDateTimeLibrary.subDays(timestamp, 2);\\n            }\\n        }\\n        return timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x1406e47e0631852d7cab09816927778609dd56893df469ecc7a492bb8b45aa67\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/ContractRoleConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n\\n/**\\n * @title ContractRoleConventions\\n */\\ncontract ContractRoleConventions {\\n\\n    /**\\n     * Returns the role sign for a given Contract Role.\\n     */\\n    function roleSign(ContractRole contractRole)\\n        internal\\n        pure\\n        returns (int8)\\n    {\\n        if (contractRole == ContractRole.RPA) return 1;\\n        if (contractRole == ContractRole.RPL) return -1;\\n\\n        if (contractRole == ContractRole.BUY) return 1;\\n        if (contractRole == ContractRole.SEL) return -1;\\n\\n        if (contractRole == ContractRole.RFL) return 1;\\n        if (contractRole == ContractRole.PFL) return -1;\\n\\n        revert(\\\"ContractRoleConvention.roleSign: ATTRIBUTE_NOT_FOUND\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf9a875b4c55500a23f8ac6bc854cb0f7bbc679f76127bf22e8a09410582641cc\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/DayCountConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\nimport \\\"../SignedMath.sol\\\";\\n\\n\\n/**\\n * @title DayCountConventions\\n * @notice Implements various ISDA day count conventions as specified by ACTUS\\n */\\ncontract DayCountConventions {\\n\\n    using SafeMath for uint;\\n    using SignedSafeMath for int;\\n    using SignedMath for int;\\n\\n    /**\\n     * Returns the fraction of the year between two timestamps.\\n     */\\n    function yearFraction(\\n        uint256 startTimestamp,\\n        uint256 endTimestamp,\\n        DayCountConvention ipdc,\\n        uint256 maturityDate\\n    )\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        require(endTimestamp >= startTimestamp, \\\"Core.yearFraction: START_NOT_BEFORE_END\\\");\\n        if (ipdc == DayCountConvention.AA) {\\n            return actualActual(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention.A360) {\\n            return actualThreeSixty(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention.A365) {\\n            return actualThreeSixtyFive(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention._30E360) {\\n            return thirtyEThreeSixty(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention._30E360ISDA) {\\n            return thirtyEThreeSixtyISDA(startTimestamp, endTimestamp, maturityDate);\\n        } else if (ipdc == DayCountConvention._28E336) {\\n            // not implemented yet\\n            revert(\\\"DayCountConvention.yearFraction: ATTRIBUTE_NOT_SUPPORTED.\\\");\\n        } else {\\n            revert(\\\"DayCountConvention.yearFraction: ATTRIBUTE_NOT_FOUND.\\\");\\n        }\\n    }\\n\\n    /**\\n     * ISDA A/A day count convention\\n     */\\n    function actualActual(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        uint256 d1Year = BokkyPooBahsDateTimeLibrary.getYear(startTime);\\n        uint256 d2Year = BokkyPooBahsDateTimeLibrary.getYear(endTime);\\n\\n        int256 firstBasis = (BokkyPooBahsDateTimeLibrary.isLeapYear(startTime)) ? 366 : 365;\\n\\n        if (d1Year == d2Year) {\\n            return int256(BokkyPooBahsDateTimeLibrary.diffDays(startTime, endTime)).floatDiv(firstBasis);\\n        }\\n\\n        int256 secondBasis = (BokkyPooBahsDateTimeLibrary.isLeapYear(endTime)) ? 366 : 365;\\n\\n        int256 firstFraction = int256(BokkyPooBahsDateTimeLibrary.diffDays(\\n            startTime,\\n            BokkyPooBahsDateTimeLibrary.timestampFromDate(d1Year.add(1), 1, 1)\\n        )).floatDiv(firstBasis);\\n        int256 secondFraction = int256(BokkyPooBahsDateTimeLibrary.diffDays(\\n            BokkyPooBahsDateTimeLibrary.timestampFromDate(d2Year, 1, 1),\\n            endTime\\n        )).floatDiv(secondBasis);\\n\\n        return firstFraction.add(secondFraction).add(int256(d2Year.sub(d1Year).sub(1)));\\n    }\\n\\n    /**\\n     * ISDA A/360 day count convention\\n     */\\n    function actualThreeSixty(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return (int256((endTime.sub(startTime)).div(86400)).floatDiv(360));\\n    }\\n\\n    /**\\n     * ISDA A/365-Fixed day count convention\\n     */\\n    function actualThreeSixtyFive(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return (int256((endTime.sub(startTime)).div(86400)).floatDiv(365));\\n    }\\n\\n    /**\\n     * ISDA 30E/360 day count convention\\n     */\\n    function thirtyEThreeSixty(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        uint256 d1Day;\\n        uint256 d1Month;\\n        uint256 d1Year;\\n\\n        uint256 d2Day;\\n        uint256 d2Month;\\n        uint256 d2Year;\\n\\n        (d1Year, d1Month, d1Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(startTime);\\n        (d2Year, d2Month, d2Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(endTime);\\n\\n        if (d1Day == 31) {\\n            d1Day = 30;\\n        }\\n\\n        if (d2Day == 31) {\\n            d2Day = 30;\\n        }\\n\\n        int256 delD = int256(d2Day).sub(int256(d1Day));\\n        int256 delM = int256(d2Month).sub(int256(d1Month));\\n        int256 delY = int256(d2Year).sub(int256(d1Year));\\n\\n        return ((delY.mul(360).add(delM.mul(30)).add(delD)).floatDiv(360));\\n    }\\n\\n    /**\\n     * ISDA 30E/360-ISDA day count convention\\n     */\\n    function thirtyEThreeSixtyISDA(uint256 startTime, uint256 endTime, uint256 maturityDate)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        uint256 d1Day;\\n        uint256 d1Month;\\n        uint256 d1Year;\\n\\n        uint256 d2Day;\\n        uint256 d2Month;\\n        uint256 d2Year;\\n\\n        (d1Year, d1Month, d1Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(startTime);\\n        (d2Year, d2Month, d2Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(endTime);\\n\\n        if (d1Day == BokkyPooBahsDateTimeLibrary.getDaysInMonth(startTime)) {\\n            d1Day = 30;\\n        }\\n\\n        if (!(endTime == maturityDate && d2Month == 2) && d2Day == BokkyPooBahsDateTimeLibrary.getDaysInMonth(endTime)) {\\n            d2Day = 30;\\n        }\\n\\n        int256 delD = int256(d2Day).sub(int256(d1Day));\\n        int256 delM = int256(d2Month).sub(int256(d1Month));\\n        int256 delY = int256(d2Year).sub(int256(d1Year));\\n\\n        return ((delY.mul(360).add(delM.mul(30)).add(delD)).floatDiv(360));\\n    }\\n}\",\"keccak256\":\"0x1e5e71208d4b8a20b52ac226926a2dfaa1eb128b69694a3db2767f0c0d724bef\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/EndOfMonthConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n\\n/**\\n * @title EndOfMonthConventions\\n * @notice Implements the ACTUS end of month convention.\\n */\\ncontract EndOfMonthConventions {\\n\\n    /**\\n     * This function makes an adjustment on the end of month convention.\\n     * @dev The following is considered to dertermine if schedule dates are shifted to the end of month:\\n     * - The convention SD (same day) means not adjusting, EM (end of month) means adjusting\\n     * - Dates are only shifted if the schedule start date is an end-of-month date\\n     * - Dates are only shifted if the schedule cycle is based on an \\\"M\\\" period unit or multiple thereof\\n     * @param eomc the end of month convention to adjust\\n     * @param startTime timestamp of the cycle start\\n     * @param cycle the cycle struct\\n     * @return the adjusted end of month convention\\n     */\\n    function adjustEndOfMonthConvention(\\n        EndOfMonthConvention eomc,\\n        uint256 startTime,\\n        IPS memory cycle\\n    )\\n        public\\n        pure\\n        returns (EndOfMonthConvention)\\n    {\\n        if (eomc == EndOfMonthConvention.EOM) {\\n            // check if startTime is last day in month and schedule has month based period\\n            // otherwise switch to SD convention\\n            if (\\n                BokkyPooBahsDateTimeLibrary.getDay(startTime) == BokkyPooBahsDateTimeLibrary.getDaysInMonth(startTime) &&\\n                (cycle.p == P.M || cycle.p == P.Q || cycle.p == P.H)\\n            ) {\\n                return EndOfMonthConvention.EOM;\\n            }\\n            return EndOfMonthConvention.SD;\\n        } else if (eomc == EndOfMonthConvention.SD) {\\n            return EndOfMonthConvention.SD;\\n        }\\n        revert(\\\"EndOfMonthConvention.adjustEndOfMonthConvention: ATTRIBUTE_NOT_FOUND.\\\");\\n    }\\n\\n    /**\\n\\t * This function is for the EndOfMonthConvention.EOM convention and\\n\\t * shifts a timestamp to the last day of the month.\\n\\t * @param timestamp the timestmap to shift\\n\\t * @return the shifted timestamp\\n\\t */\\n\\tfunction shiftEndOfMonth(uint256 timestamp)\\n\\t  internal\\n\\t  pure\\n\\t  returns (uint256)\\n\\t{\\n        // // check if startTime is last day in month and schedule has month based period\\n        // // otherwise switch to SD convention\\n        // if (\\n        //     eomc != EndOfMonthConvention.EOM\\n        //     || BokkyPooBahsDateTimeLibrary.getDay(startTime) != BokkyPooBahsDateTimeLibrary.getDaysInMonth(startTime)\\n        //     || (cycle.p == P.M || cycle.p == P.Q || cycle.p == P.H)\\n        // ) {\\n        //     // SD\\n        //     return timestamp;\\n        // }\\n\\n\\t\\tuint256 year;\\n\\t\\tuint256 month;\\n\\t\\tuint256 day;\\n\\t\\t(year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n\\t\\tuint256 lastDayOfMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\\n\\n\\t\\treturn BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, lastDayOfMonth);\\n\\t}\\n}\\n\",\"keccak256\":\"0xdf4d28ba01767a6e737bdcf2e8e9e08143f9cd08a6d62ed90780031c4811876f\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Core.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ACTUSTypes.sol\\\";\\r\\nimport \\\"./ACTUSConstants.sol\\\";\\r\\nimport \\\"./Utils/Utils.sol\\\";\\r\\nimport \\\"./Conventions/BusinessDayConventions.sol\\\";\\r\\nimport \\\"./Conventions/ContractRoleConventions.sol\\\";\\r\\nimport \\\"./Conventions/DayCountConventions.sol\\\";\\r\\nimport \\\"./Conventions/EndOfMonthConventions.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Core\\r\\n * @notice Contains all type definitions, conventions as specified by the ACTUS Standard\\r\\n * and utility methods for generating event schedules\\r\\n */\\r\\ncontract Core is\\r\\n    ACTUSConstants,\\r\\n    ContractRoleConventions,\\r\\n    DayCountConventions,\\r\\n    EndOfMonthConventions,\\r\\n    Utils\\r\\n{}\\r\\n\",\"keccak256\":\"0x4f0be10497e1c0e5facce3686a8454bed5989ce9cc440e8438057f07ff5c04f8\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/SignedMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * Advanced math library for signed integers\\n * (including floats which are represented as multiples of 10 ** 18)\\n */\\nlibrary SignedMath {\\n\\n    int256 constant private INT256_MIN = -2 ** 255;\\n\\n    uint256 constant public PRECISION = 18;\\n    uint256 constant public MULTIPLICATOR = 10 ** PRECISION;\\n\\n\\n    /**\\n     * @dev The product of a and b has to be less than INT256_MAX (~10 ** 76),\\n     * as devision (normalization) is performed after multiplication\\n     * Upper boundary would be (10 ** 58) * (MULTIPLICATOR) == ~10 ** 76\\n     */\\n    function floatMult(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        if (a == 0 || b == 0) return 0;\\n\\n        require(!(a == -1 && b == INT256_MIN), \\\"SignedMath.floatMult: OVERFLOW_DETECTED\\\");\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedMath.floatMult: OVERFLOW_DETECTED\\\");\\n\\n        // normalize (divide by MULTIPLICATOR)\\n        int256 d = c / int256(MULTIPLICATOR);\\n        require(d != 0, \\\"SignedMath.floatMult: CANNOT_REPRESENT_GRANULARITY\\\");\\n\\n        return d;\\n    }\\n\\n    function floatDiv(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        require(b != 0, \\\"SignedMath.floatDiv: DIVIDED_BY_ZERO\\\");\\n\\n        // normalize (multiply by MULTIPLICATOR)\\n        if (a == 0) return 0;\\n        int256 c = a * int256(MULTIPLICATOR);\\n        require(c / a == int256(MULTIPLICATOR), \\\"SignedMath.floatDiv: OVERFLOW_DETECTED\\\");\\n\\n        require(!(b == -1 && a == INT256_MIN), \\\"SignedMath.floatDiv: OVERFLOW_DETECTED\\\");\\n        int256 d = c / b;\\n        require(d != 0, \\\"SignedMath.floatDiv: CANNOT_REPRESENT_GRANULARITY\\\");\\n\\n        return d;\\n    }\\n\\n    /**\\n        * @dev Returns the smallest of two signed numbers.\\n        */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n            return a <= b ? a : b;\\n    }\\n\\n    /**\\n        * @dev Returns the largest of two signed numbers.\\n        */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n            return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x884bb3aec6597cb12c2ce3417ec60a1ffc82970342eefde5b195fad728efa233\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/CycleUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath as SafeMul} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\nimport \\\"../ACTUSConstants.sol\\\";\\nimport \\\"../Conventions/EndOfMonthConventions.sol\\\";\\nimport \\\"./PeriodUtils.sol\\\";\\n\\n\\n/**\\n * @title Schedule\\n * @notice Methods related to generating event schedules.\\n */\\ncontract CycleUtils is ACTUSConstants, EndOfMonthConventions, PeriodUtils {\\n\\n    using BokkyPooBahsDateTimeLibrary for uint;\\n    using SafeMul for uint;\\n\\n    /**\\n     * @notice Applies the cycle n - times (n := cycleIndex) to a given date\\n     */\\n    function getNextCycleDate(IPS memory cycle, uint256 cycleStart, uint256 cycleIndex)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 newTimestamp;\\n\\n        if (cycle.p == P.D) {\\n            newTimestamp = cycleStart.addDays(cycle.i.mul(cycleIndex));\\n        } else if (cycle.p == P.W) {\\n            newTimestamp = cycleStart.addDays(cycle.i.mul(7).mul(cycleIndex));\\n        } else if (cycle.p == P.M) {\\n            newTimestamp = cycleStart.addMonths(cycle.i.mul(cycleIndex));\\n        } else if (cycle.p == P.Q) {\\n            newTimestamp = cycleStart.addMonths(cycle.i.mul(3).mul(cycleIndex));\\n        } else if (cycle.p == P.H) {\\n            newTimestamp = cycleStart.addMonths(cycle.i.mul(6).mul(cycleIndex));\\n        } else if (cycle.p == P.Y) {\\n            newTimestamp = cycleStart.addYears(cycle.i.mul(cycleIndex));\\n        } else {\\n            revert(\\\"Schedule.getNextCycleDate: ATTRIBUTE_NOT_FOUND\\\");\\n        }\\n\\n        return newTimestamp;\\n    }\\n\\n    /**\\n     * Computes an array of timestamps that represent dates in a cycle falling within a given segment.\\n     * @dev There are some notable edge cases: If the cycle is \\\"not set\\\" we return the start end end dates\\n     * of the cycle if they lie within the segment. Otherwise and empty array is returned.\\n     * @param cycleStart start time of the cycle\\n     * @param cycleEnd end time of the cycle\\n     * @param cycle IPS cycle\\n     * @param eomc end of month convention\\n     * @param addEndDate end date of the cycle should be added to the result if it falls in the segment\\n     * @param segmentStart start time of the segment\\n     * @param segmentEnd end time of the segment\\n     * @return an array of timestamps from the given cycle that fall within the specified segement\\n     */\\n    function computeDatesFromCycleSegment(\\n        uint256 cycleStart,\\n        uint256 cycleEnd,\\n        IPS memory cycle,\\n        EndOfMonthConvention eomc,\\n        bool addEndDate,\\n        uint256 segmentStart,\\n        uint256 segmentEnd\\n    )\\n        internal\\n        pure\\n        returns (uint256[MAX_CYCLE_SIZE] memory)\\n    {\\n        uint256[MAX_CYCLE_SIZE] memory dates;\\n        uint256 index;\\n\\n        // if the cycle is not set we return only the cycle start end end dates under these conditions:\\n        // we return the cycle start, if it's in the segment\\n        // in case of addEntTime = true, the cycle end is also returned if in the segment\\n        if (cycle.isSet == false) {\\n            if (isInSegment(cycleStart, segmentStart, segmentEnd)) {\\n                dates[index] = cycleStart;\\n                index++;\\n            }\\n            if (isInSegment(cycleEnd, segmentStart, segmentEnd)) {\\n                if (addEndDate == true) dates[index] = cycleEnd;\\n            }\\n            return dates;\\n        }\\n\\n        uint256 date = cycleStart;\\n        uint256 cycleIndex;\\n\\n        EndOfMonthConvention actualEOMC = adjustEndOfMonthConvention(eomc, cycleStart, cycle);\\n\\n        // walk through the cycle and create the cycle dates to be returned\\n        while (date < cycleEnd) {\\n            // if date is in segment and MAX_CYCLE_SIZE is not reached add it to the output array\\n            if (isInSegment(date, segmentStart, segmentEnd)) {\\n                require(index < (MAX_CYCLE_SIZE - 2), \\\"Schedule.computeDatesFromCycle: MAX_CYCLE_SIZE\\\");\\n                dates[index] = date;\\n                index++;\\n            }\\n\\n            cycleIndex++;\\n\\n            date = (actualEOMC == EndOfMonthConvention.EOM)\\n                ? shiftEndOfMonth(getNextCycleDate(cycle, cycleStart, cycleIndex))\\n                : getNextCycleDate(cycle, cycleStart, cycleIndex);\\n        }\\n\\n        // add additional time at the end if addEndDate\\n        if (addEndDate == true) {\\n            if (isInSegment(cycleEnd, segmentStart, segmentEnd)) {\\n                dates[index] = cycleEnd;\\n            }\\n        }\\n\\n        // handle a special case where S is set to LONG (e.g. for trimming a cycle to the maturity date)\\n        if (index > 0 && isInSegment(dates[index - 1], segmentStart, segmentEnd)) {\\n            if (cycle.s == S.LONG && index > 1 && cycleEnd != date) {\\n                dates[index - 1] = dates[index];\\n                delete dates[index];\\n            }\\n        }\\n\\n        return dates;\\n    }\\n\\n    /**\\n     * Computes the next date for a given an IPS cycle.\\n     * @param cycle IPS cycle\\n     * @param eomc end of month convention\\n     * @param anchorDate anchor date of the cycle\\n     * @param precedingDate the previous date of the cycle\\n     * @param addEndDate end date of the cycle should be added to the result if it falls in the segment\\n     * @param cycleEnd end date of the cyclic schedule\\n     * @return next date of the cycle\\n     */\\n    function computeNextCycleDateFromPrecedingDate(\\n        IPS memory cycle,\\n        EndOfMonthConvention eomc,\\n        uint256 anchorDate,\\n        uint256 precedingDate,\\n        bool addEndDate,\\n        uint256 cycleEnd\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (cycle.isSet == false || precedingDate == 0) return anchorDate;\\n\\n        uint256 nextCyclicDate = (adjustEndOfMonthConvention(eomc, anchorDate, cycle) == EndOfMonthConvention.EOM)\\n            ? shiftEndOfMonth(getNextCycleDate(cycle, precedingDate, 1))\\n            : getNextCycleDate(cycle, precedingDate, 1);\\n\\n        if (addEndDate && cycleEnd != 0) {\\n            // handle infinite loop (since preceding date is cycleEnd)\\n            if (precedingDate == cycleEnd) return 0;\\n            // add occurence at cycle end if date is greater than cycle end\\n            if (nextCyclicDate > cycleEnd) return cycleEnd;\\n        }\\n        // remove occurence if it is one cycle end\\n        if (addEndDate == false && cycleEnd != 0 && nextCyclicDate == cycleEnd) return 0;\\n\\n        return nextCyclicDate;\\n    }\\n\\n    /*\\n     * @notice Checks if a timestamp is in a given range.\\n     */\\n    function isInSegment(\\n        uint256 timestamp,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (startTimestamp > endTimestamp) return false;\\n        if (startTimestamp <= timestamp && timestamp <= endTimestamp) return true;\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x64b35c944c20202d1e93a19e2dda71e820f32904a5dba6a2a0d0270eb41b8d99\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/EventUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n/**\\n * @title EventUtils\\n * @notice Methods for encoding decoding events\\n */\\ncontract EventUtils {\\n\\n    function encodeEvent(EventType eventType, uint256 scheduleTime)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return (\\n            bytes32(uint256(uint8(eventType))) << 248 |\\n            bytes32(scheduleTime)\\n        );\\n    }\\n\\n    function decodeEvent(bytes32 _event)\\n        public\\n        pure\\n        returns (EventType, uint256)\\n    {\\n        EventType eventType = EventType(uint8(uint256(_event >> 248)));\\n        uint256 scheduleTime = uint256(uint64(uint256(_event)));\\n\\n        return (eventType, scheduleTime);\\n    }\\n\\n    /**\\n     * @notice Returns the epoch offset for a given event type to determine the\\n     * correct order of events if multiple events have the same timestamp\\n     */\\n    function getEpochOffset(EventType eventType)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(eventType);\\n    }\\n}\\n\",\"keccak256\":\"0x0b57772142cc74943c55eea2bd2c8d2fd035bead19592b75cd4f7ad3159f96ee\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/PeriodUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath as SafeMul} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n/**\\n * @title PeriodUtils\\n * @notice Utility methods for dealing with Periods\\n */\\ncontract PeriodUtils {\\n\\n    using BokkyPooBahsDateTimeLibrary for uint;\\n    using SafeMul for uint;\\n\\n    /**\\n     * @notice Applies a period in IP notation to a given timestamp\\n     */\\n    function getTimestampPlusPeriod(IP memory period, uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 newTimestamp;\\n\\n        if (period.p == P.D) {\\n            newTimestamp = timestamp.addDays(period.i);\\n        } else if (period.p == P.W) {\\n            newTimestamp = timestamp.addDays(period.i.mul(7));\\n        } else if (period.p == P.M) {\\n            newTimestamp = timestamp.addMonths(period.i);\\n        } else if (period.p == P.Q) {\\n            newTimestamp = timestamp.addMonths(period.i.mul(3));\\n        } else if (period.p == P.H) {\\n            newTimestamp = timestamp.addMonths(period.i.mul(6));\\n        } else if (period.p == P.Y) {\\n            newTimestamp = timestamp.addYears(period.i);\\n        } else {\\n            revert(\\\"PeriodUtils.getTimestampPlusPeriod: ATTRIBUTE_NOT_FOUND\\\");\\n        }\\n\\n        return newTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x7ba86e98c89c11d4b16bb7cf81339679e01c7a73d099a980e71335bb890e82d9\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/Utils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\nimport \\\"../Conventions/BusinessDayConventions.sol\\\";\\n\\nimport \\\"./EventUtils.sol\\\";\\nimport \\\"./PeriodUtils.sol\\\";\\nimport \\\"./CycleUtils.sol\\\";\\n\\n\\n/**\\n * @title Utils\\n * @notice Utility methods used throughout Core and all Engines\\n */\\ncontract Utils is BusinessDayConventions, EventUtils, PeriodUtils, CycleUtils {\\n\\n    /**\\n     * @notice Returns the event time for a given schedule time\\n     * @dev For optimization reasons not located in EventUtil\\n     * by applying the BDC specified in the terms\\n     */\\n    function computeEventTimeForEvent(bytes32 _event, BusinessDayConvention bdc, Calendar calendar, uint256 maturityDate)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        (, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        // handle maturity date\\n        return shiftEventTime(scheduleTime, bdc, calendar, maturityDate);\\n    }\\n}\\n\",\"keccak256\":\"0x0ab55d9aea5c5ba13eb25b08ec98afa1f48693644022c58b0f212dddcbc8a2a4\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/IEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../Core/ACTUSTypes.sol\\\";\\n\\n\\ninterface IEngine {\\n    function contractType() external pure returns (ContractType);\\n}\",\"keccak256\":\"0xe2ecdc18616473e64d932c47ccf8408e5a35c100fa24e3157ad9f530556135bb\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/STK/ISTKEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../Core/ACTUSTypes.sol\\\";\\nimport \\\"../IEngine.sol\\\";\\n\\n\\n/**\\n * @title IEngine\\n * @notice Interface which all Engines have to implement\\n */\\ninterface ISTKEngine is IEngine {\\n\\n    /**\\n     * @notice Initialize contract state space based on the contract terms.\\n     * @param terms terms of the contract\\n     * @return initial state of the contract\\n     */\\n    function computeInitialState(STKTerms calldata terms)\\n        external\\n        pure\\n        returns (State memory);\\n\\n    /**\\n     * Apply an event to the current state of a contract and returns the resulting contract state.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event to be applied to the contract state\\n     * @param externalData external data needed for STF evaluation (e.g. rate for RR events)\\n     * @return the resulting contract state\\n     */\\n    function computeStateForEvent(\\n        STKTerms calldata terms,\\n        State calldata state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        external\\n        pure\\n        returns (State memory);\\n\\n    /**\\n     * Evaluates the payoff for an event under the current state of the contract.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which the payoff should be evaluated\\n     * @param externalData external data needed for POF evaluation (e.g. fxRate)\\n     * @return the payoff of the event\\n     */\\n    function computePayoffForEvent(\\n        STKTerms calldata terms,\\n        State calldata state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        external\\n        pure\\n        returns (int256);\\n\\n    /**\\n     * @notice Computes a schedule segment of non-cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @return segment of the non-cyclic schedule\\n     */\\n    function computeNonCyclicScheduleSegment(\\n        STKTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segment\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeCyclicScheduleSegment(\\n        STKTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Computes the next non-cyclic contract events based on the contract terms\\n     * and the timestamp on which the prev. event occured.\\n     * @dev Assumes that non-cyclic events of the same event type have a unique schedule time\\n     * @param terms terms of the contract\\n     * @param lastNonCyclicEvent last non-cyclic event\\n     * @return next non-cyclic event\\n     */\\n    function computeNextNonCyclicEvent(\\n        STKTerms calldata terms,\\n        bytes32 lastNonCyclicEvent\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param lastScheduleTime last occurrence of cyclic event\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeNextCyclicEvent(\\n        STKTerms calldata terms,\\n        uint256 lastScheduleTime,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns(bytes32);\\n\\n    /**\\n     * @notice Verifies that the provided event is still scheduled under the terms, the current state of the\\n     * contract and the current state of the underlying.\\n     * @param _event event for which to check if its still scheduled\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param hasUnderlying boolean indicating whether the contract has an underlying contract\\n     * @param underlyingState state of the underlying (empty state object if non-existing)\\n     * @return boolean indicating whether event is still scheduled\\n     */\\n    function isEventScheduled(\\n        bytes32 _event,\\n        STKTerms calldata terms,\\n        State calldata state,\\n        bool hasUnderlying,\\n        State calldata underlyingState\\n    )\\n        external\\n        pure\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x41191cd72dc755e3ab1ccbccb35a32a4d4e2b0018ad0a957d86bc364cbd639a0\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/STK/STKEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport \\\"../../Core/Core.sol\\\";\\nimport \\\"../../Core/SignedMath.sol\\\";\\nimport \\\"./ISTKEngine.sol\\\";\\nimport \\\"./STKSTF.sol\\\";\\nimport \\\"./STKPOF.sol\\\";\\n\\n\\n/**\\n * @title STKEngine\\n * @notice Inherits from BaseEngine by implementing STFs, POFs according to the ACTUS standard for a STK contract\\n * @dev All numbers except unix timestamp are represented as multiple of 10 ** 18\\n */\\ncontract STKEngine is Core, STKSTF, STKPOF, ISTKEngine {\\n\\n    using SignedSafeMath for int;\\n    using SignedMath for int;\\n\\n\\n    function contractType() external pure override returns (ContractType) {\\n        return ContractType.STK;\\n    }\\n\\n    /**\\n     * Applies an event to the current state of a contract and returns the resulting contract state.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event to be applied to the contract state\\n     * @param externalData external data needed for STF evaluation (e.g. rate for RR events)\\n     * @return the resulting contract state\\n     */\\n    function computeStateForEvent(\\n        STKTerms calldata terms,\\n        State calldata state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        external\\n        pure\\n        override\\n        returns (State memory)\\n    {\\n        return stateTransitionFunction(\\n            terms,\\n            state,\\n            _event,\\n            externalData\\n        );\\n    }\\n\\n    /**\\n     * Evaluates the payoff for an event under the current state of the contract.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which the payoff should be evaluated\\n     * @param externalData external data needed for POF evaluation (e.g. fxRate)\\n     * @return the payoff of the event\\n     */\\n    function computePayoffForEvent(\\n        STKTerms calldata terms,\\n        State calldata state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        external\\n        pure\\n        override\\n        returns (int256)\\n    {\\n        // if alternative settlementCurrency is set then apply fxRate to payoff\\n        if (terms.settlementCurrency != address(0) && terms.currency != terms.settlementCurrency) {\\n            return payoffFunction(\\n                terms,\\n                state,\\n                _event,\\n                externalData\\n            ).floatMult(int256(externalData));\\n        }\\n\\n        return payoffFunction(\\n            terms,\\n            state,\\n            _event,\\n            externalData\\n        );\\n    }\\n\\n    /**\\n     * @notice Initialize contract state space based on the contract terms.\\n     * @param terms terms of the contract\\n     * @return the initial state of the contract\\n     */\\n    function computeInitialState(STKTerms calldata terms)\\n        external\\n        pure\\n        override\\n        returns (State memory)\\n    {\\n        State memory state;\\n\\n        state.contractPerformance = ContractPerformance.PF;\\n        state.statusDate = terms.statusDate;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * @notice Computes a schedule segment of non-cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * _param terms terms of the contract\\n     * _param segmentStart start timestamp of the segment\\n     * _param segmentEnd end timestamp of the segment\\n     * @return segment of the non-cyclic schedule\\n     */\\n    function computeNonCyclicScheduleSegment(\\n        STKTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd\\n    )\\n        external\\n        pure\\n        override\\n        returns (bytes32[] memory)\\n    {\\n        bytes32[MAX_EVENT_SCHEDULE_SIZE] memory events;\\n        uint16 index;\\n\\n        // issue date\\n        if (terms.issueDate != 0) {\\n            if (isInSegment(terms.issueDate, segmentStart, segmentEnd)) {\\n                events[index] = encodeEvent(EventType.ISS, terms.issueDate);\\n                index++;\\n            }\\n        }\\n\\n        // TODO: implement when 'Ex/Settlement'- dates get supported in State/Terms\\n\\n        // remove null entries from returned array\\n        bytes32[] memory schedule = new bytes32[](index);\\n        for (uint256 i = 0; i < index; i++) {\\n            schedule[i] = events[i];\\n        }\\n\\n        return schedule;\\n    }\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segment\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeCyclicScheduleSegment(\\n        STKTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        override\\n        returns(bytes32[] memory)\\n    {\\n        bytes32[MAX_EVENT_SCHEDULE_SIZE] memory events;\\n        uint256 index;\\n\\n        if (eventType == EventType.DIF) {\\n            if (terms.cycleAnchorDateOfDividend != 0) {\\n                uint256[MAX_CYCLE_SIZE] memory dividendSchedule = computeDatesFromCycleSegment(\\n                    terms.cycleAnchorDateOfDividend,\\n                    segmentEnd,\\n                    terms.cycleOfDividend,\\n                    terms.endOfMonthConvention,\\n                    false,\\n                    segmentStart,\\n                    segmentEnd\\n                );\\n                for (uint8 i = 0; i < MAX_CYCLE_SIZE; i++) {\\n                    if (dividendSchedule[i] == 0) break;\\n                    if (isInSegment(dividendSchedule[i], segmentStart, segmentEnd) == false) continue;\\n                    events[index] = encodeEvent(EventType.DIF, dividendSchedule[i]);\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        // remove null entries from returned array\\n        bytes32[] memory schedule = new bytes32[](index);\\n        for (uint256 i = 0; i < index; i++) {\\n            schedule[i] = events[i];\\n        }\\n\\n        return schedule;\\n    }\\n\\n    /**\\n     * @notice Computes the next non-cyclic contract events based on the contract terms\\n     * and the timestamp on which the prev. event occured.\\n     * @dev Assumes that non-cyclic events of the same event type have a unique schedule time\\n     * param terms terms of the contract\\n     * param lastNonCyclicEvent last non-cyclic event\\n     * @return next non-cyclic event\\n     */\\n    function computeNextNonCyclicEvent(\\n        STKTerms calldata terms,\\n        bytes32 lastNonCyclicEvent\\n    )\\n        external\\n        pure\\n        override\\n        returns (bytes32)\\n    {\\n        (EventType lastEventType, uint256 lastScheduleTime) = decodeEvent(lastNonCyclicEvent);\\n\\n        EventType eventTypeNextEvent;\\n        uint256 scheduleTimeNextEvent;\\n\\n        // EventTypes ordered after epoch offset - so we don't have make an additional epochOffset check\\n\\n        // issue date\\n        if (\\n            // date for event has to be set in terms and date of event can be in the past\\n            (terms.issueDate != 0 && (lastScheduleTime <= terms.issueDate))\\n            // date for event has to come before previous candidate for the next event\\n            && (scheduleTimeNextEvent == 0 || terms.issueDate < scheduleTimeNextEvent)\\n            // avoid endless loop by requiring that the event is not the lastNonCyclicEvent\\n            && (lastScheduleTime != terms.issueDate || lastEventType != EventType.ISS)\\n        ) {\\n            eventTypeNextEvent = EventType.ISS;\\n            scheduleTimeNextEvent = terms.issueDate;\\n        }\\n\\n        return encodeEvent(eventTypeNextEvent, scheduleTimeNextEvent);\\n    }\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param lastScheduleTime last occurrence of cyclic event\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeNextCyclicEvent(\\n        STKTerms calldata terms,\\n        uint256 lastScheduleTime,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        override\\n        returns(bytes32)\\n    {\\n        if (eventType == EventType.DIF) {\\n            if (terms.cycleAnchorDateOfDividend != 0) {\\n                uint256 nextDividendDeclarationDate = computeNextCycleDateFromPrecedingDate(\\n                    terms.cycleOfDividend,\\n                    terms.endOfMonthConvention,\\n                    terms.cycleAnchorDateOfDividend,\\n                    lastScheduleTime,\\n                    true,\\n                    0\\n                );\\n                if (nextDividendDeclarationDate == uint256(0)) return bytes32(0);\\n                return encodeEvent(EventType.DIF, nextDividendDeclarationDate);\\n            }\\n        }\\n\\n        return bytes32(0);\\n    }\\n\\n    /**\\n     * @notice Verifies that the provided event is still scheduled under the terms, the current state of the\\n     * contract and the current state of the underlying.\\n     * param _event event for which to check if its still scheduled\\n     * param terms terms of the contract\\n     * @param state current state of the contract\\n     * param hasUnderlying boolean indicating whether the contract has an underlying contract\\n     * param underlyingState state of the underlying (empty state object if non-existing)\\n     * @return boolean indicating whether event is still scheduled\\n     */\\n    function isEventScheduled(\\n        bytes32 /* _event */,\\n        STKTerms calldata /* terms */,\\n        State calldata state,\\n        bool /* hasUnderlying */,\\n        State calldata /* underlyingState */\\n    )\\n        external\\n        pure\\n        override\\n        returns (bool)\\n    {\\n        if (\\n            state.contractPerformance == ContractPerformance.DF\\n            || state.contractPerformance == ContractPerformance.MD\\n            || state.contractPerformance == ContractPerformance.TD\\n        ) { return false; }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Implements abstract method which is defined in BaseEngine.\\n     * Applies an event to the current state of the contract and returns the resulting state.\\n     * The inheriting Engine contract has to map the events type to the designated STF.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which to evaluate the next state for\\n     * @param externalData external data needed for STF evaluation (e.g. rate for RR events)\\n     * @return the resulting contract state\\n     */\\n    function stateTransitionFunction(\\n        STKTerms memory terms,\\n        State memory state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        (EventType eventType, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        if (eventType == EventType.AD) return STF_STK_AD(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.ISS) return STF_STK_ISS(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.DIF) return STF_STK_DIF(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.DIX) return STF_STK_DIX(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.DIP) return STF_STK_DIP(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.SPF) return STF_STK_SPF(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.SPS) return STF_STK_SPS(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.REF) return STF_STK_REF(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.REX) return STF_STK_REX(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.REP) return STF_STK_REP(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.TD) return STF_STK_TD(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.CE) return STF_STK_CE(terms, state, scheduleTime, externalData);\\n\\n        revert(\\\"STKEngine.stateTransitionFunction: ATTRIBUTE_NOT_FOUND\\\");\\n    }\\n\\n    /**\\n     * @notice Implements abstract method which is defined in BaseEngine.\\n     * Computes the payoff for an event under the current state of the contract.\\n     * The inheriting Engine contract has to map the events type to the designated POF.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which the payoff should be evaluated\\n     * @param externalData external data needed for POF evaluation (e.g. fxRate)\\n     * @return the payoff of the event\\n     */\\n    function payoffFunction(\\n        STKTerms memory terms,\\n        State memory state,\\n        bytes32 _event,\\n        bytes32 externalData\\n    )\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        (EventType eventType, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        if (eventType == EventType.AD) return 0;\\n        if (eventType == EventType.ISS) return 0;\\n        if (eventType == EventType.DIF) return 0;\\n        if (eventType == EventType.DIX) return 0;\\n        if (eventType == EventType.SPF) return 0;\\n        if (eventType == EventType.SPS) return 0;\\n        if (eventType == EventType.REF) return 0;\\n        if (eventType == EventType.REX) return 0;\\n        if (eventType == EventType.CE) return 0;\\n        if (eventType == EventType.DIP) return POF_STK_DIP(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.REP) return POF_STK_REP(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.TD) return POF_STK_TD(terms, state, scheduleTime, externalData);\\n\\n        revert(\\\"STKEngine.payoffFunction: ATTRIBUTE_NOT_FOUND\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x3f6d20baaf2115e68f4ba05b2c12a5e8686ab80b5853c0cc9cdf2831bb3457ad\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/STK/STKPOF.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport \\\"../../Core/Core.sol\\\";\\nimport \\\"../../Core/SignedMath.sol\\\";\\n\\n\\n/**\\n * @title POF\\n * @notice Contains all Payoff Functions (POFs) for STK contracts\\n */\\ncontract STKPOF is Core {\\n\\n    using SignedSafeMath for int;\\n    using SignedMath for int;\\n\\n\\n    /**\\n     * Payoff Function for STK dividend payment events\\n     * @return the dividend payoff\\n     */\\n    function POF_STK_DIP (\\n        STKTerms memory terms,\\n        State memory state,\\n        uint256 /* scheduleTime */,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns(int256)\\n    {\\n        return (\\n            roleSign(terms.contractRole) * state.dividendPaymentAmount\\n        );\\n    }\\n\\n    /**\\n     * Payoff Function for STK redemption payment events\\n     * @return the redemption payoff\\n     */\\n    function POF_STK_REP (\\n        STKTerms memory terms,\\n        State memory state,\\n        uint256 /* scheduleTime */,\\n        bytes32 externalData\\n    )\\n        internal\\n        pure\\n        returns(int256)\\n    {\\n        if (terms.redeemableByIssuer == RedeemableByIssuer.Y) {\\n            return (\\n                roleSign(terms.contractRole) * state.exerciseQuantity\\n                .floatMult(terms.redemptionPrice != 0 ? terms.redemptionPrice : int256(externalData))\\n            );\\n        }\\n        \\n        return 0;\\n    }\\n\\n     /**\\n     * Payoff Function for STK termination events\\n     * @return the termination payoff\\n     */\\n    function POF_STK_TD (\\n        STKTerms memory terms,\\n        State memory state,\\n        uint256 /* scheduleTime */,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns(int256)\\n    {\\n        return (\\n            roleSign(terms.contractRole) * state.quantity.floatMult(terms.priceAtTerminationDate)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2e5d8e6fb35e3e756ad12d78b1a58030a5f860b34a3ee40495bb1e782175dd95\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/STK/STKSTF.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport \\\"../../Core/Core.sol\\\";\\nimport \\\"../../Core/SignedMath.sol\\\";\\n\\n\\n/**\\n * @title STF\\n * @notice Contains all state transition functions (STFs) for STK contracts\\n */\\ncontract STKSTF is Core {\\n\\n    using SignedSafeMath for int;\\n    using SignedMath for int;\\n\\n\\n    /**\\n     * State transition for STK monitoring events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_STK_AD (\\n        STKTerms memory /* terms */,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n    internal\\n    pure\\n    returns (State memory)\\n    {\\n        state.statusDate = scheduleTime;\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for STK issue fixing events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_STK_ISS (\\n        STKTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        state.quantity = terms.quantity;\\n        state.notionalPrincipal = terms.notionalPrincipal;\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for STK dividend fixing events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_STK_DIF (\\n        STKTerms memory /* terms */,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 externalData\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        state.dividendPaymentAmount = int256(externalData);\\n        state.lastDividendFixingDate = scheduleTime;\\n        state.statusDate = scheduleTime;\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for STK dividend fixing events\\n     * TODO: implement\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_STK_DIX (\\n        STKTerms memory /* terms */,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        state.statusDate = scheduleTime;\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for STK dividend payment events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_STK_DIP (\\n        STKTerms memory /* terms */,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n    internal\\n    pure\\n    returns (State memory)\\n    {\\n        state.dividendPaymentAmount = 0;\\n        state.statusDate = scheduleTime;\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for STK split fixing events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_STK_SPF (\\n        STKTerms memory /* terms */,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 externalData\\n    )\\n    internal\\n    pure\\n    returns (State memory)\\n    {\\n        state.splitRatio = int256(externalData);\\n        state.statusDate = scheduleTime;\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for STK split settlement events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_STK_SPS (\\n        STKTerms memory /* terms */,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n    internal\\n    pure\\n    returns (State memory)\\n    {\\n        state.quantity = state.splitRatio.floatMult(state.quantity);\\n        state.splitRatio = 0;\\n        state.statusDate = scheduleTime;\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for STK redemption fixing events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_STK_REF (\\n        STKTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 externalData\\n    )\\n    internal\\n    pure\\n    returns (State memory)\\n    {\\n        if (terms.redeemableByIssuer == RedeemableByIssuer.Y) {\\n            state.exerciseQuantity = int256(externalData);\\n        }\\n\\n        state.statusDate = scheduleTime;\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for STK redemption payment events\\n     * @param state the old state\\n     * TODO: implement\\n     * @return the new state\\n     */\\n    function STF_STK_REX (\\n        STKTerms memory /* terms */,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        state.statusDate = scheduleTime;\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for STK redemption payment events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_STK_REP (\\n        STKTerms memory terms,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        if (terms.redeemableByIssuer == RedeemableByIssuer.Y) {\\n            state.quantity = state.quantity.sub(state.exerciseQuantity);\\n            state.exerciseQuantity = 0;\\n        }\\n\\n        state.statusDate = scheduleTime;\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for STK redemption payment events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_STK_TD (\\n        STKTerms memory /* terms */,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        state.statusDate = scheduleTime;\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for CERTF settlement\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_STK_CE (\\n        STKTerms memory /* terms */,\\n        State memory state,\\n        uint256 scheduleTime,\\n        bytes32 /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (State memory)\\n    {\\n        state.statusDate = scheduleTime;\\n        return state;\\n    }\\n}\\n\",\"keccak256\":\"0xbfb51f7e950eabb442e3c19dc22edd652cb7ea3f1db24e8d5f2b056fdd839344\",\"license\":\"Apache-2.0\"},\"contracts/external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: MIT\\\"\\npragma solidity ^0.7.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x2b0c785d6fe1e5ae7239ac6833b6c014f865e1d12c4628dc9def5e0a901cc3eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506127e7806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063a6738b15116100ad578063d3e046bb11610071578063d3e046bb14610287578063e05a66e01461029a578063e726d680146102ad578063edc0465f1461026a578063f5586e05146102c05761012c565b8063a6738b151461022f578063aaf5eb6814610242578063b0caa2631461024a578063c40c5a981461026a578063cb2ef6f7146102725761012c565b80635b1b8e3e116100f45780635b1b8e3e146101cd5780636f37e55b146101e057806372540003146101e8578063811322fb146102095780638847634a1461021c5761012c565b8063179331f3146101315780631a2e165d1461015a57806320db60971461017a578063383d5ee91461019a5780635856bd3a146101ba575b600080fd5b61014461013f366004611e89565b6102d3565b60405161015191906123c8565b60405180910390f35b61016d610168366004611da8565b6103a3565b60405161015191906123ab565b61018d610188366004612020565b6103ca565b604051610151919061235c565b6101ad6101a8366004611f6d565b610556565b6040516101519190612598565b61016d6101c8366004611f6d565b61058f565b6101ad6101db366004611f25565b610654565b61016d61067b565b6101fb6101f6366004611d90565b610687565b6040516101519291906123d6565b61016d610217366004611ec7565b6106b0565b61016d61022a366004611fb4565b6106c4565b61016d61023d366004611f41565b61074b565b61016d6107e0565b61025d610258366004611ded565b6107e5565b60405161015191906123a0565b61016d61085f565b61027a610864565b60405161015191906123b4565b61018d610295366004611fea565b610869565b61016d6102a8366004611ee1565b610952565b61016d6102bb366004612339565b610970565b61016d6102ce366004612339565b610abc565b600060018460018111156102e357fe5b141561035f576102f283610b27565b6102fb84610b49565b14801561034a575060028260200151600581111561031557fe5b1480610330575060038260200151600581111561032e57fe5b145b8061034a575060048260200151600581111561034857fe5b145b156103575750600161039c565b50600061039c565b600084600181111561036d57fe5b141561037b5750600061039c565b60405162461bcd60e51b81526004016103939061252d565b60405180910390fd5b9392505050565b6000806103af86610687565b9150506103be81868686610970565b9150505b949350505050565b60606103d4611b2c565b6000600e8460218111156103e457fe5b14156104c9576101a0870135156104c9576103fd611b2c565b6104336101a08901358761041a368c90038c016104808d01611f0a565b61042a60c08d0160a08e01611e6d565b60008c8c610b58565b905060005b60788160ff1610156104c657818160ff166078811061045357fe5b6020020151610461576104c6565b61047f828260ff166078811061047357fe5b60200201518989610d40565b610488576104be565b6104a6600e838360ff166078811061049c57fe5b6020020151610952565b8484607881106104b257fe5b60200201526001909201915b600101610438565b50505b60608167ffffffffffffffff811180156104e257600080fd5b5060405190808252806020026020018201604052801561050c578160200160208202803683370190505b50905060005b8281101561054a5783816078811061052657fe5b602002015182828151811061053757fe5b6020908102919091010152600101610512565b50979650505050505050565b61055e611b4b565b6105866105703687900387018761206a565b61057f3687900387018761221c565b8585610d6f565b95945050505050565b6000806105a461012087016101008801611d76565b6001600160a01b0316141580156105ee57506105c861012086016101008701611d76565b6001600160a01b03166105e2610100870160e08801611d76565b6001600160a01b031614155b1561062c576106258261061f6106093689900389018961206a565b6106183689900389018961221c565b8787610f29565b906110cb565b90506103c2565b61058661063e3687900387018761206a565b61064d3687900387018761221c565b8585610f29565b61065c611b4b565b610664611b4b565b60008152610140830135602082015290505b919050565b670de0b6b3a764000081565b6000808060f884901c602181111561069b57fe5b92505067ffffffffffffffff83169050915091565b60008160218111156106be57fe5b92915050565b6000600e8260218111156106d457fe5b1415610741576101a08401351561074157600061071d6106fd3687900387016104808801611f0a565b61070d60c0880160a08901611e6d565b876101a0013587600160006111c6565b90508061072e57506000905061039c565b610739600e82610952565b91505061039c565b5060009392505050565b600080600061075984610687565b9150915060008086610160013560001415801561077b57508661016001358311155b80156107935750801580610793575080876101600135105b80156107ba5750866101600135831415806107ba575060028460218111156107b757fe5b14155b156107cb5750600290506101608601355b6107d58282610952565b979650505050505050565b601281565b600060036107f66020860186611e51565b600581111561080157fe5b1480610824575060046108176020860186611e51565b600581111561082257fe5b145b80610846575060056108396020860186611e51565b600581111561084457fe5b145b1561085357506000610586565b50600195945050505050565b607881565b600890565b6060610873611b2c565b6000610160860135156108be576108908661016001358686610d40565b156108be576108a56002876101600135610952565b828261ffff16607881106108b557fe5b60200201526001015b60608161ffff1667ffffffffffffffff811180156108db57600080fd5b50604051908082528060200260200182016040528015610905578160200160208202803683370190505b50905060005b8261ffff168110156109475783816078811061092357fe5b602002015182828151811061093457fe5b602090810291909101015260010161090b565b509695505050505050565b60008160f884602181111561096357fe5b60ff16901b179392505050565b6000818514156109815750836103c2565b600184600881111561098f57fe5b14806109a6575060038460088111156109a457fe5b145b156109b557610625858461128d565b60028460088111156109c357fe5b14806109da575060048460088111156109d857fe5b145b15610a1e5760006109eb868561128d565b90506109f6866112e9565b6109ff826112e9565b1415610a0c5790506103c2565b610a168685611300565b9150506103c2565b6005846008811115610a2c57fe5b1480610a4357506007846008811115610a4157fe5b145b15610a52576106258584611300565b6006846008811115610a6057fe5b1480610a7757506008846008811115610a7557fe5b145b15610ab3576000610a888685611300565b9050610a93866112e9565b610a9c826112e9565b1415610aa95790506103c2565b610a16868561128d565b50929392505050565b60006003846008811115610acc57fe5b1480610ae357506004846008811115610ae157fe5b145b80610af957506007846008811115610af757fe5b145b80610b0f57506008846008811115610b0d57fe5b145b15610b1b5750836103c2565b61058685858585610970565b60008080610b3a62015180855b0461134e565b50915091506103c282826113e4565b60006103c26201518083610b34565b610b60611b2c565b610b68611b2c565b6060870151600090610bd057610b7f8a8686610d40565b15610b9a5789828260788110610b9157fe5b60200201526001015b610ba5898686610d40565b15610bc85760018615151415610bc85788828260788110610bc257fe5b60200201525b5090506107d5565b89600080610bdf8a848d6102d3565b90505b8b831015610c7457610bf5838989610d40565b15610c335760768410610c1a5760405162461bcd60e51b8152600401610393906123ee565b82858560788110610c2757fe5b60200201526001909301925b600191820191816001811115610c4557fe5b14610c5a57610c558b8e8461146a565b610c6d565b610c6d610c688c8f8561146a565b6115a4565b9250610be2565b60018915151415610ca257610c8a8c8989610d40565b15610ca2578b858560788110610c9c57fe5b60200201525b600084118015610cbf5750610cbf85600186036078811061047357fe5b15610d2f5760008b604001516001811115610cd657fe5b148015610ce35750600184115b8015610cef5750828c14155b15610d2f57848460788110610d0057fe5b6020020151856001860360788110610d1457fe5b6020020152848460788110610d2557fe5b6020020160008152505b50929b9a5050505050505050505050565b600081831115610d525750600061039c565b838311158015610d625750818411155b156107415750600161039c565b610d77611b4b565b600080610d8385610687565b90925090506021826021811115610d9657fe5b1415610db157610da8878783876115d3565b925050506103c2565b6002826021811115610dbf57fe5b1415610dd157610da8878783876115e7565b600e826021811115610ddf57fe5b1415610df157610da887878387611614565b600f826021811115610dff57fe5b1415610e1157610da8878783876115d3565b6010826021811115610e1f57fe5b1415610e3157610da887878387611634565b6016826021811115610e3f57fe5b1415610e5157610da887878387611650565b6017826021811115610e5f57fe5b1415610e7157610da887878387611669565b6013826021811115610e7f57fe5b1415610e9157610da8878783876116a0565b6014826021811115610e9f57fe5b1415610eb157610da8878783876115d3565b6015826021811115610ebf57fe5b1415610ed157610da8878783876116d1565b601f826021811115610edf57fe5b1415610ef157610da8878783876115d3565b6001826021811115610eff57fe5b1415610f1157610da8878783876115d3565b60405162461bcd60e51b81526004016103939061248a565b6000806000610f3785610687565b90925090506021826021811115610f4a57fe5b1415610f5b576000925050506103c2565b6002826021811115610f6957fe5b1415610f7a576000925050506103c2565b600e826021811115610f8857fe5b1415610f99576000925050506103c2565b600f826021811115610fa757fe5b1415610fb8576000925050506103c2565b6016826021811115610fc657fe5b1415610fd7576000925050506103c2565b6017826021811115610fe557fe5b1415610ff6576000925050506103c2565b601382602181111561100457fe5b1415611015576000925050506103c2565b601482602181111561102357fe5b1415611034576000925050506103c2565b600182602181111561104257fe5b1415611053576000925050506103c2565b601082602181111561106157fe5b141561107357610da887878387611720565b601582602181111561108157fe5b141561109357610da887878387611742565b601f8260218111156110a157fe5b14156110b357610da8878783876117a8565b60405162461bcd60e51b8152600401610393906124e0565b60008215806110d8575081155b156110e5575060006106be565b826000191480156110f95750600160ff1b82145b156111355760405162461bcd60e51b81526004018080602001828103825260278152602001806127466027913960400191505060405180910390fd5b8282028284828161114257fe5b051461117f5760405162461bcd60e51b81526004018080602001828103825260278152602001806127466027913960400191505060405180910390fd5b670de0b6b3a76400008105806103c25760405162461bcd60e51b81526004018080602001828103825260328152602001806126e06032913960400191505060405180910390fd5b606086015160009015806111d8575083155b156111e4575083611283565b600060016111f388888b6102d3565b60018111156111fe57fe5b146112145761120f8886600161146a565b611223565b611223610c688987600161146a565b905083801561123157508215155b156112595782851415611248576000915050611283565b828111156112595782915050611283565b8315801561126657508215155b801561127157508281145b15611280576000915050611283565b90505b9695505050505050565b6000600182600181111561129d57fe5b14156112e2576112ac836117d4565b600614156112c6576112bf8360026117e7565b90506106be565b6112cf836117d4565b600714156112e2576112bf8360016117e7565b5090919050565b60006112f86201518083610b34565b509392505050565b6000600182600181111561131057fe5b14156112e25761131f836117d4565b60061415611332576112bf8360016117fc565b61133b836117d4565b600714156112e2576112bf8360026117fc565b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f84605002816113a557fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b600081600114806113f55750816003145b806114005750816005145b8061140b5750816007145b806114165750816008145b80611421575081600a145b8061142c575081600c145b156114395750601f6106be565b816002146114495750601e6106be565b61145283611811565b61145d57601c611460565b601d5b60ff169392505050565b600080808560200151600581111561147e57fe5b141561149b578451610625906114949085611836565b85906117e7565b6001856020015160058111156114ad57fe5b14156114d0578451610625906114949085906114ca906007611836565b90611836565b6002856020015160058111156114e257fe5b14156114ff578451610625906114f89085611836565b859061188f565b60038560200151600581111561151157fe5b141561152e578451610625906114f89085906114ca906003611836565b60048560200151600581111561154057fe5b141561155d578451610625906114f89085906114ca906006611836565b60058560200151600581111561156f57fe5b141561158c578451610625906115859085611836565b8590611909565b60405162461bcd60e51b81526004016103939061243c565b6000806000806115b385611930565b9194509250905060006115c684846113e4565b905061128384848361194e565b6115db611b4b565b50506020820152919050565b6115ef611b4b565b505061022083810151908301526101e090920151610100820152602081019190915290565b61161c611b4b565b506102a083015260e082018190526020820152919050565b61163c611b4b565b505060006102a08301526020820152919050565b611658611b4b565b506102c08301526020820152919050565b611671611b4b565b6102208401516102c0850151611686916110cb565b610220850152505060006102c08301526020820152919050565b6116a8611b4b565b60008560c0015160018111156116ba57fe5b14156115db57506102008301526020820152919050565b6116d9611b4b565b60008560c0015160018111156116eb57fe5b14156115db5761020084015161022085015161170691611968565b610220850152505060006102008301526020820152919050565b6000836102a0015161173586604001516119cd565b60000b0295945050505050565b6000808560c00151600181111561175557fe5b141561179d57611785856102600151600014156117725782611779565b8561026001515b610200860151906110cb565b61179286604001516119cd565b60000b0290506103c2565b506000949350505050565b60006117c78561028001518561022001516110cb90919063ffffffff16565b61173586604001516119cd565b6007620151809091046003010660010190565b6201518081028201828110156106be57600080fd5b6201518081028203828111156106be57600080fd5b60006004820615801561182657506064820615155b806106be57505061019090061590565b600082611845575060006106be565b8282028284828161185257fe5b041461039c5760405162461bcd60e51b815260040180806020018281038252602181526020018061276d6021913960400191505060405180910390fd5b60008080806118a16201518087610b34565b600c9188016000198101838104949094019650945092509006600101915060006118cb84846113e4565b9050808211156118d9578091505b620151808706620151806118ee868686611ab0565b02019450868510156118ff57600080fd5b5050505092915050565b600080808061191b6201518087610b34565b91870194509250905060006118cb84846113e4565b600080806119416201518085610b34565b9196909550909350915050565b60006201518061195f858585611ab0565b02949350505050565b600081830381831280159061197d5750838113155b80611992575060008312801561199257508381135b61039c5760405162461bcd60e51b815260040180806020018281038252602481526020018061278e6024913960400191505060405180910390fd5b60008082600c8111156119dc57fe5b14156119ea57506001610676565b600182600c8111156119f857fe5b1415611a075750600019610676565b600682600c811115611a1557fe5b1415611a2357506001610676565b600782600c811115611a3157fe5b1415611a405750600019610676565b600282600c811115611a4e57fe5b1415611a5c57506001610676565b600382600c811115611a6a57fe5b1415611a795750600019610676565b60405162461bcd60e51b81526004018080602001828103825260348152602001806127126034913960400191505060405180910390fd5b60006107b2841015611ac157600080fd5b838383600062253d8c600460036064611324600c600d19890105890101050205600c80600d19870105600c02600287030361016f0281611afd57fe5b0560046105b5600c600d1989010589016112c0010205617d4b8603010103039050809450505050509392505050565b60405180610f0001604052806078906020820280368337509192915050565b604080516102e081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461067657600080fd5b8035801515811461067657600080fd5b80356009811061067657600080fd5b8035610676816126c2565b8035610676816126d2565b8035600d811061067657600080fd5b80356013811061067657600080fd5b80356022811061067657600080fd5b600060808284031215611c84578081fd5b6040516080810181811067ffffffffffffffff82111715611ca157fe5b604052823581529050806020830135611cb9816126d2565b60208201526040830135611ccc816126c2565b6040820152611cdd60608401611c11565b60608201525092915050565b600060608284031215611cfa578081fd5b6040516060810181811067ffffffffffffffff82111715611d1757fe5b604052823581529050806020830135611d2f816126d2565b6020820152611d4060408401611c11565b60408201525092915050565b60006105008284031215611d5e578081fd5b50919050565b60006102e08284031215611d5e578081fd5b600060208284031215611d87578081fd5b61039c82611bfa565b600060208284031215611da1578081fd5b5035919050565b60008060008060808587031215611dbd578283fd5b84359350611dcd60208601611c21565b92506040850135611ddd816126c2565b9396929550929360600135925050565b6000806000806000610b008688031215611e05578283fd5b85359450611e168760208801611d4c565b9350611e26876105208801611d64565b9250611e356108008701611c11565b9150611e45876108208801611d64565b90509295509295909350565b600060208284031215611e62578081fd5b813561039c816126d2565b600060208284031215611e7e578081fd5b813561039c816126c2565b600080600060c08486031215611e9d578081fd5b8335611ea8816126c2565b925060208401359150611ebe8560408601611c73565b90509250925092565b600060208284031215611ed8578081fd5b61039c82611c64565b60008060408385031215611ef3578182fd5b611efc83611c64565b946020939093013593505050565b600060808284031215611f1b578081fd5b61039c8383611c73565b60006105008284031215611f37578081fd5b61039c8383611d4c565b6000806105208385031215611f54578182fd5b611f5e8484611d4c565b94610500939093013593505050565b6000806000806108208587031215611f83578182fd5b611f8d8686611d4c565b9350611f9d866105008701611d64565b93969395505050506107e082013591610800013590565b60008060006105408486031215611fc9578081fd5b611fd38585611d4c565b92506105008401359150611ebe6105208501611c64565b60008060006105408486031215611fff578081fd5b6120098585611d4c565b956105008501359550610520909401359392505050565b6000806000806105608587031215612036578182fd5b6120408686611d4c565b93506105008501359250610520850135915061205f6105408601611c64565b905092959194509250565b6000610500828403121561207c578081fd5b6103606120888161269e565b61209184611c55565b815261209f60208501611c30565b60208201526120b060408501611c46565b60408201526120c160608501611c3b565b60608201526120d260808501611c21565b60808201526120e360a08501611c30565b60a08201526120f460c08501611c30565b60c082015261210560e08501611bfa565b60e0820152610100612118818601611bfa565b9082015261012084810135908201526101408085013590820152610160808501359082015261018080850135908201526101a080850135908201526101c080850135908201526101e08085013590820152610200808501359082015261022080850135908201526102408085013590820152610260808501359082015261028080850135908201526102a06121af86828701611ce9565b908201526103006121c286868301611ce9565b6102c08301526121d486848701611ce9565b6102e08301526121e8866103c08701611ce9565b908201526121fa856104208601611ce9565b61032082015261220e856104808601611c73565b610340820152949350505050565b60006102e080838503121561222f578182fd5b6122388161269e565b905061224383611c3b565b81526020838101359082015260408084013590820152606080840135908201526080808401359082015260a0808401359082015260c0808401359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a080840135908201526101c080840135908201526101e08084013590820152610200808401359082015261022080840135908201526102408084013590820152610260808401359082015261028080840135908201526102a080840135908201526102c0928301359281019290925250919050565b60008060008060808587031215611dbd578182fd5b6006811061235857fe5b9052565b6020808252825182820181905260009190848201906040850190845b8181101561239457835183529284019291840191600101612378565b50909695505050505050565b901515815260200190565b90815260200190565b60208101601383106123c257fe5b91905290565b60208101600283106123c257fe5b60408101602284106123e457fe5b9281526020015290565b6020808252602e908201527f5363686564756c652e636f6d70757465446174657346726f6d4379636c653a2060408201526d4d41585f4359434c455f53495a4560901b606082015260800190565b6020808252602e908201527f5363686564756c652e6765744e6578744379636c65446174653a20415454524960408201526d1095551157d393d517d193d5539160921b606082015260800190565b60208082526036908201527f53544b456e67696e652e73746174655472616e736974696f6e46756e6374696f6040820152751b8e8810551514925095551157d393d517d193d5539160521b606082015260800190565b6020808252602d908201527f53544b456e67696e652e7061796f666646756e6374696f6e3a2041545452494260408201526c15551157d393d517d193d55391609a1b606082015260800190565b60208082526045908201527f456e644f664d6f6e7468436f6e76656e74696f6e2e61646a757374456e644f6660408201527f4d6f6e7468436f6e76656e74696f6e3a204154545249425554455f4e4f545f4660608201526427aaa7221760d91b608082015260a00190565b60006102e0820190506125ac82845161234e565b6020838101519083015260408084015190830152606080840151908301526080808401519083015260a0808401519083015260c0808401519083015260e08084015190830152610100808401519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151908301526102c092830151929091019190915290565b60405181810167ffffffffffffffff811182821017156126ba57fe5b604052919050565b600281106126cf57600080fd5b50565b600681106126cf57600080fdfe5369676e65644d6174682e666c6f61744d756c743a2043414e4e4f545f524550524553454e545f4752414e554c4152495459436f6e7472616374526f6c65436f6e76656e74696f6e2e726f6c655369676e3a204154545249425554455f4e4f545f464f554e445369676e65644d6174682e666c6f61744d756c743a204f564552464c4f575f4445544543544544536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f77a26469706673582212207b89f2cd3a28881f6489119c6a09175acfe5d655134b0f1291ea01884c92235f64736f6c63430007040033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "All numbers except unix timestamp are represented as multiple of 10 ** 18",
    "kind": "dev",
    "methods": {
      "adjustEndOfMonthConvention(uint8,uint256,(uint256,uint8,uint8,bool))": {
        "details": "The following is considered to dertermine if schedule dates are shifted to the end of month: - The convention SD (same day) means not adjusting, EM (end of month) means adjusting - Dates are only shifted if the schedule start date is an end-of-month date - Dates are only shifted if the schedule cycle is based on an \"M\" period unit or multiple thereof",
        "params": {
          "cycle": "the cycle struct",
          "eomc": "the end of month convention to adjust",
          "startTime": "timestamp of the cycle start"
        },
        "returns": {
          "_0": "the adjusted end of month convention"
        }
      },
      "computeCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256,uint8)": {
        "params": {
          "eventType": "eventType of the cyclic schedule",
          "segmentEnd": "end timestamp of the segment",
          "segmentStart": "start timestamp of the segment",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "event schedule segment"
        }
      },
      "computeEventTimeForEvent(bytes32,uint8,uint8,uint256)": {
        "details": "For optimization reasons not located in EventUtil by applying the BDC specified in the terms"
      },
      "computeInitialState((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)))": {
        "params": {
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "the initial state of the contract"
        }
      },
      "computeNextCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint8)": {
        "params": {
          "eventType": "eventType of the cyclic schedule",
          "lastScheduleTime": "last occurrence of cyclic event",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "event schedule segment"
        }
      },
      "computeNextNonCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),bytes32)": {
        "details": "Assumes that non-cyclic events of the same event type have a unique schedule time param terms terms of the contract param lastNonCyclicEvent last non-cyclic event",
        "returns": {
          "_0": "next non-cyclic event"
        }
      },
      "computeNonCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256)": {
        "returns": {
          "_0": "segment of the non-cyclic schedule"
        }
      },
      "computePayoffForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)": {
        "params": {
          "_event": "event for which the payoff should be evaluated",
          "externalData": "external data needed for POF evaluation (e.g. fxRate)",
          "state": "current state of the contract",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "the payoff of the event"
        }
      },
      "computeStateForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)": {
        "params": {
          "_event": "event to be applied to the contract state",
          "externalData": "external data needed for STF evaluation (e.g. rate for RR events)",
          "state": "current state of the contract",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "the resulting contract state"
        }
      },
      "isEventScheduled(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bool,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))": {
        "params": {
          "state": "current state of the contract param hasUnderlying boolean indicating whether the contract has an underlying contract param underlyingState state of the underlying (empty state object if non-existing)"
        },
        "returns": {
          "_0": "boolean indicating whether event is still scheduled"
        }
      }
    },
    "title": "STKEngine",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adjustEndOfMonthConvention(uint8,uint256,(uint256,uint8,uint8,bool))": {
        "notice": "This function makes an adjustment on the end of month convention."
      },
      "computeCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256,uint8)": {
        "notice": "Computes a schedule segment of cyclic contract events based on the contract terms and the specified timestamps."
      },
      "computeEventTimeForEvent(bytes32,uint8,uint8,uint256)": {
        "notice": "Returns the event time for a given schedule time"
      },
      "computeInitialState((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)))": {
        "notice": "Initialize contract state space based on the contract terms."
      },
      "computeNextCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint8)": {
        "notice": "Computes a schedule segment of cyclic contract events based on the contract terms and the specified timestamps."
      },
      "computeNextNonCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),bytes32)": {
        "notice": "Computes the next non-cyclic contract events based on the contract terms and the timestamp on which the prev. event occured."
      },
      "computeNonCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256)": {
        "notice": "Computes a schedule segment of non-cyclic contract events based on the contract terms and the specified timestamps. _param terms terms of the contract _param segmentStart start timestamp of the segment _param segmentEnd end timestamp of the segment"
      },
      "computePayoffForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)": {
        "notice": "Evaluates the payoff for an event under the current state of the contract."
      },
      "computeStateForEvent((uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bytes32,bytes32)": {
        "notice": "Applies an event to the current state of a contract and returns the resulting contract state."
      },
      "getEpochOffset(uint8)": {
        "notice": "Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp"
      },
      "isEventScheduled(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256),bool,(uint8,uint256,uint256,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,int256))": {
        "notice": "Verifies that the provided event is still scheduled under the terms, the current state of the contract and the current state of the underlying. param _event event for which to check if its still scheduled param terms terms of the contract"
      },
      "shiftCalcTime(uint256,uint8,uint8,uint256)": {
        "notice": "Used in POFs and STFs for DCFs. No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided."
      }
    },
    "notice": "Inherits from BaseEngine by implementing STFs, POFs according to the ACTUS standard for a STK contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}