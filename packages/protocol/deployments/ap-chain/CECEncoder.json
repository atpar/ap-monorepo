{
  "address": "0xd64057e5851b0C935A5B9AF8F6CEb5cDb9A89a6B",
  "abi": [],
  "transactionHash": "0xbd68c7f3eae6bbe835cd14db71550832ccd4671b0b28dc7edb0e95ee899be4c9",
  "receipt": {
    "to": null,
    "from": "0x6C51ECF949882c2183357B860FD82Dd4bb631840",
    "contractAddress": "0xd64057e5851b0C935A5B9AF8F6CEb5cDb9A89a6B",
    "transactionIndex": 0,
    "gasUsed": "1171250",
    "logsBloom": "0x
    "blockHash": "0x7b7cef1bd417c153355c53c7d88ec0c23d48cd0396096942e9711d81282aefe4",
    "transactionHash": "0xbd68c7f3eae6bbe835cd14db71550832ccd4671b0b28dc7edb0e95ee899be4c9",
    "logs": [],
    "blockNumber": 41,
    "cumulativeGasUsed": "1171250",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9f67175c1fda3401d369e9c5efd0dbe5",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decodeAndGetCECTerms(Asset storage)\":{\"details\":\"Decode and loads CECTerms\"},\"encodeAndSetCECTerms(Asset storage,CECTerms)\":{\"details\":\"Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encodeAndSetCECTerms(Asset storage,CECTerms)\":{\"notice\":\"All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/CEC/CECEncoder.sol\":\"CECEncoder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\n// enum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct State {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    // int256 delinquencyRate; not implemented\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionExercisePeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; // not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 contractDealDate;\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    int256 priceAtTerminationDate;\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\",\"keccak256\":\"0xdc4a72ed27c09ebbd6c76b352c94e3f2258ce309307a742b0436cf965d8acd27\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistryStorage.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"./State/StateEncoder.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\nstruct Settlement {\\n    bool isSettled;\\n    int256 payoff;\\n}\\n\\nstruct Asset {\\n    // boolean indicating that asset exists / is registered\\n    bool isSet;\\n    // address of the ACTUS Engine used for computing the State and the Payoff of the asset\\n    address engine;\\n    // address of the Asset Actor which is allowed to update the State of the asset\\n    address actor;\\n    // schedule of the asset\\n    Schedule schedule;\\n    // ownership of the asset\\n    AssetOwnership ownership;\\n    // granular ownership of the event type specific cashflows\\n    // per default owners are beneficiaries defined in ownership object\\n    // cashflow id (:= (EventType index + 1) * direction) => owner\\n    mapping (int8 => address) cashflowBeneficiaries;\\n    // method level access control - stores which address can a specific method\\n    // method signature => address => has access\\n    mapping (bytes4 => mapping (address => bool)) access;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedTerms;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedState;\\n    // indicates whether a specific event was settled\\n    mapping (bytes32 => Settlement) settlement;\\n}\\n\\n/**\\n * @title BaseRegistryStorage\\n * @notice Describes the storage of the AssetRegistry\\n * Contains getter and setter methods for encoding, decoding data to optimize gas cost.\\n * Circumvents storing default values by relying on the characteristic of mappings returning zero for not set values.\\n */\\nabstract contract BaseRegistryStorage {\\n\\n    using StateEncoder for Asset;\\n    using ScheduleEncoder for Asset;\\n\\n    // AssetId => Asset\\n    mapping (bytes32 => Asset) internal assets;\\n}\\n\",\"keccak256\":\"0xea52d9bb20a7b52f75fd27419e08201539bb402a9ce8a6da1ba5a2a585eedb87\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary ScheduleEncoder {\\n\\n    function encodeAndSetSchedule(Asset storage asset, bytes32[] memory schedule) internal {\\n        for (uint256 i = 0; i < schedule.length; i++) {\\n            if (schedule[i] == bytes32(0)) break;\\n            asset.schedule.events[i] = schedule[i];\\n            asset.schedule.length = i + 1;\\n        }\\n    }\\n\\n    function decodeAndGetSchedule(Asset storage asset) internal view returns (bytes32[] memory) {\\n        bytes32[] memory schedule = new bytes32[](asset.schedule.length);\\n\\n        for (uint256 i = 0; i < asset.schedule.length; i++) {\\n            schedule[i] = asset.schedule.events[i];\\n        }\\n\\n        return schedule;\\n    }\\n}\\n\",\"keccak256\":\"0x420da04c67322d387c9b0fbeb00accc59a63fb9c10cb7b4c21f955792c4ad236\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/State/StateEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary StateEncoder {\\n\\n    function storeInPackedState(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedState[attributeKey] == value) return;\\n        asset.packedState[attributeKey] = value;\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store State\\n     */\\n    function encodeAndSetState(Asset storage asset, State memory state) internal {\\n        storeInPackedState(asset, \\\"contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n\\n        storeInPackedState(asset, \\\"notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n        storeInPackedState(asset, \\\"exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store finalized State\\n     */\\n    function encodeAndSetFinalizedState(Asset storage asset, State memory state) internal {\\n        storeInPackedState(asset, \\\"F_contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"F_statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"F_nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"F_maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"F_exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"F_terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"F_lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"F_lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n\\n        storeInPackedState(asset, \\\"F_notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"F_accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"F_feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"F_nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"F_interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n        storeInPackedState(asset, \\\"F_exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"F_quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"F_couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"F_marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"F_adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"F_dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"F_splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Decode and load the State of the asset\\n     */\\n    function decodeAndGetState(Asset storage asset) internal view returns (State memory) {\\n        return State(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"statusDate\\\"]),\\n            uint256(asset.packedState[\\\"nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"lastCouponFixingDate\\\"]),\\n            uint256(asset.packedState[\\\"lastDividendFixingDate\\\"]),\\n\\n            int256(asset.packedState[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"nextPrincipalRedemptionPayment\\\"]),\\n            int256(asset.packedState[\\\"exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"exerciseQuantity\\\"]),\\n\\n            int256(asset.packedState[\\\"quantity\\\"]),\\n            int256(asset.packedState[\\\"couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"marginFactor\\\"]),\\n            int256(asset.packedState[\\\"adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"splitRatio\\\"])\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and load the finalized State of the asset\\n     */\\n    function decodeAndGetFinalizedState(Asset storage asset) internal view returns (State memory) {\\n        return State(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"F_statusDate\\\"]),\\n            uint256(asset.packedState[\\\"F_nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"F_exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"F_terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastCouponFixingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastDividendFixingDate\\\"]),\\n\\n            int256(asset.packedState[\\\"F_notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"F_accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"F_feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"F_nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"F_interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_nextPrincipalRedemptionPayment\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseQuantity\\\"]),\\n\\n            int256(asset.packedState[\\\"F_quantity\\\"]),\\n            int256(asset.packedState[\\\"F_couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"F_marginFactor\\\"]),\\n            int256(asset.packedState[\\\"F_adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"F_dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"F_splitRatio\\\"])\\n        );\\n    }\\n\\n\\n    function decodeAndGetEnumValueForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"F_contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetUIntValueForForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedState[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedState[attributeKey]);\\n    }\\n}\\n\",\"keccak256\":\"0x8ea00bd6be196c2c740901169da39a8a9224d4b3c8655408d4beb9dc6d20dc6f\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"},\"contracts/Core/CEC/CECEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary CECEncoder {\\n\\n    function storeInPackedTerms(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedTerms[attributeKey] == value) return;\\n        asset.packedTerms[attributeKey] = value;\\n    }\\n    \\n    /**\\n     * @dev Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\\n     * @notice All non zero values of the overwrittenTerms object are stored.\\n     * It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\\n     */\\n    function encodeAndSetCECTerms(Asset storage asset, CECTerms memory terms) external {\\n        storeInPackedTerms(\\n            asset,\\n            \\\"enums\\\",\\n            bytes32(uint256(uint8(terms.contractType))) << 248 |\\n            bytes32(uint256(uint8(terms.calendar))) << 240 |\\n            bytes32(uint256(uint8(terms.contractRole))) << 232 |\\n            bytes32(uint256(uint8(terms.dayCountConvention))) << 224 |\\n            bytes32(uint256(uint8(terms.businessDayConvention))) << 216 |\\n            bytes32(uint256(uint8(terms.endOfMonthConvention))) << 208 |\\n            bytes32(uint256(uint8(terms.creditEventTypeCovered))) << 200 |\\n            bytes32(uint256(uint8(terms.feeBasis))) << 192\\n        );\\n\\n        storeInPackedTerms(asset, \\\"statusDate\\\", bytes32(terms.statusDate));\\n        storeInPackedTerms(asset, \\\"maturityDate\\\", bytes32(terms.maturityDate));\\n\\n        storeInPackedTerms(asset, \\\"notionalPrincipal\\\", bytes32(terms.notionalPrincipal));\\n        \\n        storeInPackedTerms(asset, \\\"feeRate\\\", bytes32(terms.feeRate));\\n        storeInPackedTerms(asset, \\\"coverageOfCreditEnhancement\\\", bytes32(terms.coverageOfCreditEnhancement));\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_type_role\\\",\\n            bytes32(uint256(terms.contractReference_1._type)) << 16 |\\n            bytes32(uint256(terms.contractReference_1.role)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_object\\\",\\n            terms.contractReference_1.object\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_object2\\\",\\n            terms.contractReference_1.object2\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_type_role\\\",\\n            bytes32(uint256(terms.contractReference_2._type)) << 16 |\\n            bytes32(uint256(terms.contractReference_2.role)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_object\\\",\\n            terms.contractReference_2.object\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_object2\\\",\\n            terms.contractReference_2.object2\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and loads CECTerms\\n     */\\n    function decodeAndGetCECTerms(Asset storage asset) external view returns (CECTerms memory) {\\n        return CECTerms(\\n            ContractType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248))),\\n            Calendar(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240))),\\n            ContractRole(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232))),\\n            DayCountConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224))),\\n            BusinessDayConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216))),\\n            EndOfMonthConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208))),\\n            ContractPerformance(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200))),\\n            FeeBasis(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 192))),\\n\\n            uint256(asset.packedTerms[\\\"statusDate\\\"]),\\n            uint256(asset.packedTerms[\\\"maturityDate\\\"]),\\n\\n            int256(asset.packedTerms[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedTerms[\\\"feeRate\\\"]),\\n            int256(asset.packedTerms[\\\"coverageOfCreditEnhancement\\\"]),\\n\\n            ContractReference(\\n                asset.packedTerms[\\\"contractReference_1_object\\\"],\\n                asset.packedTerms[\\\"contractReference_1_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 8)))\\n            ),\\n            ContractReference(\\n                asset.packedTerms[\\\"contractReference_2_object\\\"],\\n                asset.packedTerms[\\\"contractReference_2_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 8)))\\n            )\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForCECAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == \\\"contractType\\\") {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"calendar\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240));\\n        } else if (attributeKey == bytes32(\\\"contractRole\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232));\\n        } else if (attributeKey == bytes32(\\\"dayCountConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224));\\n        } else if (attributeKey == bytes32(\\\"businessDayConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216));\\n        } else if (attributeKey == bytes32(\\\"endOfMonthConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208));\\n        } else if (attributeKey == bytes32(\\\"creditEventTypeCovered\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200));\\n        } else if (attributeKey == bytes32(\\\"feeBasis\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 192));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetAddressValueForForCECAttribute(Asset storage /* asset */, bytes32 /* attributeKey */)\\n        external\\n        pure\\n        returns (address)\\n    {\\n        return address(0);\\n    }\\n\\n    function decodeAndGetBytes32ValueForForCECAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return asset.packedTerms[attributeKey];\\n    }\\n\\n    function decodeAndGetUIntValueForForCECAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForCECAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetPeriodValueForForCECAttribute(Asset storage /* asset */, bytes32 /* attributeKey */)\\n        external\\n        pure\\n        returns (IP memory)\\n    {\\n        return IP(0, P(0), false);\\n    }\\n\\n    function decodeAndGetCycleValueForForCECAttribute(Asset storage /* asset */, bytes32 /* attributeKey */)\\n        external\\n        pure\\n        returns (IPS memory)\\n    {\\n        return IPS(0, P(0), S(0), false);\\n    }\\n\\n    function decodeAndGetContractReferenceValueForCECAttribute(Asset storage asset , bytes32 attributeKey )\\n        external\\n        view\\n        returns (ContractReference memory)\\n    {\\n        if (attributeKey == bytes32(\\\"contractReference_1\\\")) {\\n            return ContractReference(\\n                asset.packedTerms[\\\"contractReference_1_object\\\"],\\n                asset.packedTerms[\\\"contractReference_1_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 8)))\\n            );\\n        } else if (attributeKey == bytes32(\\\"contractReference_2\\\")) {\\n            return ContractReference(\\n                asset.packedTerms[\\\"contractReference_2_object\\\"],\\n                asset.packedTerms[\\\"contractReference_2_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 8)))\\n            );\\n        } else {\\n            return ContractReference(\\n                bytes32(0),\\n                bytes32(0),\\n                ContractReferenceType(0),\\n                ContractReferenceRole(0)\\n            );\\n        }\\n    }\\n}\",\"keccak256\":\"0xcb299ed5e42def70421cc5f0d2afdb9318ce1bedd2045285a5a5aee0be088657\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x61143d610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c8063a5be46bb11610070578063a5be46bb14610138578063bb63c3b5146100ad578063bce57f1b14610158578063cabb242914610178578063f4835d7014610198576100a8565b806326e7daac146100ad57806380e1292c146100d657806381555221146100f6578063856b0d6414610116578063a00aadbc146100ad575b600080fd5b6100c06100bb36600461100e565b6101b8565b6040516100cd91906111dd565b60405180910390f35b6100e96100e436600461100e565b6101d0565b6040516100cd9190611337565b61010961010436600461100e565b6101ff565b6040516100cd91906112f4565b81801561012257600080fd5b5061013661013136600461102f565b610228565b005b61014b61014636600461100e565b610529565b6040516100cd9190611367565b61016b61016636600461100e565b61071c565b6040516100cd91906112e6565b61018b61018636600461100e565b610959565b6040516100cd91906111c9565b6101ab6101a6366004610ff6565b610961565b6040516100cd91906111e6565b6000818152600e830160205260409020545b92915050565b6101d8610e50565b6040805160608101909152600080825260208201905b815260006020909101529392505050565b610207610e73565b604080516080810190915260008082526020820190815260200160006101ee565b61030e8264656e756d7360d81b60c08460e00151600181111561024757fe5b60ff1660001b901b60c88560c00151600581111561026157fe5b60ff1660001b901b60d08660a00151600181111561027b57fe5b60ff1660001b901b60d88760800151600881111561029557fe5b60ff1660001b901b60e0886060015160058111156102af57fe5b60ff1660001b901b60e88960400151600c8111156102c957fe5b60ff1660001b901b60f08a6020015160018111156102e357fe5b60ff1660001b901b60f88b6000015160128111156102fd57fe5b60ff16901b17171717171717610e1a565b61032e82697374617475734461746560b01b83610100015160001b610e1a565b610350826b6d617475726974794461746560a01b83610120015160001b610e1a565b61037782701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b83610140015160001b610e1a565b61039482666665655261746560c81b83610160015160001b610e1a565b6103c7827f636f7665726167654f66437265646974456e68616e63656d656e74000000000083610180015160001b610e1a565b610415826000805160206113c88339815191526008846101a001516060015160048111156103f157fe5b60001b901b6010856101a0015160400151600481111561040d57fe5b901b17610e1a565b610446827918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b836101a0015160000151610e1a565b61047a827f636f6e74726163745265666572656e63655f315f6f626a656374320000000000836101a0015160200151610e1a565b6104c0826000805160206113e88339815191526008846101c001516060015160048111156104a457fe5b60001b901b6010856101c0015160400151600481111561040d57fe5b6104f1827918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b836101c0015160000151610e1a565b610525827f636f6e74726163745265666572656e63655f325f6f626a656374320000000000836101c0015160200151610e1a565b5050565b6000816b636f6e74726163745479706560a01b1415610565575064656e756d7360d81b6000908152600e8301602052604090205460f81c6101ca565b6731b0b632b73230b960c11b82141561059b575064656e756d7360d81b6000908152600e8301602052604090205460f01c6101ca565b6b636f6e7472616374526f6c6560a01b8214156105d5575064656e756d7360d81b6000908152600e8301602052604090205460e81c6101ca565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b821415610615575064656e756d7360d81b6000908152600e8301602052604090205460e01c6101ca565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415610658575064656e756d7360d81b6000908152600e8301602052604090205460d81c6101ca565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b82141561069a575064656e756d7360d81b6000908152600e8301602052604090205460d01c6101ca565b7518dc99591a5d115d995b9d151e5c1950dbdd995c995960521b8214156106de575064656e756d7360d81b6000908152600e8301602052604090205460c81c6101ca565b67666565426173697360c01b821415610714575064656e756d7360d81b6000908152600e8301602052604090205460c01c6101ca565b5060006101ca565b610724610e94565b72636f6e74726163745265666572656e63655f3160681b82141561083557604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a656374320000000000835281815284832054818501526000805160206113c883398151915283525282902054909182019060101c60ff1660048111156107d857fe5b60048111156107e357fe5b8152602001600885600e0160006000805160206113c8833981519152815260200190815260200160002054901c60001c60ff16600481111561082157fe5b600481111561082c57fe5b905290506101ca565b7231b7b73a3930b1ba2932b332b932b731b2af9960691b82141561093257604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a656374320000000000835281815284832054818501526000805160206113e883398151915283525282902054909182019060101c60ff1660048111156108e957fe5b60048111156108f457fe5b8152602001600885600e0160006000805160206113e8833981519152815260200190815260200160002054901c60001c60ff16600481111561082157fe5b60408051608081018252600080825260208201819052909182019081526020016000610821565b600092915050565b610969610ebc565b604080516101e08101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c601281111561099e57fe5b60128111156109a957fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660018111156109e157fe5b60018111156109ec57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c811115610a2457fe5b600c811115610a2f57fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166005811115610a6757fe5b6005811115610a7257fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166008811115610aaa57fe5b6008811115610ab557fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610aed57fe5b6001811115610af857fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166005811115610b3057fe5b6005811115610b3b57fe5b815260200160c084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610b7357fe5b6001811115610b7e57fe5b8152697374617475734461746560b01b6000908152600e85016020818152604080842054828601526b6d617475726974794461746560a01b84528282528084205481860152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8452828252808420546060860152666665655261746560c81b8452828252808420546080808701919091527f636f7665726167654f66437265646974456e68616e63656d656e74000000000085528383528185205460a0870152815190810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b85528383528185205481527f636f6e74726163745265666572656e63655f315f6f626a656374320000000000855283835281852054818401526000805160206113c8833981519152855292909152918290205460c090930192909182019060101c60ff166004811115610cc657fe5b6004811115610cd157fe5b8152602001600886600e0160006000805160206113c8833981519152815260200190815260200160002054901c60001c60ff166004811115610d0f57fe5b6004811115610d1a57fe5b90528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a656374320000000000835281815284832054818501526000805160206113e883398151915283529081529083902054930192909182019060101c60ff166004811115610dba57fe5b6004811115610dc557fe5b8152602001600886600e0160006000805160206113e8833981519152815260200190815260200160002054901c60001c60ff166004811115610e0357fe5b6004811115610e0e57fe5b9052905290505b919050565b6000828152600e84016020526040902054811415610e3757610e4b565b6000828152600e8401602052604090208190555b505050565b6040805160608101909152600080825260208201905b8152600060209091015290565b60408051608081019091526000808252602082019081526020016000610e66565b604080516080810182526000808252602082018190529091820190815260200160005b905290565b604080516101e081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001610f2c610e94565b8152602001610eb7610e94565b803560098110610e1557600080fd5b803560028110610e1557600080fd5b803560068110610e1557600080fd5b8035600d8110610e1557600080fd5b803560138110610e1557600080fd5b600060808284031215610f95578081fd5b6040516080810181811067ffffffffffffffff82111715610fb257fe5b806040525080915082358152602083013560208201526040830135610fd6816113ba565b60408201526060830135610fe9816113ba565b6060919091015292915050565b600060208284031215611007578081fd5b5035919050565b60008060408385031215611020578081fd5b50508035926020909101359150565b6000808284036102c0811215611043578283fd5b833592506102a0601f1982011215611059578182fd5b506110656101e0611375565b61107160208501610f75565b815261107f60408501610f48565b602082015261109060608501610f66565b60408201526110a160808501610f57565b60608201526110b260a08501610f39565b60808201526110c360c08501610f48565b60a08201526110d460e08501610f57565b60c08201526101006110e7818601610f48565b60e083015261012080860135828401526101409150818601358184015250610160808601358284015261018091508186013581840152506101a080860135828401526101c0915061113a87838801610f84565b9083015261114c866102408701610f84565b90820152919491935090915050565b6009811061116557fe5b9052565b61116581611399565b611165816113a6565b600d811061116557fe5b6013811061116557fe5b805182526020810151602083015260408101516111ab816113b0565b604083015260608101516111be816113b0565b806060840152505050565b6001600160a01b0391909116815260200190565b90815260200190565b60006102a0820190506111fa828451611185565b602083015161120c6020840182611169565b50604083015161121f604084018261117b565b5060608301516112326060840182611172565b506080830151611245608084018261115b565b5060a083015161125860a0840182611169565b5060c083015161126b60c0840182611172565b5060e083015161127e60e0840182611169565b50610100838101519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a0808401516112c98285018261118f565b50506101c08301516112df61022084018261118f565b5092915050565b608081016101ca828461118f565b815181526020820151608082019061130b816113a6565b6020830152604083015161131e81611399565b8060408401525060608301511515606083015292915050565b815181526020820151606082019061134e816113a6565b8060208401525060408301511515604083015292915050565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561139157fe5b604052919050565b600281106113a357fe5b50565b600681106113a357fe5b600581106113a357fe5b600581106113a357600080fdfe636f6e74726163745265666572656e63655f315f747970655f726f6c65000000636f6e74726163745265666572656e63655f325f747970655f726f6c65000000a2646970667358221220d40eab31a655a956ec3e97d569bef5f2e217ede082ed766e6e19bd98c99acfa664736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100a85760003560e01c8063a5be46bb11610070578063a5be46bb14610138578063bb63c3b5146100ad578063bce57f1b14610158578063cabb242914610178578063f4835d7014610198576100a8565b806326e7daac146100ad57806380e1292c146100d657806381555221146100f6578063856b0d6414610116578063a00aadbc146100ad575b600080fd5b6100c06100bb36600461100e565b6101b8565b6040516100cd91906111dd565b60405180910390f35b6100e96100e436600461100e565b6101d0565b6040516100cd9190611337565b61010961010436600461100e565b6101ff565b6040516100cd91906112f4565b81801561012257600080fd5b5061013661013136600461102f565b610228565b005b61014b61014636600461100e565b610529565b6040516100cd9190611367565b61016b61016636600461100e565b61071c565b6040516100cd91906112e6565b61018b61018636600461100e565b610959565b6040516100cd91906111c9565b6101ab6101a6366004610ff6565b610961565b6040516100cd91906111e6565b6000818152600e830160205260409020545b92915050565b6101d8610e50565b6040805160608101909152600080825260208201905b815260006020909101529392505050565b610207610e73565b604080516080810190915260008082526020820190815260200160006101ee565b61030e8264656e756d7360d81b60c08460e00151600181111561024757fe5b60ff1660001b901b60c88560c00151600581111561026157fe5b60ff1660001b901b60d08660a00151600181111561027b57fe5b60ff1660001b901b60d88760800151600881111561029557fe5b60ff1660001b901b60e0886060015160058111156102af57fe5b60ff1660001b901b60e88960400151600c8111156102c957fe5b60ff1660001b901b60f08a6020015160018111156102e357fe5b60ff1660001b901b60f88b6000015160128111156102fd57fe5b60ff16901b17171717171717610e1a565b61032e82697374617475734461746560b01b83610100015160001b610e1a565b610350826b6d617475726974794461746560a01b83610120015160001b610e1a565b61037782701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b83610140015160001b610e1a565b61039482666665655261746560c81b83610160015160001b610e1a565b6103c7827f636f7665726167654f66437265646974456e68616e63656d656e74000000000083610180015160001b610e1a565b610415826000805160206113c88339815191526008846101a001516060015160048111156103f157fe5b60001b901b6010856101a0015160400151600481111561040d57fe5b901b17610e1a565b610446827918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b836101a0015160000151610e1a565b61047a827f636f6e74726163745265666572656e63655f315f6f626a656374320000000000836101a0015160200151610e1a565b6104c0826000805160206113e88339815191526008846101c001516060015160048111156104a457fe5b60001b901b6010856101c0015160400151600481111561040d57fe5b6104f1827918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b836101c0015160000151610e1a565b610525827f636f6e74726163745265666572656e63655f325f6f626a656374320000000000836101c0015160200151610e1a565b5050565b6000816b636f6e74726163745479706560a01b1415610565575064656e756d7360d81b6000908152600e8301602052604090205460f81c6101ca565b6731b0b632b73230b960c11b82141561059b575064656e756d7360d81b6000908152600e8301602052604090205460f01c6101ca565b6b636f6e7472616374526f6c6560a01b8214156105d5575064656e756d7360d81b6000908152600e8301602052604090205460e81c6101ca565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b821415610615575064656e756d7360d81b6000908152600e8301602052604090205460e01c6101ca565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415610658575064656e756d7360d81b6000908152600e8301602052604090205460d81c6101ca565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b82141561069a575064656e756d7360d81b6000908152600e8301602052604090205460d01c6101ca565b7518dc99591a5d115d995b9d151e5c1950dbdd995c995960521b8214156106de575064656e756d7360d81b6000908152600e8301602052604090205460c81c6101ca565b67666565426173697360c01b821415610714575064656e756d7360d81b6000908152600e8301602052604090205460c01c6101ca565b5060006101ca565b610724610e94565b72636f6e74726163745265666572656e63655f3160681b82141561083557604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a656374320000000000835281815284832054818501526000805160206113c883398151915283525282902054909182019060101c60ff1660048111156107d857fe5b60048111156107e357fe5b8152602001600885600e0160006000805160206113c8833981519152815260200190815260200160002054901c60001c60ff16600481111561082157fe5b600481111561082c57fe5b905290506101ca565b7231b7b73a3930b1ba2932b332b932b731b2af9960691b82141561093257604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a656374320000000000835281815284832054818501526000805160206113e883398151915283525282902054909182019060101c60ff1660048111156108e957fe5b60048111156108f457fe5b8152602001600885600e0160006000805160206113e8833981519152815260200190815260200160002054901c60001c60ff16600481111561082157fe5b60408051608081018252600080825260208201819052909182019081526020016000610821565b600092915050565b610969610ebc565b604080516101e08101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c601281111561099e57fe5b60128111156109a957fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660018111156109e157fe5b60018111156109ec57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c811115610a2457fe5b600c811115610a2f57fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166005811115610a6757fe5b6005811115610a7257fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166008811115610aaa57fe5b6008811115610ab557fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610aed57fe5b6001811115610af857fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166005811115610b3057fe5b6005811115610b3b57fe5b815260200160c084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610b7357fe5b6001811115610b7e57fe5b8152697374617475734461746560b01b6000908152600e85016020818152604080842054828601526b6d617475726974794461746560a01b84528282528084205481860152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8452828252808420546060860152666665655261746560c81b8452828252808420546080808701919091527f636f7665726167654f66437265646974456e68616e63656d656e74000000000085528383528185205460a0870152815190810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b85528383528185205481527f636f6e74726163745265666572656e63655f315f6f626a656374320000000000855283835281852054818401526000805160206113c8833981519152855292909152918290205460c090930192909182019060101c60ff166004811115610cc657fe5b6004811115610cd157fe5b8152602001600886600e0160006000805160206113c8833981519152815260200190815260200160002054901c60001c60ff166004811115610d0f57fe5b6004811115610d1a57fe5b90528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a656374320000000000835281815284832054818501526000805160206113e883398151915283529081529083902054930192909182019060101c60ff166004811115610dba57fe5b6004811115610dc557fe5b8152602001600886600e0160006000805160206113e8833981519152815260200190815260200160002054901c60001c60ff166004811115610e0357fe5b6004811115610e0e57fe5b9052905290505b919050565b6000828152600e84016020526040902054811415610e3757610e4b565b6000828152600e8401602052604090208190555b505050565b6040805160608101909152600080825260208201905b8152600060209091015290565b60408051608081019091526000808252602082019081526020016000610e66565b604080516080810182526000808252602082018190529091820190815260200160005b905290565b604080516101e081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001610f2c610e94565b8152602001610eb7610e94565b803560098110610e1557600080fd5b803560028110610e1557600080fd5b803560068110610e1557600080fd5b8035600d8110610e1557600080fd5b803560138110610e1557600080fd5b600060808284031215610f95578081fd5b6040516080810181811067ffffffffffffffff82111715610fb257fe5b806040525080915082358152602083013560208201526040830135610fd6816113ba565b60408201526060830135610fe9816113ba565b6060919091015292915050565b600060208284031215611007578081fd5b5035919050565b60008060408385031215611020578081fd5b50508035926020909101359150565b6000808284036102c0811215611043578283fd5b833592506102a0601f1982011215611059578182fd5b506110656101e0611375565b61107160208501610f75565b815261107f60408501610f48565b602082015261109060608501610f66565b60408201526110a160808501610f57565b60608201526110b260a08501610f39565b60808201526110c360c08501610f48565b60a08201526110d460e08501610f57565b60c08201526101006110e7818601610f48565b60e083015261012080860135828401526101409150818601358184015250610160808601358284015261018091508186013581840152506101a080860135828401526101c0915061113a87838801610f84565b9083015261114c866102408701610f84565b90820152919491935090915050565b6009811061116557fe5b9052565b61116581611399565b611165816113a6565b600d811061116557fe5b6013811061116557fe5b805182526020810151602083015260408101516111ab816113b0565b604083015260608101516111be816113b0565b806060840152505050565b6001600160a01b0391909116815260200190565b90815260200190565b60006102a0820190506111fa828451611185565b602083015161120c6020840182611169565b50604083015161121f604084018261117b565b5060608301516112326060840182611172565b506080830151611245608084018261115b565b5060a083015161125860a0840182611169565b5060c083015161126b60c0840182611172565b5060e083015161127e60e0840182611169565b50610100838101519083015261012080840151908301526101408084015190830152610160808401519083015261018080840151908301526101a0808401516112c98285018261118f565b50506101c08301516112df61022084018261118f565b5092915050565b608081016101ca828461118f565b815181526020820151608082019061130b816113a6565b6020830152604083015161131e81611399565b8060408401525060608301511515606083015292915050565b815181526020820151606082019061134e816113a6565b8060208401525060408301511515604083015292915050565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561139157fe5b604052919050565b600281106113a357fe5b50565b600681106113a357fe5b600581106113a357fe5b600581106113a357600080fdfe636f6e74726163745265666572656e63655f315f747970655f726f6c65000000636f6e74726163745265666572656e63655f325f747970655f726f6c65000000a2646970667358221220d40eab31a655a956ec3e97d569bef5f2e217ede082ed766e6e19bd98c99acfa664736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decodeAndGetCECTerms(Asset storage)": {
        "details": "Decode and loads CECTerms"
      },
      "encodeAndSetCECTerms(Asset storage,CECTerms)": {
        "details": "Tightly pack and store only non-zero overwritten terms (LifecycleTerms)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "encodeAndSetCECTerms(Asset storage,CECTerms)": {
        "notice": "All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}