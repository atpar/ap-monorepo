/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class Economics extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): Economics;
  methods: {
    computeEventTimeForEvent(
      _event: string | number[],
      terms: {
        calendar: number | string;
        contractRole: number | string;
        dayCountConvention: number | string;
        businessDayConvention: number | string;
        endOfMonthConvention: number | string;
        scalingEffect: number | string;
        penaltyType: number | string;
        feeBasis: number | string;
        creditEventTypeCovered: number | string;
        contractReference_1: {
          object: string | number[];
          contractReferenceType: number | string;
          contractReferenceRole: number | string;
        };
        contractReference_2: {
          object: string | number[];
          contractReferenceType: number | string;
          contractReferenceRole: number | string;
        };
        currency: string;
        marketObjectCodeRateReset: string | number[];
        statusDate: number | string;
        maturityDate: number | string;
        notionalPrincipal: number | string;
        nominalInterestRate: number | string;
        feeAccrued: number | string;
        accruedInterest: number | string;
        rateMultiplier: number | string;
        rateSpread: number | string;
        feeRate: number | string;
        nextResetRate: number | string;
        penaltyRate: number | string;
        premiumDiscountAtIED: number | string;
        priceAtPurchaseDate: number | string;
        nextPrincipalRedemptionPayment: number | string;
        coverageOfCreditEnhancement: number | string;
        gracePeriod: { i: number | string; p: number | string; isSet: boolean };
        delinquencyPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        lifeCap: number | string;
        lifeFloor: number | string;
        periodCap: number | string;
        periodFloor: number | string;
      }
    ): TransactionObject<BN>;

    decodeCollateralObject(
      object: string | number[]
    ): TransactionObject<{
      0: string;
      1: BN;
    }>;

    encodeCollateralAsObject(
      collateralToken: string,
      collateralAmount: number | string
    ): TransactionObject<string>;

    decodeEvent(
      _event: string | number[]
    ): TransactionObject<{
      0: BN;
      1: BN;
    }>;

    getEpochOffset(eventType: number | string): TransactionObject<BN>;

    PRECISION(): TransactionObject<BN>;

    encodeEvent(
      eventType: number | string,
      scheduleTime: number | string
    ): TransactionObject<string>;

    productRegistry(): TransactionObject<string>;

    getTerms(
      assetId: string | number[]
    ): TransactionObject<{
      calendar: BN;
      contractRole: BN;
      dayCountConvention: BN;
      businessDayConvention: BN;
      endOfMonthConvention: BN;
      scalingEffect: BN;
      penaltyType: BN;
      feeBasis: BN;
      creditEventTypeCovered: BN;
      contractReference_1: {
        object: string;
        contractReferenceType: BN;
        contractReferenceRole: BN;
      };
      contractReference_2: {
        object: string;
        contractReferenceType: BN;
        contractReferenceRole: BN;
      };
      currency: string;
      marketObjectCodeRateReset: string;
      statusDate: BN;
      maturityDate: BN;
      notionalPrincipal: BN;
      nominalInterestRate: BN;
      feeAccrued: BN;
      accruedInterest: BN;
      rateMultiplier: BN;
      rateSpread: BN;
      feeRate: BN;
      nextResetRate: BN;
      penaltyRate: BN;
      premiumDiscountAtIED: BN;
      priceAtPurchaseDate: BN;
      nextPrincipalRedemptionPayment: BN;
      coverageOfCreditEnhancement: BN;
      gracePeriod: { i: BN; p: BN; isSet: boolean };
      delinquencyPeriod: { i: BN; p: BN; isSet: boolean };
      lifeCap: BN;
      lifeFloor: BN;
      periodCap: BN;
      periodFloor: BN;
    }>;

    getState(
      assetId: string | number[]
    ): TransactionObject<{
      contractPerformance: BN;
      statusDate: BN;
      nonPerformingDate: BN;
      maturityDate: BN;
      executionDate: BN;
      notionalPrincipal: BN;
      accruedInterest: BN;
      feeAccrued: BN;
      nominalInterestRate: BN;
      interestScalingMultiplier: BN;
      notionalScalingMultiplier: BN;
      nextPrincipalRedemptionPayment: BN;
      executionAmount: BN;
    }>;

    getFinalizedState(
      assetId: string | number[]
    ): TransactionObject<{
      contractPerformance: BN;
      statusDate: BN;
      nonPerformingDate: BN;
      maturityDate: BN;
      executionDate: BN;
      notionalPrincipal: BN;
      accruedInterest: BN;
      feeAccrued: BN;
      nominalInterestRate: BN;
      interestScalingMultiplier: BN;
      notionalScalingMultiplier: BN;
      nextPrincipalRedemptionPayment: BN;
      executionAmount: BN;
    }>;

    getAnchorDate(assetId: string | number[]): TransactionObject<BN>;

    getEngineAddress(assetId: string | number[]): TransactionObject<string>;

    getActorAddress(assetId: string | number[]): TransactionObject<string>;

    getProductId(assetId: string | number[]): TransactionObject<string>;

    getNextEvent(assetId: string | number[]): TransactionObject<string>;

    getScheduleIndex(
      assetId: string | number[],
      scheduleId: number | string
    ): TransactionObject<BN>;

    incrementScheduleIndex(
      assetId: string | number[],
      scheduleId: number | string
    ): TransactionObject<void>;

    setState(
      assetId: string | number[],
      state: {
        contractPerformance: number | string;
        statusDate: number | string;
        nonPerformingDate: number | string;
        maturityDate: number | string;
        executionDate: number | string;
        notionalPrincipal: number | string;
        accruedInterest: number | string;
        feeAccrued: number | string;
        nominalInterestRate: number | string;
        interestScalingMultiplier: number | string;
        notionalScalingMultiplier: number | string;
        nextPrincipalRedemptionPayment: number | string;
        executionAmount: number | string;
      }
    ): TransactionObject<void>;

    setFinalizedState(
      assetId: string | number[],
      state: {
        contractPerformance: number | string;
        statusDate: number | string;
        nonPerformingDate: number | string;
        maturityDate: number | string;
        executionDate: number | string;
        notionalPrincipal: number | string;
        accruedInterest: number | string;
        feeAccrued: number | string;
        nominalInterestRate: number | string;
        interestScalingMultiplier: number | string;
        notionalScalingMultiplier: number | string;
        nextPrincipalRedemptionPayment: number | string;
        executionAmount: number | string;
      }
    ): TransactionObject<void>;
  };
  events: {
    IncrementedScheduleIndex: ContractEvent<{
      assetId: string;
      scheduleId: BN;
      scheduleIndex: BN;
      0: string;
      1: BN;
      2: BN;
    }>;
    UpdatedState: ContractEvent<{
      assetId: string;
      statusDate: BN;
      0: string;
      1: BN;
    }>;
    UpdatedFinalizedState: ContractEvent<{
      assetId: string;
      statusDate: BN;
      0: string;
      1: BN;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
