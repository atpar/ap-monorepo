/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class IDataRegistry extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): IDataRegistry;
  methods: {
    isRegistered(setId: string | number[]): TransactionObject<boolean>;

    getLastUpdatedTimestamp(
      setId: string | number[]
    ): TransactionObject<string>;

    getDataProvider(setId: string | number[]): TransactionObject<string>;

    setDataProvider(
      setId: string | number[],
      provider: string
    ): TransactionObject<void>;

    publishDataPoint(
      setId: string | number[],
      timestamp: number | string,
      dataPoint: number | string
    ): TransactionObject<void>;

    getDataPoint(
      setId: string | number[],
      timestamp: number | string
    ): TransactionObject<{
      0: string;
      1: boolean;
    }>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
